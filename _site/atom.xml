<?xml version="1.0" encoding="iso-8859-1"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The Life of a Radar</title>
 <link href="http://ryanbigg.com/atom.xml" rel="self"/>
 <link href="http://ryanbigg.com"/>
 <updated>2021-03-09T09:04:55+11:00</updated>
 <id>http://ryanbigg.com/</id>
 <author>
   <name>Ryan Bigg</name>
   <email>radarlistener@gmail.com</email>
 </author>

 
 <entry>
   <title>Twist V2 - Live Coding</title>
   <link href="http://ryanbigg.com/2021/01/twist-v2-live-coding"/>
   <updated>2021-01-13T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2021/01/twist-v2-live-coding</id>
   <content type="html"><![CDATA[<p>This year, I’ve been continuing on my work on <a href="https://github.com/radar/twist-v2">Twist</a>. As the README says:</p>

<blockquote>
  <p>This is a rewrite of my <a href="http://github.com/radar/twist">Rails-based book review app</a> in <a href="https://rom-rb.org/">rom-rb</a>, <a href="https://dry-rb.org/">dry-rb</a>, (some parts of) <a href="https://hanamirb.org/">Hanami</a>, <a href="https://sidekiq.org/">Sidekiq</a>, <a href="https://graphql.org/">GraphQL</a>, <a href="https://reactjs.org/">React</a>, <a href="https://reach.tech/router/">Reach Router</a>, <a href="https://www.apollographql.com/">Apollo</a>, <a href="https://www.typescriptlang.org/">TypeScript</a>, <a href="https://graphql-code-generator.com/">GraphQL Code Generator</a>, <a href="https://tailwindcss.com/">Tailwind</a>, and whatever other Cool Hipster Tech™ I can get my grubby hands on.</p>
</blockquote>

<p>This application is a hybrid application, consisting of two distinct parts: a Ruby backend, and a TypeScript frontend. They communicate over GraphQL.</p>

<p>To demonstrate what working on this application is like, I’m doing some live coding sessions on it, every Wednesday morning.</p>

<h2 id="episode-1-starting-the-invitations-feature">Episode 1: Starting the invitations feature</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/qWdyo3icsjU" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h2 id="episode-2-continuing-the-invitations-feature">Episode 2: Continuing the invitations feature</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/RKQLEEGIPyE" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h2 id="episode-3-checking-for-permissions-on-the-invitations">Episode 3: Checking for permissions on the invitations</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/Bg1W8-SzbHw " frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

]]></content>
 </entry>
 
 <entry>
   <title>React Select + Capybara + Selenium</title>
   <link href="http://ryanbigg.com/2020/09/react-select-capybara-selenium"/>
   <updated>2020-09-23T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2020/09/react-select-capybara-selenium</id>
   <content type="html"><![CDATA[<p>Today, I was adding a <a href="https://react-select.com/home">React Select</a> element to a page, and I really wanted to test it.</p>

<p>This is, surprisingly, <a href="https://github.com/JedWatson/react-select/issues/856">not the first time I’ve attempted this</a>.</p>

<p>Since 2016, React Select has undergone some changes, released a brand-new (and much better!) version. One of these big features is that it uses <a href="https://emotion.sh/docs/introduction">Emotion</a> for styling. A consequence of this is that React Select no longer has <code class="language-plaintext highlighter-rouge">.Select</code>, or <code class="language-plaintext highlighter-rouge">.Select-input</code> classes that you could use as selectors in the tests. Instead, it will generate hashed CSS selectors, like <code class="language-plaintext highlighter-rouge">css-2b097c-container</code> and <code class="language-plaintext highlighter-rouge">css-1rhbuit-multiValue</code>. These have the potential to change: if the underlying CSS changes, then the hash will change. So they are not reliable in tests.</p>

<p>To fix this, I used another prop of <code class="language-plaintext highlighter-rouge">ReactSelect</code> called <code class="language-plaintext highlighter-rouge">classNamePrefix</code>:</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">CreatableSelect</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-select/creatable</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="kd">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">label</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Admin</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Admin</span><span class="dl">"</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">label</span><span class="p">:</span> <span class="dl">"</span><span class="s2">HIU</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="dl">"</span><span class="s2">HIU</span><span class="dl">"</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">label</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Organisational</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Organisational</span><span class="dl">"</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">label</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Paid</span><span class="dl">"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Paid</span><span class="dl">"</span> <span class="p">},</span>
<span class="p">];</span>

<span class="c1">// "tags" here comes from a prop on this component</span>
<span class="kd">const</span> <span class="nx">selectedOptions</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">filter</span><span class="p">(({</span> <span class="nx">value</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">tags</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">value</span><span class="p">));</span>

<span class="k">return</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">CreatableSelect</span>
    <span class="na">options</span><span class="p">=</span><span class="si">{</span><span class="nx">options</span><span class="si">}</span>
    <span class="na">defaultValue</span><span class="p">=</span><span class="si">{</span><span class="nx">selectedOptions</span><span class="si">}</span>
    <span class="na">isMulti</span>
    <span class="na">classNamePrefix</span><span class="p">=</span><span class="s">"tags"</span>
  <span class="p">/&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>This prop adds additional classes to the React Select component, such as <code class="language-plaintext highlighter-rouge">.tags__control</code> and <code class="language-plaintext highlighter-rouge">.tags__multi-value</code> – values that <em>are</em> reliable and predictable!</p>

<p>This means that in the Capybara test, I can now use these to interact with this React Select component, like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">within_tags</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="n">within</span><span class="p">(</span><span class="s2">".tags__control"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">expect_selected_tag</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span>
  <span class="n">within_tags</span> <span class="k">do</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">).</span><span class="nf">to</span> <span class="n">have_selector</span><span class="p">(</span><span class="s2">".tags__multi-value"</span><span class="p">,</span> <span class="ss">text: </span><span class="n">tag</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">add_new_tag</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span>
  <span class="n">within_tags</span> <span class="k">do</span>
    <span class="n">find</span><span class="p">(</span><span class="s2">"input"</span><span class="p">).</span><span class="nf">fill_in</span><span class="p">(</span><span class="ss">with: </span><span class="n">tag</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">find</span><span class="p">(</span><span class="s2">".tags__option"</span><span class="p">,</span> <span class="ss">text: </span><span class="n">tag</span><span class="p">).</span><span class="nf">click</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">remove_tag</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span>
  <span class="n">within_tags</span> <span class="k">do</span>
    <span class="n">within</span><span class="p">(</span><span class="s2">".tags__multi-value"</span><span class="p">,</span> <span class="ss">text: </span><span class="n">tag</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">find</span><span class="p">(</span><span class="s2">".tags__multi-value__remove"</span><span class="p">).</span><span class="nf">click</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">scenario</span> <span class="s2">"Can update a User's tags"</span><span class="p">,</span> <span class="ss">js: </span><span class="kp">true</span> <span class="k">do</span>
  <span class="n">visit</span> <span class="n">edit_admin_user_path</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>

  <span class="n">expect_selected_tag</span><span class="p">(</span><span class="s2">"Existing tag"</span><span class="p">)</span>
  <span class="n">remove_tag</span><span class="p">(</span><span class="s2">"HIU"</span><span class="p">)</span>
  <span class="n">add_new_tag</span><span class="p">(</span><span class="s2">"Paid"</span><span class="p">)</span>
  <span class="n">add_new_tag</span><span class="p">(</span><span class="s2">"Custom tag"</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>I have the following helpers:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">expect_selected_tag</code>: When the page loads, the Select element should contain a tag that is <em>already</em> assigned to the user.</li>
  <li><code class="language-plaintext highlighter-rouge">remove_tag</code>: Used to remove a tag that appears in the Select element.</li>
  <li><code class="language-plaintext highlighter-rouge">add_new_tag</code>: Used to add either a tag from the list of options, or to create a brand new tag.</li>
</ol>

<p>With these helpers, I can effectively test React Select within Capybara and Selenium.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Selenium, Capybara, ChromeDriver: connection refused error debugging</title>
   <link href="http://ryanbigg.com/2020/08/selenium-capybara-chromedriver-connection-refused-error-debugging"/>
   <updated>2020-08-29T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2020/08/selenium-capybara-chromedriver-connection-refused-error-debugging</id>
   <content type="html"><![CDATA[<p>A few days ago, we started seeing this exception happening for <em>some</em> of our Capybara feature tests:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.1) Failure/Error: visit(sign_out_path)

      Selenium::WebDriver::Error::UnknownError:
        java.net.ConnectException: Connection refused (Connection refused)
      # [remote server] org.openqa.selenium.remote.server.WebDriverServlet(WebDriverServlet.java):240:in `lambda$handle$0'
      # [remote server] java.util.concurrent.Executors$RunnableAdapter(Executors.java):511:in `call'
      # [remote server] java.util.concurrent.FutureTask(FutureTask.java):266:in `run'
      # [remote server] java.util.concurrent.ThreadPoolExecutor(ThreadPoolExecutor.java):1149:in `runWorker'
      # [remote server] java.util.concurrent.ThreadPoolExecutor$Worker(ThreadPoolExecutor.java):624:in `run'
      # [remote server] java.lang.Thread(Thread.java):748:in `run'
      # ./spec/support/pages/login.rb:5:in `login'
      # ./spec/concepts/extraction/keyboard_shortcuts_spec.rb:84:in `block (2 levels) in &lt;main&gt;'
      # ./spec/spec_helper.rb:69:in `block (2 levels) in &lt;main&gt;'
      # ./spec/support/elasticsearch_spec_helper.rb:42:in `block (3 levels) in &lt;main&gt;'
      # ./spec/support/elasticsearch_spec_helper.rb:38:in `block (2 levels) in &lt;main&gt;'
</code></pre></div></div>

<p>Connection refused, fine. But connection refused to <em>what</em>? This error message doesn’t give us much to go on.</p>

<p>Seemingly nothing that we changed had caused this issue – it was one of those types of issues that just popped up spontaneously.</p>

<p>It turns out that this is due to a bug within Google ChromeDriver <code class="language-plaintext highlighter-rouge">85.0.4183.83</code>. Here’s the bug report for ChromeDriver: <a href="https://bugs.chromium.org/p/chromedriver/issues/detail?id=3578">Issue 3578</a>.</p>

<h2 id="debugging-steps">Debugging steps</h2>

<p>After quite a lot of playing around with our Docker container setup, building EC2 instances and testing things out there… I was able to track it down to this issue by adding this line to the configuration for our tests:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Selenium::WebDriver.logger.level = Logger::DEBUG
</code></pre></div></div>

<p>I knew of this trick by having to debug Selenium issues in the past – it’s a very helpful trick to get messages out of Selenium WebDriver that you wouldn’t otherwise see.</p>

<p>When I did this, I saw these messages come through:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2020-08-30 08:39:15 INFO Selenium &lt;- {"value":{"data":{"text":"{Alert text : "},"error":"unexpected alert open","message":"unexpected alert open: {Alert text : }\n  (Session info: chrome=85.0.4183.83)","stacktrace":"0   chromedriver                        0x000000010a9261b9 chromedriver + 4911545\n1   chromedriver                        0x000000010a8c5e03 chromedriver + 4517379\n2   chromedriver                        0x000000010a533da6 chromedriver + 773542\n3   chromedriver                        0x000000010a4c4072 chromedriver + 315506\n4   chromedriver                        0x000000010a4b7c23 chromedriver + 265251\n5   chromedriver                        0x000000010a491720 chromedriver + 108320\n6   chromedriver                        0x000000010a492693 chromedriver + 112275\n7   chromedriver                        0x000000010a8eef72 chromedriver + 4685682\n8   chromedriver                        0x000000010a8fcb3a chromedriver + 4741946\n9   chromedriver                        0x000000010a8fc801 chromedriver + 4741121\n10  chromedriver                        0x000000010a8d225e chromedriver + 4567646\n11  chromedriver                        0x000000010a8fd061 chromedriver + 4743265\n12  chromedriver                        0x000000010a8e3d0a chromedriver + 4640010\n13  chromedriver                        0x000000010a9160ba chromedriver + 4845754\n14  chromedriver                        0x000000010a92c387 chromedriver + 4936583\n15  libsystem_pthread.dylib             0x00007fff67652109 _pthread_start + 148\n16  libsystem_pthread.dylib             0x00007fff6764db8b thread_start + 15\n"}}
</code></pre></div></div>

<p>Well that looks like a crash!</p>

<p>An unexpected alert open? What does that mean?</p>

<p>This lead me to look through the issue logs for Capybara first, as these were tests using Capybara. The final “exit” point from our code uses Capybara code. When I looked on Capybara’s issue tracker I saw that there’s an issue for this problem: <a href="https://github.com/teamcapybara/capybara/issues/2382">Capybara Issue #2382</a>. This then links to a Selenium issue: <a href="https://github.com/SeleniumHQ/selenium/issues/8638">Selenium Issue #8638</a>, which itself then links to <a href="https://bugs.chromium.org/p/chromedriver/issues/detail?id=3578">Issue 3578</a>.</p>

<p>These are pretty good pieces of evidence that indicate it was a chromedriver issue. I then recalled that a colleague of mine, Luiz, mentioned that Chrome had updated a few days ago. An update of Chrome leads to an update in Chromedriver, and since it was Chromedriver that was breaking, I thought to check that.</p>

<p>On the Capybara issue, there are some good steps to reproduce the issue with a minimal test case. I used this to lock Chromedriver to the more modern version:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Webdrivers::Chromedriver.required_version = '85.0.4183.87'
</code></pre></div></div>

<p>The issue reported on Capybara wasn’t happening with that <code class="language-plaintext highlighter-rouge">.87</code> release, but it <em>does</em> happen with this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Webdrivers::Chromedriver.required_version = '85.0.4183.83'
</code></pre></div></div>

<p>So this then indicates that it’s a particular version of Chromedriver that causes the issue.</p>

<p>There are at least two ways to fix this issue.</p>

<p>The first is to lock Chromedriver using <code class="language-plaintext highlighter-rouge">Webdrivers::Chromedriver.required_version</code> to a particular version. But that means we need to remember to update that.</p>

<p>The second way is to dismiss the alert before finishing the test:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'bundler/inline'</span>

<span class="n">gemfile</span> <span class="k">do</span>
  <span class="n">source</span> <span class="s1">'https://rubygems.org'</span>
  <span class="n">gem</span> <span class="s1">'capybara'</span>
  <span class="n">gem</span> <span class="s1">'puma'</span>
  <span class="n">gem</span> <span class="s1">'selenium-webdriver'</span>
  <span class="n">gem</span> <span class="s1">'webdrivers'</span>
  <span class="n">gem</span> <span class="s1">'byebug'</span>
  <span class="n">gem</span> <span class="s1">'pry'</span>
<span class="k">end</span>

<span class="nb">require</span> <span class="s1">'selenium-webdriver'</span>
<span class="nb">require</span> <span class="s1">'capybara/dsl'</span>

<span class="no">Webdrivers</span><span class="o">::</span><span class="no">Chromedriver</span><span class="p">.</span><span class="nf">required_version</span> <span class="o">=</span> <span class="s1">'85.0.4183.83'</span>
<span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="p">.</span><span class="nf">logger</span><span class="p">.</span><span class="nf">level</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">::</span><span class="no">DEBUG</span>

<span class="n">html</span> <span class="o">=</span> <span class="o">&lt;&lt;~</span><span class="no">HTML</span><span class="sh">
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;title&gt;Hello World&lt;/title&gt;
    &lt;meta charset="utf-8"&gt;

    &lt;script type="text/javascript"&gt;
      window.addEventListener('beforeunload', (event) =&gt; {
        event.preventDefault();
        event.returnValue = '';
      });
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;&lt;a href="https://google.com"&gt;Hello World&lt;/a&gt;&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
</span><span class="no">HTML</span>

<span class="n">app</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span> <span class="p">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s2">"Content-Type"</span> <span class="o">=&gt;</span> <span class="s2">"text/html"</span> <span class="p">},</span> <span class="p">[</span><span class="n">html</span><span class="p">]</span> <span class="p">]</span> <span class="p">}</span>

<span class="n">session</span> <span class="o">=</span> <span class="no">Capybara</span><span class="o">::</span><span class="no">Session</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:selenium_chrome</span><span class="p">,</span> <span class="n">app</span><span class="p">)</span>
<span class="n">session</span><span class="p">.</span><span class="nf">visit</span> <span class="s1">'/'</span>
<span class="n">session</span><span class="p">.</span><span class="nf">click_on</span> <span class="s1">'Hello World'</span> <span class="c1"># interact with the page, to get Chrome to fire `beforeunload`</span>
<span class="n">session</span><span class="p">.</span><span class="nf">driver</span><span class="p">.</span><span class="nf">browser</span><span class="p">.</span><span class="nf">switch_to</span><span class="p">.</span><span class="nf">alert</span><span class="p">.</span><span class="nf">accept</span>
<span class="n">session</span><span class="p">.</span><span class="nf">visit</span> <span class="s1">'/'</span>
</code></pre></div></div>

<p>It’s the third-to-last and second-to-last lines here that will work around the issue here – we need to attempt to navigate away from the page and then click the alert. Then we can carry on testing after that point.</p>
]]></content>
 </entry>
 
 <entry>
   <title>How to tidy up Git Pull Requests</title>
   <link href="http://ryanbigg.com/2020/04/how-to-tidy-up-git-pull-requests"/>
   <updated>2020-04-23T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2020/04/how-to-tidy-up-git-pull-requests</id>
   <content type="html"><![CDATA[<p><strong>This post will cover how to break up a commit on a Git branch into two separate commits all from the terminal.</strong></p>

<p>Sometimes, developers can get carried away when they make commits. For instance, take <a href="https://github.com/radar/twist-v2/commit/19a513a6ae33ed0de3fb8ce426e7c7ec99449f0d">this commit</a> from yours truly. It <em>claims</em> to be fixing a particular issue, but there’s <em>a lot</em> of code there to fix that issue. Is all of it really necessary?</p>

<p>I’ll save you the spelunking: just the <code class="language-plaintext highlighter-rouge">frontend/src/styles.css</code> and <code class="language-plaintext highlighter-rouge">frontend/src/tailwind.css</code> files are the only things required to fix this issue. This commit <em>really</em> should’ve just been changes to those two files. The storybook changes should’ve been in a <em>separate</em> commit.</p>

<p>But the work has been done! Isn’t it now set in stone? No, this is Git! We can rewrite history.</p>

<p>So let’s pretend like this commit <em>hasn’t been committed to master yet</em>. I can do this by checking out a new branch to the commit before that one:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout 19a513a6~1 -b tidy-up-git-example
</code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">~1</code> means “1 before”. You could put any number here. You can see what this branch looks like <a href="https://github.com/radar/twist-v2/tree/tidy-up-git-example">on GitHub</a>. The latest commit will be <code class="language-plaintext highlighter-rouge">bb36d9b</code>, “Add back image missing”.</p>

<p>We now want to apply that <code class="language-plaintext highlighter-rouge">19a513a6</code> commit, the one that fixes Issue #22, to this branch. To do this, we’ll open a pull request against this <code class="language-plaintext highlighter-rouge">tidy-up-git-example</code> branch.</p>

<p>First, we need to switch to a new branch:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git switch -c fix/issue-22
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">switch</code> is a recent sub-command of Git, and <a href="https://github.blog/2019-08-16-highlights-from-git-2-23/">was added in 2.23.0</a>. You can think of it behaving like <code class="language-plaintext highlighter-rouge">checkout</code>.</p>

<p>We’ll now bring in that commit to this branch, applying it on top of the current history with <code class="language-plaintext highlighter-rouge">cherry-pick</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git cherry-pick 19a513a6
</code></pre></div></div>

<p>When we run <code class="language-plaintext highlighter-rouge">git log --oneline</code>, we’ll see this:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>f20de41 (HEAD -&gt; fix/issue-22) Fixes #22
bb36d9b (origin/tidy-up-git-example) Add back image missing
</code></pre></div></div>

<p>This shows us that the top-most / latest commit is that one we just cherry picked, and that the next most recent commit is the latest from the <code class="language-plaintext highlighter-rouge">origin/tidy-up-git-example</code> branch.</p>

<p>Next, you’ll need to push this branch up to GitHub:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin fix/issue-22
</code></pre></div></div>

<p>If you don’t have permission to push to this repository (and most of you won’t!), you’ll need to fork it on GitHub first, then:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add your-username git@github.com:your-username/twist-v2.git
git push your-username fix/issue-22
</code></pre></div></div>

<p>When this branch has been pushed to GitHub, you should now be able to create a pull request from that branch. You can do this by going to https://github.com/your-username/twist-v2/pull/new/fix/issue-22. On this page, under “Open a pull request” you’ll see two dropdowns: one for a “base” branch and one for “compare” branch:</p>

<p><img src="/images/tidy-up-github/base-and-compare.png" alt="Base &amp; Compare" /></p>

<p>The base branch is the branch you will be applying your pull request to. The changes in your pull request come from the compare branch. The “Able to merge” here indicates that there are no conflicts between the branches, and so this PR would be mergeable onto the base branch without trouble.</p>

<p>If we go ahead and create this PR now, we’ll see this:</p>

<p><img src="/images/tidy-up-github/big-diff.png" alt="Big Diff" /></p>

<p>How many lines?! If I was reviewing a PR of this length I would make sure to grab at least <em>one</em> cup of coffee and have slept well the night before too. Does this PR need to be so <em>massive</em>? We answered that before: no.</p>

<p>So we now have got ourselves a little bit stuck. We want to have the changes to fix Issue #22, but we also care about the storybook changes too. Let’s now work on how we can separate these two into two separate PRs.</p>

<h2 id="separating-out-issue-22">Separating out Issue #22</h2>

<p>Let’s start with just the CSS changes from <code class="language-plaintext highlighter-rouge">frontend/src/styles.css</code> and <code class="language-plaintext highlighter-rouge">frontend/src/tailwind.css</code>. We want just these changes to be in the PR’s commit. To do that, we need to <em>undo</em> and <em>redo</em> this commit.</p>

<p>To <em>undo</em> a commit, we use a Git operation called a <em>soft reset</em>:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset --soft HEAD~1
</code></pre></div></div>

<p>You can think of this like the opposite of <code class="language-plaintext highlighter-rouge">git commit</code>; it resets the Git repository’s state back to how it was right before <code class="language-plaintext highlighter-rouge">git commit</code> was run. All of changes from this commit will be staged for commit:</p>

<p><img src="/images/tidy-up-github/staged-for-commit.png" alt="Staged for commit" /></p>

<p>But our latest commit will show up as the one from <code class="language-plaintext highlighter-rouge">tidy-up-git-example</code>:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log --oneline
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bb36d9b (HEAD -&gt; fix/issue-22, origin/tidy-up-git-example) Add back image missing
</code></pre></div></div>

<p>Now that we’re back to our pre-<code class="language-plaintext highlighter-rouge">git commit</code> stage, we need to go back one more step, back to before <code class="language-plaintext highlighter-rouge">git add</code> was run to stage these files. To do that, we need to run:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset HEAD
</code></pre></div></div>

<p>This command will unstage all the changes in our repository:</p>

<p><img src="/images/tidy-up-github/unstaged-files.png" alt="Unstaged files" /></p>

<p>Now we want to just add the changes from <code class="language-plaintext highlighter-rouge">frontend/src/styles.css</code> and <code class="language-plaintext highlighter-rouge">frontend/src/tailwind.css</code>. We can do this with:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add frontend/src/styles.css
git add frontend/src/tailwind.css
</code></pre></div></div>

<p>(Or if we were wanting to pick-and-choose changes from these files, we could do <code class="language-plaintext highlighter-rouge">git add -p &lt;file&gt;</code> instead)</p>

<p>This will stage these two files:</p>

<p><img src="/images/tidy-up-github/two-staged-files.png" alt="Two staged files" /></p>

<p>Next, we can commit these changes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit -m "Fixes #22"
</code></pre></div></div>

<p>We’ve now re-written the history of the <code class="language-plaintext highlighter-rouge">fix/issue-22</code> branch. The latest commit on this branch, according to our local computer, is different to the latest one on GitHub. We need to tell GitHub that our history is correct, and we can do this with:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push &lt;your username&gt; fix/issue-22 --force-with-lease
</code></pre></div></div>

<p>This option will force-push your changes to GitHub, updating GitHub with the simpler changes.</p>

<p>If you refresh the GitHub pull request window, you’ll now see a much, much smaller diff number:</p>

<p><img src="/images/tidy-up-github/small-diff.png" alt="Small Diff" /></p>

<p>Much better! Our PR is now just focussed on the small changes that we needed to make to fix Issue #22.</p>

<p>We can then merge this PR to the branch, confident that the commit is small.</p>

<h2 id="storybook">Storybook</h2>

<p>Next up, we still need to pull in those storybook changes. Because we’ve reset and unstaged all the changes, those storybook changes will still be tracked as unstaged in our Git repository:</p>

<p><img src="/images/tidy-up-github/unstaged-storybook-files.png" alt="Unstaged storybook files" /></p>

<p>We can check out to a new branch for these changes, add these files, make a new commit and push these changes to GitHub:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git switch -c update-storybook
git add .
git commit -m "Update Storybook + separate stories"
git push origin update-storybook
</code></pre></div></div>

<p>We can then go about creating a pull request for these changes if we like by going to https://github.com/your-username/twist-v2/pull/new/update-storybook. Remember to change the base branch here to <code class="language-plaintext highlighter-rouge">tidy-up-git-example</code>!</p>

<p>Once the PR is created, we can choose to merge it to that base branch. The base branch will then have both sets of changes on it: one (small one) to fix Issue #22, and one (large one) to upgrade storybook.</p>

<p>The storybook changes <em>could</em> probably be split out into smaller commits too, but I’ll leave that one as an exercise to the reader.</p>
]]></content>
 </entry>
 
 <entry>
   <title>The Stand Down</title>
   <link href="http://ryanbigg.com/2020/04/the-stand-down"/>
   <updated>2020-04-06T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2020/04/the-stand-down</id>
   <content type="html"><![CDATA[<p>Two weeks ago, I was moved from a teaching position into a “curriculum development” position at Coder Academy. Instead of facing students and teaching them directly, I was to work with my teacher’s assistant on improving curriculum for <em>all of Coder Academy</em>. I absolutely love writing, and so this was an amazing opportunity to apply my craft.</p>

<p>We set to work on updating curriculum for all Coder Academy’s bootcamps, revising content a week or two ahead of where they were all at.</p>

<p>At the start of the week last week, an email went out from Coder Academy’s parent company that announced they were standing down some staff. This was at 9:50am on Monday morning. This email did not mention how many staff it was, but <a href="https://www.theguardian.com/australia-news/live/2020/mar/30/coronavirus-update-live-australia-news-nsw-qld-victoria-scott-morrison-press-conference-covid-19-restrictions-public-gatherings-cruise-lockdown-app-latest-updates?page=with:block-5e8138d38f0878a2a48aca93#block-5e8138d38f0878a2a48aca93">The Guardian helpfully reported that the number would be 235 staff</a>.</p>

<p>I was told that Monday that “don’t worry, it’s not academic staff”, meaning I would not be affected. They let some of the admin staff go, or reduced their hours. Some people went from working 5 days a week to only working two.</p>

<p>I didn’t receive word at all if I still had my job or not until Friday. On Friday, at about 3pm, I received a phone call not from my Coder Academy manager, but from the head of HR at RedHill: Ruby Biscuit. She told me that I would be stood down immediately.</p>

<p>It was almost an entire business week of waiting and anxiety. I still tried working through it and, surprisingly, got a lot done.</p>

<p>13 minutes after that phone call, I was locked out of Coder’s GitHub and Slack accounts. My direct bosses did not know this phone call was going to happen. The call came from Ruby instead.</p>

<hr />

<p>Then there was a standard “Stand Down” form letter. It’s brutal. An older version of this post contained the text, but I’ll save you the brutality here.</p>

<p>The letter says that I can come back to my job once this whole COVID thing blows over. That’s all well-and-good, but to be honest I will likely have another job by then.</p>

<p>The letter also says that I remain an employee, but the dictionary definition of “employee” is:</p>

<blockquote>
  <p>a person employed for wages or salary, especially at non-executive level.</p>
</blockquote>

<p>And I am not getting wages or a salary, nor am I being required to do any work. So I am not sure how this still makes me an employee.</p>

<p>The letter says that I can draw down on my annual leave entitlements, but there are only 7 days of those. So I get a week and a half of runway before my money dries up.</p>

<p>The letter goes on to say that I should look into government benefits, but neglects to mention if RedHill has applied for the <a href="https://www.business.gov.au/risk-management/emergency-management/coronavirus-information-and-support-for-business/jobkeeper-payment">JobKeeper program</a>, or even if I would qualify for it. Doing my own research, yes I probably would. Do I know if they’ve applied for the program? Nope.</p>

<p>The letter at one point says:</p>

<blockquote>
  <p>We anticipate that the stand down will apply for a period of 3 months, but that timeframe may change pending the company’s ongoing review of pandemic circumstances.</p>
</blockquote>

<p>And later:</p>

<blockquote>
  <p>At the end of the stand down period, you will return to your role and your employment agreement will continue.</p>
</blockquote>

<p>But does not take into account my contract was due to run out on the 7th of July. The stand down came into effect on the 6th of April, Monday of this week. If it’s indeed <em>exactly</em> 3 months, it means that I would return to work on the 6th of July only for my contract to then run out on the 7th.</p>

<hr />

<p>How you let people go <em>matters</em>. More than ever in these COVID-19 times. We need to stick together; to be kind to one another. This letter and process is devoid of feeling and it threw me for a big loop. 13 minutes from phone call to cut off from my colleagues is too harsh. Especially when I did nothing wrong other than be in the wrong team.</p>

<p>Two simple ways they could’ve improved this process are:</p>

<ul>
  <li><strong>Let people know <em>immediately</em> on Monday morning if they had their job or not</strong>. The anxiety I had throughout the week would’ve been reduced massively.</li>
  <li><strong>Given me a week’s notice</strong> (as per the contract I signed when I joined). I would’ve liked to have (proverbially) packed my desk and (not proverbially) said my goodbyes. As it stands now, I have LinkedIn / Whatsapp / insert-26-other-chat-programs here messages to do that. It would’ve also allowed me to hand over any work or knowledge that I had to other people.</li>
</ul>

<p>Just these two things would’ve been a big help and really helped me transition out of there. Instead, I and many, many others have been cast out like detritus. It really hurts.</p>

<p>Anyway, I’m now looking for a new job. Go to <a href="https://ryanbigg.com/work">my /work page</a> to see what I’m interested in doing. I’m (obviously) available immediately.</p>
]]></content>
 </entry>
 
 <entry>
   <title>ROM and Dry Showcase: Part 4</title>
   <link href="http://ryanbigg.com/2020/02/rom-and-dry-showcase-part-4"/>
   <updated>2020-02-20T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2020/02/rom-and-dry-showcase-part-4</id>
   <content type="html"><![CDATA[<p>This is the 4th (and final) part of a 4 part series covering the <a href="https://rom-rb.org/">rom-rb</a> and <a href="https://dry-rb.org/">dry-rb</a> suites of gems.</p>

<ul>
  <li>Part 1: <a href="/2020/02/rom-and-dry-showcase-part-1">Application + Database setup</a></li>
  <li>Part 2: <a href="/2020/02/rom-and-dry-showcase-part-2">Validations + Transactions</a></li>
  <li>Part 3: <a href="/2020/02/rom-and-dry-showcase-part-3">Testing</a></li>
</ul>

<p>In this last part, we’re going to make it so that our application can receive and respond to HTTP requests.</p>

<p>So far, we’ve been seeing how to use gems either from the <code class="language-plaintext highlighter-rouge">dry-rb</code> suite of gems, or the <code class="language-plaintext highlighter-rouge">rom-rb</code> suite of gems. In this part though, we’re going to be using a gem from a <em>different</em> suite, a suite called Hanami.</p>

<p>Hanami is first and foremost a web framework. It has routes, controllers, actions, views and models. Just like your <em>other</em> favourite web framework – Rails. But the big difference between Hanami and Rails is that with Hanami we can pick and choose the parts of the framework that we want to use.</p>

<p>Hanami is a <em>modular</em> web framework, and if all we want to use is the router, controllers and actions, then we can. In this part of this showcase, we’re going to look at how we can use two gems from Hanami called <code class="language-plaintext highlighter-rouge">hanami-router</code> and <code class="language-plaintext highlighter-rouge">hanami-controller</code>. These gems will provide us with the features our application needs to receive and respond to HTTP requests.</p>

<p>Our application will take a request to <code class="language-plaintext highlighter-rouge">POST /users</code> with a JSON body shaped like this:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"first_name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ryan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"last_name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Bigg"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">32</span><span class="p">,</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>And the <em>response</em> will indicate if the request was successful or not. If it was successful, we will see a JSON response:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
  </span><span class="nl">"first_name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ryan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"last_name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Bigg"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">32</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Let’s go!</p>

<h2 id="installing-the-hanami-gems">Installing the Hanami gems</h2>

<p>Let’s add these gems to our Gemfile:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s2">"hanami-controller"</span><span class="p">,</span> <span class="s2">"~&gt; 1.3"</span>
<span class="n">gem</span> <span class="s2">"hanami-router"</span><span class="p">,</span> <span class="s2">"~&gt; 1.3"</span>
</code></pre></div></div>

<p>To install these gems, we can run <code class="language-plaintext highlighter-rouge">bundle install</code>.</p>

<p>In order to make sure that whatever we build with this application is performing correctly, we’ll add a third gem called <code class="language-plaintext highlighter-rouge">rack-test</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s2">"rack-test"</span>
</code></pre></div></div>

<p>We’re going to be using this gem to test our application in conjunction with RSpec. You might be thinking: why <code class="language-plaintext highlighter-rouge">rack-test</code>? That’s because the part of our application that will recieve and respond to HTTP requests will be a <em>Rack</em> application! Just like every other Ruby web framework out there.</p>

<h2 id="setting-up-the-test-environment">Setting up the test environment</h2>

<p>Before we can write our any code, we need to write tests for it. It’ll make sure that our application is working correctly! But before we can write tests, there’s a bit of setup we need to do first. We’re going to create a new file called <code class="language-plaintext highlighter-rouge">spec/web_helper.rb</code>. This file will setup how our tests can speak to our Rack application:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"spec_helper"</span>
<span class="nb">require</span> <span class="s2">"rack/test"</span>

<span class="k">module</span> <span class="nn">RequestHelpers</span>
  <span class="k">def</span> <span class="nf">app</span>
    <span class="no">Bix</span><span class="o">::</span><span class="no">Web</span><span class="p">.</span><span class="nf">app</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">post_json</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="n">post</span> <span class="n">path</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="nf">to_json</span><span class="p">,</span> <span class="s2">"CONTENT_TYPE"</span> <span class="o">=&gt;</span> <span class="s2">"application/json"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">parsed_body</span>
    <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">last_response</span><span class="p">.</span><span class="nf">body</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">define_derived_metadata</span><span class="p">(</span><span class="ss">file_path: </span><span class="sr">%r{/spec/requests/}</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">metadata</span><span class="o">|</span>
    <span class="n">metadata</span><span class="p">[</span><span class="ss">:request</span><span class="p">]</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">include</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Test</span><span class="o">::</span><span class="no">Methods</span><span class="p">,</span> <span class="ss">request: </span><span class="kp">true</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">include</span> <span class="no">RequestHelpers</span><span class="p">,</span> <span class="ss">request: </span><span class="kp">true</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We set the <code class="language-plaintext highlighter-rouge">web</code> metadata flag on any tests that will go in <code class="language-plaintext highlighter-rouge">spec/requests</code>. This allows us to specify that the <code class="language-plaintext highlighter-rouge">Rack::Test::Methods</code> and <code class="language-plaintext highlighter-rouge">RequestHelpers</code> modules are included <em>only</em> into tests under that particular directory.</p>

<p>The <code class="language-plaintext highlighter-rouge">Rack::Test::Methods</code> module will include methods that we can use to make requests to our app, like <code class="language-plaintext highlighter-rouge">get</code>, <code class="language-plaintext highlighter-rouge">post</code> and so on.</p>

<p>The <code class="language-plaintext highlighter-rouge">RequestHelpers</code> module defines one method so far, called <code class="language-plaintext highlighter-rouge">app</code>. This <code class="language-plaintext highlighter-rouge">app</code> method is what the <code class="language-plaintext highlighter-rouge">rack-test</code> gem uses to know what application to talk to when we use those <code class="language-plaintext highlighter-rouge">get</code> / <code class="language-plaintext highlighter-rouge">post</code> / etc. methods.</p>

<p>We’ve defined the <code class="language-plaintext highlighter-rouge">app</code> value here to be a small Rack application that compiles a few parts. The first is <code class="language-plaintext highlighter-rouge">Hanami::Middleware::BodyParser</code>. This is a piece of middleware, that will convert our JSON input into parameters that our controller can access. The second part is <code class="language-plaintext highlighter-rouge">Bix::Web::Router</code>, which will be the main Ruby entrypoint for our application. That doesn’t exist right now, but we’ll create it in a moment. We’ll see both of these parts again a little later on again.</p>

<p>The <code class="language-plaintext highlighter-rouge">post_json</code> method in <code class="language-plaintext highlighter-rouge">RequestHelpers</code> will allow us to make a <code class="language-plaintext highlighter-rouge">POST</code> request to our application and to send through JSON data with that request. Remember: the web part of application here is going to take JSON as input during a request, <em>and</em> it will also return JSON in a response. The <code class="language-plaintext highlighter-rouge">parsed_body</code> method will give us a Ruby hash of the response’s body, and we can use this later on to assert the returned data is what we expect.</p>

<p>Before we create our router and all of the other parts, let’s write a couple of simple tests to make sure it will behave as we wish.</p>

<h2 id="writing-our-first-test">Writing our first test</h2>

<p>Currently, our application has a single transaction for creating users. We’re going to use this transaction very soon, using it when a request to <code class="language-plaintext highlighter-rouge">POST /users</code> is made. We’re going to add two tets now. These two tests will ensure that the application behaves correctly for valid and invalid input to <code class="language-plaintext highlighter-rouge">POST /users</code>. Let’s add these new tests to <code class="language-plaintext highlighter-rouge">spec/requests/users_spec.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"web_helper"</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"/users"</span> <span class="k">do</span>
  <span class="n">context</span> <span class="s2">"POST /"</span> <span class="k">do</span>
    <span class="n">context</span> <span class="s2">"with valid input"</span> <span class="k">do</span>
      <span class="n">let</span><span class="p">(</span><span class="ss">:input</span><span class="p">)</span> <span class="k">do</span>
        <span class="p">{</span>
          <span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">,</span>
          <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span>
          <span class="ss">age: </span><span class="mi">32</span><span class="p">,</span>
        <span class="p">}</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">"succeeds"</span> <span class="k">do</span>
        <span class="n">post_json</span> <span class="s2">"/users"</span><span class="p">,</span> <span class="n">input</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">last_response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
        <span class="n">user</span> <span class="o">=</span> <span class="n">parsed_body</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="s2">"id"</span><span class="p">]).</span><span class="nf">not_to</span> <span class="n">be_nil</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="s2">"first_name"</span><span class="p">]).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"Ryan"</span><span class="p">)</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="s2">"last_name"</span><span class="p">]).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"Bigg"</span><span class="p">)</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="s2">"age"</span><span class="p">]).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">context</span> <span class="s2">"with invalid input"</span> <span class="k">do</span>
      <span class="n">let</span><span class="p">(</span><span class="ss">:input</span><span class="p">)</span> <span class="k">do</span>
        <span class="p">{</span>
          <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span>
          <span class="ss">age: </span><span class="mi">32</span><span class="p">,</span>
        <span class="p">}</span>
      <span class="k">end</span>

      <span class="n">it</span> <span class="s2">"returns an error"</span> <span class="k">do</span>
        <span class="n">post_json</span> <span class="s2">"/users"</span><span class="p">,</span> <span class="n">input</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">last_response</span><span class="p">.</span><span class="nf">status</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">422</span><span class="p">)</span>
        <span class="n">user</span> <span class="o">=</span> <span class="n">parsed_body</span>
        <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="s2">"errors"</span><span class="p">][</span><span class="s2">"first_name"</span><span class="p">]).</span><span class="nf">to</span> <span class="kp">include</span><span class="p">(</span><span class="s2">"is missing"</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>These tests should look pretty familiar! They are essentially the same tests for our transaction, just with rack-test methods being the primary difference.</p>

<p>When we attempt to run these tests, we’ll see that we’re missing a part of our application:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  1) /users POST / with valid input succeeds
     Failure/Error: Bix::Web.app

     NoMethodError:
       undefined method `app' for Bix::Web:Module
</code></pre></div></div>

<p>Oh right! We need to setup this Web thing!</p>

<h2 id="building-the-web-component">Building the Web component</h2>

<p>To setup this web part of our application, we’re going to add a new file to <code class="language-plaintext highlighter-rouge">system/boot</code>, called <code class="language-plaintext highlighter-rouge">web.rb</code>. In this file, we’ll need to require all the gems that we’ll be using for the web part of our application:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">boot</span><span class="p">(</span><span class="ss">:web</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="n">init</span> <span class="k">do</span>
    <span class="nb">require</span> <span class="s2">"hanami-router"</span>
    <span class="nb">require</span> <span class="s2">"hanami-controller"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This two lines will require the hanami gems that we’re going to be using here. Where we’ll use these gems is in a couple of files.</p>

<p>The first is a file called <code class="language-plaintext highlighter-rouge">lib/bix/web/application.rb</code>. This is where we’ll define the different Rack pieces for our application:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"hanami/middleware/body_parser"</span>

<span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Web</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">app</span>
      <span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
        <span class="n">use</span> <span class="no">Hanami</span><span class="o">::</span><span class="no">Middleware</span><span class="o">::</span><span class="no">BodyParser</span><span class="p">,</span> <span class="ss">:json</span>
        <span class="n">run</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Web</span><span class="o">::</span><span class="no">Router</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This file is defines the <code class="language-plaintext highlighter-rouge">Bix::Web.app</code> method that our test is looking for! This method returns a <code class="language-plaintext highlighter-rouge">Rack::Builder</code> object, which is to say it returns a <em>Rack application</em>.</p>

<p>This Rack application uses a single piece of middleware: <code class="language-plaintext highlighter-rouge">Hanami::Middleware::BodyParser</code>. This middleware is used to take in any JSON request body, and to transform it into parameters for our actions.</p>

<p>The <code class="language-plaintext highlighter-rouge">run</code> line at the of the builder’s block directs Rack to the application that will be serving our requests. Let’s build this part now in <code class="language-plaintext highlighter-rouge">lib/bix/web/router.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Web</span>
    <span class="no">Router</span> <span class="o">=</span> <span class="no">Hanami</span><span class="o">::</span><span class="no">Router</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span>
      <span class="n">post</span> <span class="s2">"/users"</span><span class="p">,</span> <span class="ss">to: </span><span class="no">Controllers</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">Create</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This file allows us to define routes for the web side of our application. This route defines a <code class="language-plaintext highlighter-rouge">POST /users</code> request to go to <code class="language-plaintext highlighter-rouge">Controllers::Users::Create</code>. What is this mythical constant? It’s going to be the action that serves this request.</p>

<p>In this application, we’re going to put actions inside their own classes. This will keep the code for each action more clearly isolated from other actions.</p>

<p>We’ll define this action inside <code class="language-plaintext highlighter-rouge">lib/bix/web/controllers/users/create.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Web</span>
    <span class="k">module</span> <span class="nn">Controllers</span>
      <span class="k">module</span> <span class="nn">Users</span>
        <span class="k">class</span> <span class="nc">Create</span>
          <span class="kp">include</span> <span class="no">Hanami</span><span class="o">::</span><span class="no">Action</span>

          <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
            <span class="nb">self</span><span class="p">.</span><span class="nf">body</span> <span class="o">=</span> <span class="s2">"{}"</span>
          <span class="k">end</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This action class includes the <code class="language-plaintext highlighter-rouge">Hanami::Action</code> module from the <code class="language-plaintext highlighter-rouge">hanami-controller</code> gem. This gives us access to a number of helpful methods, but the only one of these we’re using now is <code class="language-plaintext highlighter-rouge">self.body=</code>, which we’re using to set the response body to an empty JSON hash. What’s also worth mentioning here is that due to us not specifying a status, this action will return a <code class="language-plaintext highlighter-rouge">200</code> status.</p>

<p>With our router and controller now setup correctly, let’s switch back to looking at our tests.</p>

<h2 id="running-our-tests">Running our tests</h2>

<p>When we run these tests with <code class="language-plaintext highlighter-rouge">bundle exec rspec spec/requests</code> we’ll see they’re both failing:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  1) /users POST / with valid input succeeds
     Failure/Error: expect(user["id"]).not_to be_nil

       expected: not nil
            got: nil
     # ./spec/requests/users_spec.rb:18:in `block (4 levels) in &lt;top (required)&gt;'

  2) /users POST / with invalid input returns an error
    Failure/Error: expect(last_response.status).to eq(422)

      expected: 422
          got: 200

      (compared using ==)
    # ./spec/requests/users_spec.rb:36:in `block (4 levels) in &lt;top (required)&gt;'
</code></pre></div></div>

<p>This is happening because all our action returns is an empty JSON body. Let’s work on changing this.</p>

<p>We’ll change the action to use the transaction class:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Web</span>
    <span class="k">module</span> <span class="nn">Controllers</span>
      <span class="k">module</span> <span class="nn">Users</span>
        <span class="k">class</span> <span class="nc">Create</span>
          <span class="kp">include</span> <span class="no">Hanami</span><span class="o">::</span><span class="no">Action</span>
          <span class="kp">include</span> <span class="no">Import</span><span class="p">[</span><span class="s2">"transactions.users.create_user"</span><span class="p">]</span>
          <span class="kp">include</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="p">[</span><span class="ss">:result</span><span class="p">]</span>

          <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
            <span class="k">case</span> <span class="n">create_user</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">.</span><span class="nf">to_h</span><span class="p">)</span>
            <span class="k">in</span> <span class="no">Success</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
              <span class="nb">self</span><span class="p">.</span><span class="nf">body</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="nf">to_h</span><span class="p">.</span><span class="nf">to_json</span>
              <span class="nb">self</span><span class="p">.</span><span class="nf">status</span> <span class="o">=</span> <span class="mi">200</span>
            <span class="k">in</span> <span class="no">Failure</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
              <span class="nb">self</span><span class="p">.</span><span class="nf">body</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">errors: </span><span class="n">result</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">to_h</span> <span class="p">}.</span><span class="nf">to_json</span>
              <span class="nb">self</span><span class="p">.</span><span class="nf">status</span> <span class="o">=</span> <span class="mi">422</span>
            <span class="k">end</span>
          <span class="k">end</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>At the top of this controller action, we import the <code class="language-plaintext highlighter-rouge">create_user</code> transaction by using the <code class="language-plaintext highlighter-rouge">Import</code> constant that we made a few parts ago – this is from <code class="language-plaintext highlighter-rouge">dry-auto_inject</code>.</p>

<p>Then we include <code class="language-plaintext highlighter-rouge">Dry::Moands[:result]</code> – this gives us access to the <code class="language-plaintext highlighter-rouge">Success</code> and <code class="language-plaintext highlighter-rouge">Failure</code> methods we use inside the action.</p>

<p>Inside the action itself, we call the transaction and then use Ruby 2.7’s new pattern matching to decide what to do. In the case of a successful transaction, we return the body of the result. If it fails, we return the errors and set the status to 422.</p>

<p>This should be exactly what our test is expecting. Let’s run them again and find out:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2 examples, 0 failures
</code></pre></div></div>

<p>Good! Our tests for our router are now passing. But this only means that our router is working, not that we can serve HTTP requests yet! We need one final piece for that to work.</p>

<h2 id="racking-up-the-server">Racking up the server</h2>

<p>To run our HTTP server, we’ll use a gem called <code class="language-plaintext highlighter-rouge">puma</code>. Let’s add that gem to the <code class="language-plaintext highlighter-rouge">Gemfile</code> now:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem "puma"
</code></pre></div></div>

<p>And we’ll run <code class="language-plaintext highlighter-rouge">bundle install</code> to install it.</p>

<p>To run the Puma server, we can use the command by the same name:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>puma
</code></pre></div></div>

<p>When we do this, we get an error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Puma starting in single mode...
* Version 3.12.1 (ruby 2.7.0-p0), codename: Llamas in Pajamas
* Min threads: 0, max threads: 16
* Environment: development
ERROR: No application configured, nothing to run
</code></pre></div></div>

<p>This is because Puma hasn’t been told what to run yet. The good thing for us is that Puma will look for a special file to know what to run. That file is called <code class="language-plaintext highlighter-rouge">config.ru</code>. Let’s create that file now:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"config/application"</span>

<span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">finalize!</span>

<span class="n">run</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Web</span><span class="p">.</span><span class="nf">app</span>
</code></pre></div></div>

<p>This file looks a lot like <code class="language-plaintext highlighter-rouge">bin/console</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env ruby</span>

<span class="nb">require_relative</span> <span class="s1">'../config/application'</span>

<span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">finalize!</span>

<span class="nb">require</span> <span class="s1">'irb'</span>
<span class="no">IRB</span><span class="p">.</span><span class="nf">start</span>
</code></pre></div></div>

<p>The difference is that we’re starting a server, instead of starting a console session.</p>

<p>Let’s try <code class="language-plaintext highlighter-rouge">puma</code> again:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Puma starting in single mode...
* Version 3.12.1 (ruby 2.7.0-p0), codename: Llamas in Pajamas
* Min threads: 0, max threads: 16
* Environment: development
* Listening on tcp://0.0.0.0:9292
</code></pre></div></div>

<p>Great! We now have a HTTP server listening on port 9292.</p>

<p>To test this out, we can do one of two things. If you have the marvellous <a href="http://httpie.org">httpie</a> installed, you can run this command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http --json post http://localhost:9292/users first_name=Ryan last_name=Bigg
</code></pre></div></div>

<p>Otherwise, if you’re using <code class="language-plaintext highlighter-rouge">curl</code>, it’s a little more verbose:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl --request 'POST' \
-i \
--header 'Content-Type: application/json' \
--data '{"first_name":"Ryan"}' \
'http://localhost:9292/users'
</code></pre></div></div>

<p>(Use HTTPie!)</p>

<p>Either way, what we’ll see returned here is a validation error message indicating that our input was not quite complete:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 422 Unprocessable Entity
Content-Length: 39
Content-Type: application/json; charset=utf-8

{
    "errors": {
        "last_name": [
            "is missing"
        ]
    }
}
</code></pre></div></div>

<p>Note here that the HTTP status is 422 as well.</p>

<p>Great, so that means the <em>failure</em> case for our action is now working as we wished it would.</p>

<p>Let’s see if we can test out the success case too with this <code class="language-plaintext highlighter-rouge">http</code> call:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http --json post http://localhost:9292/users first_name=Ryan last_name=Bigg
</code></pre></div></div>

<p>Or this <code class="language-plaintext highlighter-rouge">curl</code> one:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl --request 'POST' \
-i \
--header 'Content-Type: application/json' \
--data '{"first_name":"Ryan", "last_name": "Bigg"}' \
'http://localhost:9292/users'
</code></pre></div></div>

<p>Now we will see a successful response:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
Content-Length: 140
Content-Type: application/json; charset=utf-8

{
    "age": null,
    "created_at": "[timestamp]",
    "first_name": "Ryan",
    "id": 6,
    "last_name": "Bigg",
     "updated_at": "[timestamp]"
}

</code></pre></div></div>

<p>And that’s all now working!</p>

<h2 id="summary">Summary</h2>

<p>In this fourth and final part of the ROM and Dry showcase, we barely looked at either Rom or Dry! Instead, we looked at some pieces of the Hanami web framework.</p>

<p>The Hanami web framework is a great alternative to the Rails framework that <a href="https://ryanbigg.com/2018/03/my-thoughts-on-hanami">I’ve loved for a few years</a>. What’s been great about Hanami in this series is that we were able to opt-in to using Hanami’s <code class="language-plaintext highlighter-rouge">hanami-router</code> and <code class="language-plaintext highlighter-rouge">hanami-controller</code> gems without having to opt-in to absolutely everything else from Hanami too.</p>

<p>These gems, along with the <code class="language-plaintext highlighter-rouge">puma</code> and <code class="language-plaintext highlighter-rouge">rack</code> gems, have allowed us to build a HTTP interface to our application. Our application is now capable of receiving and responding to HTTP requests.</p>

<p>I hope that this series has given you a great demonstration of what the rom-rb, dry-rb and Hanami gems are capable of. I strongly believe that these are viable, new-age alternatives to Rails for building modern Ruby applications.</p>

<p>I hope you continue to explore what these gems can offer and how you can approach building better, easier to maintain applications with them.</p>
]]></content>
 </entry>
 
 <entry>
   <title>ROM + Dry Showcase: Part 3 - Testing</title>
   <link href="http://ryanbigg.com/2020/02/rom-and-dry-showcase-part-3"/>
   <updated>2020-02-03T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2020/02/rom-and-dry-showcase-part-3</id>
   <content type="html"><![CDATA[<p>This is the 3rd part of a 4 part series covering the <a href="https://rom-rb.org/">rom-rb</a> and <a href="https://dry-rb.org/">dry-rb</a> suites of gems.</p>

<ul>
  <li>Part 1: <a href="/2020/02/rom-and-dry-showcase-part-1">Application + Database setup</a></li>
  <li>Part 2: <a href="/2020/02/rom-and-dry-showcase-part-2">Validations + Transactions</a></li>
</ul>

<p>In this 3rd part, we’re going to look at how we can test the application that we’ve built so far. In particular, we’ll test three classes:</p>

<ul>
  <li>The contract – to ensure it validates input correctly</li>
  <li>The repository – to ensure we can insert data into our database correctly and that we could find data once it is inserted</li>
  <li>The transaction – to ensure that we can process the whole transaction correctly</li>
</ul>

<p>When we get up to the transaction part, we’ll see how we can use one more feature of <code class="language-plaintext highlighter-rouge">dry-auto_inject</code> to stub out the repository dependency in this particular test. Why would we want to stub out this dependency? Because we already have tests that make sure that our repository works! We don’t need to test it again a second time in the transaction class.</p>

<p>Let’s get started!</p>

<h2 id="adding-rspec">Adding RSpec</h2>

<p>First things first! We will need to set up the RSpec testing framework, and a gem called <code class="language-plaintext highlighter-rouge">database_cleaner-sequel</code>. The database cleaner gem will ensure that our database is kept pristine across the different tests in our application. If we have data “leaking” across tests, that data may influence the outcome of other tests.</p>

<p>Let’s add these gems to our <code class="language-plaintext highlighter-rouge">Gemfile</code> now:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'rspec'</span>
  <span class="n">gem</span> <span class="s1">'database_cleaner-sequel'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We’ve put these gems in a “test” group, as we will not want them installed when we deploy to production.</p>

<p>Then we’ll install these gems locally with <code class="language-plaintext highlighter-rouge">bundle install</code>.</p>

<p>Next up, we can initialize RSpec by running:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec rspec --init
</code></pre></div></div>

<p>This will create us a <code class="language-plaintext highlighter-rouge">spec</code> directory with a file called <code class="language-plaintext highlighter-rouge">spec_helper.rb</code> in it. Here’s that file with the comments removed <em>and</em> with the database cleaner configuration added:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">expect_with</span> <span class="ss">:rspec</span> <span class="k">do</span> <span class="o">|</span><span class="n">expectations</span><span class="o">|</span>
    <span class="n">expectations</span><span class="p">.</span><span class="nf">include_chain_clauses_in_custom_matcher_descriptions</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">mock_with</span> <span class="ss">:rspec</span> <span class="k">do</span> <span class="o">|</span><span class="n">mocks</span><span class="o">|</span>
    <span class="n">mocks</span><span class="p">.</span><span class="nf">verify_partial_doubles</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">shared_context_metadata_behavior</span> <span class="o">=</span> <span class="ss">:apply_to_host_groups</span>

  <span class="n">config</span><span class="p">.</span><span class="nf">before</span> <span class="k">do</span>
    <span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">clean</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">require_relative</span> <span class="s1">'../config/application'</span>
<span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">finalize!</span>

<span class="nb">require</span> <span class="s1">'database_cleaner/sequel'</span>
<span class="no">DatabaseCleaner</span><span class="p">.</span><span class="nf">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span>
</code></pre></div></div>

<p>At the bottom of this file, I’ve also added two lines to require <code class="language-plaintext highlighter-rouge">config/application.rb</code> and to finalize our application. This will ensure that by
the time the tests run everything for our application has been loaded.</p>

<p>At the bottom of the <code class="language-plaintext highlighter-rouge">configure</code> block, we clean the database to ensure that each and every test starts out with a completely empty database. How that database gets cleaned is defined by the final two lines in this file: it’s a <code class="language-plaintext highlighter-rouge">truncation</code> strategy meaning that each table in our database will be truncated before the test runs.</p>

<p>That’s all the setup that we’ll need to do here. Let’s write our first couple of tests for the contract.</p>

<h2 id="testing-the-contract">Testing the contract</h2>

<p>When we go to test a contract, we want to be sure that both the valid <em>and</em> invalid paths are covered effectively. Let’s start off with the invalid paths first and we’ll finish with the valid one. We’ll create a new file in <code class="language-plaintext highlighter-rouge">spec/contracts/users/create_user_spec.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Contracts</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span> <span class="k">do</span>
  <span class="n">context</span> <span class="s2">"requires first_name"</span> <span class="k">do</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:input</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span>
        <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span>
        <span class="ss">age: </span><span class="mi">32</span>
      <span class="p">}</span>
    <span class="k">end</span>

    <span class="n">let</span><span class="p">(</span><span class="ss">:result</span><span class="p">)</span> <span class="p">{</span> <span class="n">subject</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">input</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">it</span> <span class="s2">"is invalid"</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_failure</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">errors</span><span class="p">[</span><span class="ss">:first_name</span><span class="p">]).</span><span class="nf">to</span> <span class="kp">include</span><span class="p">(</span><span class="s2">"is missing"</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="s2">"requires last_name"</span> <span class="k">do</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:input</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span>
        <span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">,</span>
        <span class="ss">age: </span><span class="mi">32</span>
      <span class="p">}</span>
    <span class="k">end</span>

    <span class="n">let</span><span class="p">(</span><span class="ss">:result</span><span class="p">)</span> <span class="p">{</span> <span class="n">subject</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">input</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">it</span> <span class="s2">"is invalid"</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_failure</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">errors</span><span class="p">[</span><span class="ss">:last_name</span><span class="p">]).</span><span class="nf">to</span> <span class="kp">include</span><span class="p">(</span><span class="s2">"is missing"</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In both of these tests, we’re setting up some invalid input for the contract. And also in both of these tests, we’re asserting that the contract shows us an error indicating either the <code class="language-plaintext highlighter-rouge">first_name</code> or <code class="language-plaintext highlighter-rouge">last_name</code> fields are missing.</p>

<p>We can run this test with <code class="language-plaintext highlighter-rouge">bundle exec rspec</code>. When we do this, we’ll see that the contract is working as intended:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2 examples, 0 failures
</code></pre></div></div>

<p>This is good to see, and will now provide us with a safety net. If someone was to delete one of the lines from the contract <em>perhaps accidentally</em>, then our tests would catch that.</p>

<p>Let’s add another test for the happy path, the path of successful validation, to this file too:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Contracts</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span> <span class="k">do</span>
  <span class="n">context</span> <span class="s2">"given valid parameters"</span> <span class="k">do</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:input</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span>
        <span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">,</span>
        <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span>
        <span class="ss">age: </span><span class="mi">32</span>
      <span class="p">}</span>
    <span class="k">end</span>

    <span class="n">let</span><span class="p">(</span><span class="ss">:result</span><span class="p">)</span> <span class="p">{</span> <span class="n">subject</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">input</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">it</span> <span class="s2">"is valid"</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_success</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="o">...</span>
</code></pre></div></div>

<p>In this test, we provide all the correct values for the input and therefore our contract should be successful. Let’s run the tests again and see:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3 examples, 0 failures
</code></pre></div></div>

<p>Great!</p>

<p>We’re able to test our contract just like a standard Ruby class. We initialize the contract, and then depending on the input it is given, the contract with either succeed or fail.</p>

<h2 id="testing-the-repository">Testing the repository</h2>

<p>To test the repository, we can take the same kind of path. For this repository’s tests, we need to assert that the <code class="language-plaintext highlighter-rouge">create</code> method for <code class="language-plaintext highlighter-rouge">Bix::Repos::UserRepo</code> does a few things. What things? Well, let’s look at our code for the repository:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Repos</span>
    <span class="k">class</span> <span class="nc">UserRepo</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Repository</span><span class="p">[</span><span class="ss">:users</span><span class="p">]</span>
      <span class="kp">include</span> <span class="no">Import</span><span class="p">[</span><span class="s2">"container"</span><span class="p">]</span>

      <span class="n">struct_namespace</span> <span class="no">Bix</span>

      <span class="n">commands</span> <span class="ss">:create</span><span class="p">,</span>
        <span class="ss">use: :timestamps</span><span class="p">,</span>
        <span class="ss">plugins_options: </span><span class="p">{</span>
          <span class="ss">timestamps: </span><span class="p">{</span>
            <span class="ss">timestamps: </span><span class="sx">%i(created_at updated_at)</span>
          <span class="p">}</span>
        <span class="p">}</span>

      <span class="k">def</span> <span class="nf">all</span>
        <span class="n">users</span><span class="p">.</span><span class="nf">to_a</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The repository has a <code class="language-plaintext highlighter-rouge">create</code> method and with this method we need to make sure:</p>

<ul>
  <li>The method returns a <code class="language-plaintext highlighter-rouge">Bix::User</code> object – because <code class="language-plaintext highlighter-rouge">struct_namespace</code> has configured the repository to use the <code class="language-plaintext highlighter-rouge">Bix</code> namespace for all structs.</li>
  <li>That the <code class="language-plaintext highlighter-rouge">Bix::User</code> object returned has an <code class="language-plaintext highlighter-rouge">id</code> attribute – this ID is automatically set by the database</li>
  <li>That both <code class="language-plaintext highlighter-rouge">created_at</code> and <code class="language-plaintext highlighter-rouge">updated_at</code> are set automatically – based on how we’ve configured the command at the top of the repository.</li>
</ul>

<p>The repository also has an <code class="language-plaintext highlighter-rouge">all</code> method, and just to be thorough we can add a simple test for this method to assert that <code class="language-plaintext highlighter-rouge">Bix::User</code> objects are returned.</p>

<p>Let’s add the tests for the <code class="language-plaintext highlighter-rouge">create</code> method first. We’ll create a new file at <code class="language-plaintext highlighter-rouge">spec/repos/user_repo_spec.rb</code> for these tests:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"spec_helper"</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Repos</span><span class="o">::</span><span class="no">UserRepo</span> <span class="k">do</span>
  <span class="n">context</span> <span class="s2">"#create"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">"creates a user"</span> <span class="k">do</span>
      <span class="n">user</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">,</span>
        <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span>
        <span class="ss">age: </span><span class="mi">32</span><span class="p">,</span>
      <span class="p">)</span>

      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">Bix</span><span class="o">::</span><span class="no">User</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="nf">id</span><span class="p">).</span><span class="nf">not_to</span> <span class="n">be_nil</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="nf">first_name</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"Ryan"</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="nf">last_name</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"Bigg"</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="nf">created_at</span><span class="p">).</span><span class="nf">not_to</span> <span class="n">be_nil</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="nf">updated_at</span><span class="p">).</span><span class="nf">not_to</span> <span class="n">be_nil</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This test asserts that when we call <code class="language-plaintext highlighter-rouge">create</code> on our repository that it will return a <code class="language-plaintext highlighter-rouge">Bix::User</code> object and that the object has values for <code class="language-plaintext highlighter-rouge">id</code>, <code class="language-plaintext highlighter-rouge">first_name</code>, <code class="language-plaintext highlighter-rouge">last_name</code>, <code class="language-plaintext highlighter-rouge">created_at</code> and <code class="language-plaintext highlighter-rouge">updated_at</code>.</p>

<p>If we run this test with <code class="language-plaintext highlighter-rouge">bundle exec rspec</code>, we’ll see that it passes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4 examples, 0 failures
</code></pre></div></div>

<p>Good! We’ve now asserted that at least the <code class="language-plaintext highlighter-rouge">struct_namespace</code> and <code class="language-plaintext highlighter-rouge">commands</code> methods from our repository are working as they should. If a mistake was to be made, like accidentally removing the <code class="language-plaintext highlighter-rouge">struct_namespace</code> method from the repository, our test would break:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  1) Bix::Repos::UserRepo#create creates a user
     Failure/Error: expect(user).to be_a(Bix::User)
       expected #&lt;ROM::Struct::User ...&gt; to be a kind of Bix::User
</code></pre></div></div>

<p>The issue with this repository returning a <code class="language-plaintext highlighter-rouge">ROM::Struct::User</code> object instead of a <code class="language-plaintext highlighter-rouge">Bix::User</code> object is that the <code class="language-plaintext highlighter-rouge">ROM::Struct::User</code> objects will not have access to any of <code class="language-plaintext highlighter-rouge">Bix::User</code>’s methods, like <code class="language-plaintext highlighter-rouge">full_name</code>. If we had this mistake in our application, and we tried using <code class="language-plaintext highlighter-rouge">User#full_name</code> then our application would break. This demonstrates why it’s important to have tested that <code class="language-plaintext highlighter-rouge">struct_namespace</code> is working.</p>

<p>Let’s add another quick test to our repository to test <code class="language-plaintext highlighter-rouge">all</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">context</span> <span class="s2">"#all"</span> <span class="k">do</span>
  <span class="n">before</span> <span class="k">do</span>
    <span class="n">subject</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">,</span> <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span> <span class="ss">age: </span><span class="mi">32</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">"returns all users"</span> <span class="k">do</span>
    <span class="n">users</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="nf">all</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">users</span><span class="p">.</span><span class="nf">count</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">users</span><span class="p">.</span><span class="nf">first</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">Bix</span><span class="o">::</span><span class="no">User</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This test uses <code class="language-plaintext highlighter-rouge">create</code> to setup a user in our database, and then asserts that when we call <code class="language-plaintext highlighter-rouge">all</code> we get a user back.</p>

<p>If we run this test, we’ll see that it’s already working:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5 examples, 0 failures
</code></pre></div></div>

<p>This means that our <code class="language-plaintext highlighter-rouge">all</code> method now has some test coverage. If this method was to break <em>somehow</em>, then our test would indicate that the method was faulty and then we wwould know to fix it.</p>

<h2 id="testing-the-transaction">Testing the transaction</h2>

<p>So far, our testing of contracts and repositories has been very straightforward Ruby class tests. We have relied on <code class="language-plaintext highlighter-rouge">subject</code> from RSpec which is a method that behaves like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def subject
  &lt;described class&gt;.new
end
</code></pre></div></div>

<p>Now we’re going to look at how to test a transaction, and here’s where things are going to get more interesting. Rather than relying on RSpec’s own <code class="language-plaintext highlighter-rouge">subject</code>, we’re going to define our own. And when we define our own, we’re going to use a feature of <code class="language-plaintext highlighter-rouge">dry_auto-inject</code>, called <em>dependency injection</em>. This feature will allow us to inject a stubbed repository into our transaction, so that we don’t have to hit the database for our transaction’s test.</p>

<p>Not hitting the database means that we will save time on this test: there’s no need to make a request to a system outside of our Ruby code, and that’ll also mean that <code class="language-plaintext highlighter-rouge">database_cleaner</code> will not need to clean anything from the database. Ultimately, by injecting the repository dependency into our application’s transactions when we’re testing them means that we can have fast transcation tests.</p>

<p>Let’s look at how to do this by creating a new file at <code class="language-plaintext highlighter-rouge">spec/transactions/users/create_user_spec.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Transactions</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:user_repo</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span><span class="p">(</span><span class="s2">"UserRepo"</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">Bix</span><span class="o">::</span><span class="no">User</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">subject</span> <span class="p">{</span> <span class="n">described_class</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">user_repo: </span><span class="n">user_repo</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">context</span> <span class="s2">"with valid input"</span> <span class="k">do</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:input</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span>
        <span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">,</span>
        <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span>
        <span class="ss">age: </span><span class="mi">32</span><span class="p">,</span>
      <span class="p">}</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">"creates a user"</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">user_repo</span><span class="p">).</span><span class="nf">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="p">{</span> <span class="n">user</span> <span class="p">}</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_success</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">success</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In this test, we define our own <code class="language-plaintext highlighter-rouge">subject</code> block, which will override RSpec’s default. We inject the <code class="language-plaintext highlighter-rouge">user_repo</code> dependency into the transaction object by passing a <code class="language-plaintext highlighter-rouge">user_repo</code> key in the <code class="language-plaintext highlighter-rouge">new</code> method. This works because <code class="language-plaintext highlighter-rouge">dry-auto_inject</code> re-defines <code class="language-plaintext highlighter-rouge">initialize</code> for classes when we use this syntax:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kp">include</span> <span class="no">Import</span><span class="p">[</span>
  <span class="s2">"contracts.users.create_user"</span><span class="p">,</span>
  <span class="s2">"repos.user_repo"</span>
<span class="p">]</span>
</code></pre></div></div>

<p>By default, <code class="language-plaintext highlighter-rouge">dry-auto_inject</code> will load the contract class <code class="language-plaintext highlighter-rouge">Bix::Contracts::Users::CreateUser</code>, as well as the repo class <code class="language-plaintext highlighter-rouge">Bix::Repos::UserRepo</code> and provide them to the class through the <code class="language-plaintext highlighter-rouge">create_user</code> and <code class="language-plaintext highlighter-rouge">user_repo</code> methods automatically. The keys that we provide to <code class="language-plaintext highlighter-rouge">Import[]</code> here match the keys that are automatically defined by <code class="language-plaintext highlighter-rouge">dry-system</code> when it automatically registers the components for our application.</p>

<p>If we want to swap in something else for either the contract or the repository, we can do that by passing in a key matching the name (either <code class="language-plaintext highlighter-rouge">create_user</code> or <code class="language-plaintext highlighter-rouge">user_repo</code>) when we initialize this class. Just like we do in our test!</p>

<p>If we wanted to do this ourselves, without any sort of dry gem magic, it would look like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">attr_reader</span> <span class="ss">:user_repo</span><span class="p">,</span> <span class="ss">:create_user</span>

<span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span>
  <span class="ss">user_repo: </span><span class="no">Bix</span><span class="o">::</span><span class="no">Repos</span><span class="o">::</span><span class="no">UserRepo</span><span class="p">.</span><span class="nf">new</span><span class="p">,</span>
  <span class="ss">create_user: </span><span class="no">Bix</span><span class="o">::</span><span class="no">Contracts</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span><span class="p">.</span><span class="nf">new</span>
<span class="p">)</span>
  <span class="vi">@user_repo</span> <span class="o">=</span> <span class="n">user_repo</span>
  <span class="vi">@create_user</span> <span class="o">=</span> <span class="n">create_user</span>
<span class="k">end</span>
</code></pre></div></div>

<p>As we can see, by using <code class="language-plaintext highlighter-rouge">dry-auto_inject</code> along with <code class="language-plaintext highlighter-rouge">dry-system</code> we get to save a lot of typing.</p>

<p>Let’s look at that test again:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Transactions</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:user_repo</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span><span class="p">(</span><span class="no">Bix</span><span class="o">::</span><span class="no">Repos</span><span class="o">::</span><span class="no">UserRepo</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">Bix</span><span class="o">::</span><span class="no">User</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">id: </span><span class="mi">1</span><span class="p">,</span> <span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">subject</span> <span class="p">{</span> <span class="n">described_class</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">user_repo: </span><span class="n">user_repo</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">context</span> <span class="s2">"with valid input"</span> <span class="k">do</span>
    <span class="n">let</span><span class="p">(</span><span class="ss">:input</span><span class="p">)</span> <span class="k">do</span>
      <span class="p">{</span>
        <span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">,</span>
        <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span>
        <span class="ss">age: </span><span class="mi">32</span><span class="p">,</span>
      <span class="p">}</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">"creates a user"</span> <span class="k">do</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">user_repo</span><span class="p">).</span><span class="nf">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="p">{</span> <span class="n">user</span> <span class="p">}</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_success</span>
      <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">success</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The test asserts that when we use <code class="language-plaintext highlighter-rouge">subject.call</code> that the repository receives the <code class="language-plaintext highlighter-rouge">create</code> method once. We’ve stubbed this method to return a <code class="language-plaintext highlighter-rouge">Bix::User</code> object, and that’s what we’ll see when we call <code class="language-plaintext highlighter-rouge">result.success</code> at the end of the test.</p>

<p>Let’s run this test and we’ll see how it goes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6 examples, 0 failures
</code></pre></div></div>

<p>Success! We’re able to test our transaction without it hitting the database at all. This means that our transaction test is isolated from the database, leading to it being quick. While we only have one transaction test <em>now</em>, as this application grows and we add further transaction tests this quickness will quickly pile-up to a big benefit.</p>

<p>There’s also another benefit of this isolation: if we had database constraints then we would have to cater for those in this test.  Imagine for instance that when we created users that they had to be associated with a “Group” and that Groups had to be associated with an “Account”. In a normal application to test such a thing, we would need to create three separate objects our database: an account, a group, and a user.</p>

<p>For one test, it won’t matter too much. But if accounts, groups and users are the <em>core</em> of our application, it would quickly stack up to lots of database calls. By stubbing out the user repository dependency while testing this transaction, we have isolated that test from any database concern. A better place to test that sort of database concern would be in the repository test, anyway.</p>

<p>To finish up, let’s add one more test for what happens when this transaction fails due to invalid input:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">context</span> <span class="s2">"with invalid input"</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:input</span><span class="p">)</span> <span class="k">do</span>
    <span class="p">{</span>
      <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span>
      <span class="ss">age: </span><span class="mi">32</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s2">"does not create a user"</span> <span class="k">do</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">user_repo</span><span class="p">).</span><span class="nf">not_to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">subject</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_failure</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">failure</span><span class="p">.</span><span class="nf">errors</span><span class="p">[</span><span class="ss">:first_name</span><span class="p">]).</span><span class="nf">to</span> <span class="kp">include</span><span class="p">(</span><span class="s2">"is missing"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">input</code> is missing a <code class="language-plaintext highlighter-rouge">first_name</code> key, and so our transaction should fail. This means that the <code class="language-plaintext highlighter-rouge">user_repo</code> should <em>never</em> receive a <code class="language-plaintext highlighter-rouge">create</code> method, because our transaction will only call that if the <code class="language-plaintext highlighter-rouge">validate</code> step passes. When the validation fails, we would expect the result from this transaction to be a failure, and that failure to contain errors indicating what went wrong.</p>

<p>When we run this test with <code class="language-plaintext highlighter-rouge">bundle exec rspec</code>, we’ll see it pass:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7 examples, 0 failures
</code></pre></div></div>

<h2 id="summary">Summary</h2>

<p>In this 3rd part of the ROM and Dry showcase, we’ve seen how easy it is to add tests to our application to ensure that the individual parts of the application are working.</p>

<p>We saw that in order to test a contract and a repository, we can initialize either class and call the methods we want to test. There’s nothing particularly special that we’ve had to do to test these classes; we treat them like the plain Ruby classes they are.</p>

<p>When testing the transaction, we’ve chosen to isolate those tests from the database by injecting a stubbed <code class="language-plaintext highlighter-rouge">UserRepo</code> object in place of the real thing. This isolation will mean that our tests will not have to concern themselves with setting up database state – for instance, if we had foreign key constraints – and over time it will mean that our transaction tests will be lightning fast.</p>

<p>In the next part of this series, we’ll add the final piece of our application to our stack: a way to make HTTP requests. And we’ll <em>definitely</em> be adding tests for this too!</p>
]]></content>
 </entry>
 
 <entry>
   <title>ROM + Dry Showcase: Part 2 - Validations &amp; Transactions</title>
   <link href="http://ryanbigg.com/2020/02/rom-and-dry-showcase-part-2"/>
   <updated>2020-02-02T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2020/02/rom-and-dry-showcase-part-2</id>
   <content type="html"><![CDATA[<p>This is the 2nd part of a 4 part series covering the <a href="https://rom-rb.org/">rom-rb</a> and <a href="https://dry-rb.org/">dry-rb</a> suites of gems.</p>

<ul>
  <li>Part 1: <a href="/2020/02/rom-and-dry-showcase-part-1">Application + Database setup</a></li>
</ul>

<p>In this part, we’re going to look at how to add data validation to our application. Our application currently has a way of creating users, but there’s nothing preventing those users being created without their <code class="language-plaintext highlighter-rouge">first_name</code> or <code class="language-plaintext highlighter-rouge">last_name</code> set. In this part, we’ll add some code to validate that both of these fields are set. We’re going to add this code by using a gem called <code class="language-plaintext highlighter-rouge">dry-validation</code>.</p>

<p>When we’ve added this code, it’s going to sit apart from the repositories and relations that we’ve built already, and we will need a way of connecting these pieces. The way that we will connect these pieces is through the <code class="language-plaintext highlighter-rouge">dry-monads</code> gem.</p>

<p>When we’re done here, we’ll have a class that encapsulates all the actions of creating a user:</p>

<ol>
  <li>Validates <code class="language-plaintext highlighter-rouge">first_name</code> and <code class="language-plaintext highlighter-rouge">last_name</code> are present</li>
  <li>If they aren’t present, returns an error.</li>
  <li>If they are present, the user data is persisted to the database</li>
</ol>

<p>We’ll call this class a <em>transaction</em>, as it will contain all the logic for performing a particular <em>transaction</em> with our system; the transaction of creating a new user.</p>

<p>If you’d like to see the code for this application, it’s at <a href="https://github.com/radar/bix">github.com/radar/bix</a>, and each part of this series has its own branch.</p>

<p>Let’s begin!</p>

<h2 id="adding-validations">Adding validations</h2>

<p>Validations are a key part of any application. We need to make sure that before data is stored in our database that it is valid. In our currently very small application, we so far have just one type of data: users. Still, in this tiny application it doesn’t really make much sense to create users that don’t have a name. In this section we’re going to add a class that will validate a particular input for user data is valid.</p>

<p>To start with, we’ll need to add the <code class="language-plaintext highlighter-rouge">dry-validation</code> gem to our <code class="language-plaintext highlighter-rouge">Gemfile</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'dry-validation'</span><span class="p">,</span> <span class="s1">'~&gt; 1.4'</span>
</code></pre></div></div>

<p>Next up, we’ll need to install the gem:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">install</span>
</code></pre></div></div>

<p>We’ll need to require this gem somewhere too, so that it is loaded in our application. To load this gem and other gems that we’ll add in the future, we’ll create a new file at <code class="language-plaintext highlighter-rouge">system/boot/core.rb</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">boot</span><span class="p">(</span><span class="ss">:core</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">init</span> <span class="k">do</span>
    <span class="nb">require</span> <span class="s2">"dry-validation"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This new file will include any sort of setup logic that we will need for the <em>core</em> part of our application. This is going to be everything that we’ll need when running the plain Ruby code for our application. We have a <code class="language-plaintext highlighter-rouge">db.rb</code> and <code class="language-plaintext highlighter-rouge">persistence.rb</code> file in this same directory that contains logic for anything we want to do with a database. n the last part of this guide, we’ll add a fourth file in this directory called <code class="language-plaintext highlighter-rouge">web.rb</code> and that file will contain setup logic for anything to do with handling web requests.</p>

<p>The <code class="language-plaintext highlighter-rouge">dry-validation</code> gem allows us to create classes to encapsulate validation logic, and this gem uses another dry-rb gem under the hood called <a href="https://dry-rb.org/gems/dry-schema/1.4"><code class="language-plaintext highlighter-rouge">dry-schema</code></a></p>

<p>These classes are called <em>contracts</em>. We’ll create our first contract at <code class="language-plaintext highlighter-rouge">lib/bix/contracts/users/create_user.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Contracts</span>
    <span class="k">module</span> <span class="nn">Users</span>
      <span class="k">class</span> <span class="nc">CreateUser</span> <span class="o">&lt;</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Validation</span><span class="o">::</span><span class="no">Contract</span>
        <span class="n">params</span> <span class="k">do</span>
          <span class="n">required</span><span class="p">(</span><span class="ss">:first_name</span><span class="p">).</span><span class="nf">filled</span><span class="p">(</span><span class="ss">:string</span><span class="p">)</span>
          <span class="n">required</span><span class="p">(</span><span class="ss">:last_name</span><span class="p">).</span><span class="nf">filled</span><span class="p">(</span><span class="ss">:string</span><span class="p">)</span>
          <span class="n">optional</span><span class="p">(</span><span class="ss">:age</span><span class="p">).</span><span class="nf">filled</span><span class="p">(</span><span class="ss">:integer</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This class defines a contract that says that when we’re creating users, there has to be at least two parameters – <code class="language-plaintext highlighter-rouge">first_name</code> and <code class="language-plaintext highlighter-rouge">last_name</code>, and they both have to be <code class="language-plaintext highlighter-rouge">filled</code> (present) strings. This contract also says that an <code class="language-plaintext highlighter-rouge">age</code> parameter is optional, but when it’s specified it’s an integer. Let’s try using this contract now in <code class="language-plaintext highlighter-rouge">bin/console</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create_user</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Contracts</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span><span class="p">.</span><span class="nf">new</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">create_user</span><span class="p">.</span><span class="nf">call</span><span class="p">({})</span>
</code></pre></div></div>

<p>To use this contract, we need to initialize a new object from the class and then use the <code class="language-plaintext highlighter-rouge">call</code> method on that new object. The argument that we pass it are the parameters for the contract, which in this case is just an empty Hash.</p>

<p>When we call this contract, we see the validation errors returned:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>=&gt; #&lt;Dry::Validation::Result{} errors={:first_name=&gt;["is missing"], :last_name=&gt;["is missing"]}&gt;
</code></pre></div></div>

<p>The returned object is a <code class="language-plaintext highlighter-rouge">Result</code> object, and with that result object we can determine if the validation was successful by calling the <code class="language-plaintext highlighter-rouge">success?</code> method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span><span class="p">.</span><span class="nf">success?</span>
<span class="c1"># =&gt; false</span>
</code></pre></div></div>

<p>If we wanted to display these error messages (for example, as feedback to a user) we could call:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">to_h</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:first_name</span><span class="o">=&gt;</span><span class="p">[</span><span class="s2">"is missing"</span><span class="p">],</span> <span class="ss">:last_name</span><span class="o">=&gt;</span><span class="p">[</span><span class="s2">"is missing"</span><span class="p">]}</span>
</code></pre></div></div>

<p>Let’s look at what happens when we pass valid data, but with a twist: all of our values are strings. This is the kind of data you would get from a form submission through a web application:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create_user</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Contracts</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span><span class="p">.</span><span class="nf">new</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">create_user</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">,</span> <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span> <span class="ss">age: </span><span class="s2">"32"</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Dry::Validation::Result{:first_name=&gt;"Ryan", :last_name=&gt;"Bigg", :age=&gt;32} errors={}&gt;</span>
<span class="n">result</span><span class="p">.</span><span class="nf">success?</span>
<span class="c1"># =&gt; true</span>
</code></pre></div></div>

<p>Great, our contract is correctly validating input! What’s interesting to note here is that the <code class="language-plaintext highlighter-rouge">age</code> parameter is being correctly typecast from a String to an Integer. This is because we have defined that field to be an <code class="language-plaintext highlighter-rouge">integer</code> in our contract:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Contracts</span>
    <span class="k">module</span> <span class="nn">Users</span>
      <span class="k">class</span> <span class="nc">CreateUser</span> <span class="o">&lt;</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Validation</span><span class="o">::</span><span class="no">Contract</span>
        <span class="n">params</span> <span class="k">do</span>
          <span class="n">required</span><span class="p">(</span><span class="ss">:first_name</span><span class="p">).</span><span class="nf">filled</span><span class="p">(</span><span class="ss">:string</span><span class="p">)</span>
          <span class="n">required</span><span class="p">(</span><span class="ss">:last_name</span><span class="p">).</span><span class="nf">filled</span><span class="p">(</span><span class="ss">:string</span><span class="p">)</span>
          <span class="n">optional</span><span class="p">(</span><span class="ss">:age</span><span class="p">).</span><span class="nf">filled</span><span class="p">(</span><span class="ss">:integer</span><span class="p">)</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>If we pass data from a form submission through our contract before we work through it, the data will have all the correct types and we don’t need to coerce that data when we’re working with – dry-validation has done that for us. After this point, our data will always be in the correct type.</p>

<p>Another thing to note with our new contract is that it will only return the specified fields. Extra fields will be ignored:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create_user</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Contracts</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span><span class="p">.</span><span class="nf">new</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">create_user</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">,</span> <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span> <span class="ss">age: </span><span class="s2">"32"</span><span class="p">,</span> <span class="ss">admin: </span><span class="kp">true</span><span class="p">)</span>
<span class="c1"># =&gt; #&lt;Dry::Validation::Result{:first_name=&gt;"Ryan", :last_name=&gt;"Bigg", :age=&gt;32} errors={}&gt;</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">admin</code> field doesn’t appear here at all, even though we’ve specified it as an input to this contract.</p>

<p>So in summary, here’s what we’re given by using a <code class="language-plaintext highlighter-rouge">dry-validation</code> contract:</p>

<ul>
  <li>Validations to ensure fields meet certain criteria</li>
  <li>Automatic type coercion of fields into their correct types</li>
  <li>Automatic limiting of input to just the fields we have specified</li>
</ul>

<h2 id="intro-to-dry-monads">Intro to Dry Monads</h2>

<p>Now that we have a way to create user records (the <code class="language-plaintext highlighter-rouge">Bix::Repos::UserRepo</code>) and a way to validate that data before it gets into the database <code class="language-plaintext highlighter-rouge">(Bix::Contracts::Users::CreateUser</code>), we can combine them to ensure data is valid before it reaches out database.</p>

<p>To do this combination, we could write a class like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreateUser</span>
  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
    <span class="n">create_contract</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Contracts</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">Create</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">create_contract</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="nf">success?</span>
      <span class="n">user_repo</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Repos</span><span class="o">::</span><span class="no">User</span><span class="p">.</span><span class="nf">new</span>
      <span class="n">user_repo</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
    <span class="k">else</span>
      <span class="n">result</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>From the start, this class doesn’t look so bad. But if we added one more <code class="language-plaintext highlighter-rouge">if</code> condition or perhaps some code to send a “successful sign up” email to a user, this class would get longer and more complex.</p>

<p>To avoid that kind of complexity, the <code class="language-plaintext highlighter-rouge">dry-rb</code> suite of gems provides another gem called <code class="language-plaintext highlighter-rouge">dry-monads</code>. Among <a href="https://dry-rb.org/gems/dry-monads/1.3/getting-started/">other things</a>, this <code class="language-plaintext highlighter-rouge">dry-monads</code> gem provides us with a feature called “Do Notation”. This feature will allow us to write our <code class="language-plaintext highlighter-rouge">CreateUser</code> class in a much cleaner way that will also allow for extensibility later on – if we want that.</p>

<p>Let’s add this gem to our <code class="language-plaintext highlighter-rouge">Gemfile</code> now:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'dry-monads'</span><span class="p">,</span> <span class="s1">'~&gt; 1.3'</span>
</code></pre></div></div>

<p>And we’ll run <code class="language-plaintext highlighter-rouge">bundle install</code> to install it.</p>

<p>Next up, we will need to require this gem in <code class="language-plaintext highlighter-rouge">system/boot/core.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">boot</span><span class="p">(</span><span class="ss">:core</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">init</span> <span class="k">do</span>
    <span class="nb">require</span> <span class="s2">"dry-validation"</span>
    <span class="nb">require</span> <span class="s2">"dry/monads"</span>
    <span class="nb">require</span> <span class="s2">"dry/monads/do"</span>
  <span class="k">end</span>

  <span class="n">start</span> <span class="k">do</span>
    <span class="no">Dry</span><span class="o">::</span><span class="no">Validation</span><span class="p">.</span><span class="nf">load_extensions</span><span class="p">(</span><span class="ss">:monads</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We’ve changed <code class="language-plaintext highlighter-rouge">core.rb</code> here to require <code class="language-plaintext highlighter-rouge">dry/monads</code> and <code class="language-plaintext highlighter-rouge">dry/monads/do</code>. The second file will give us access to Dry Monad’s <em>Do Notation</em> feature. We’ve added a <code class="language-plaintext highlighter-rouge">start</code> block here, which will run when our application is finalized. This will add an extra <code class="language-plaintext highlighter-rouge">to_monad</code> method to our validation results. We’ll see this used in a short while.</p>

<p>Before we get there, we need to talk about two things. One is called the <em>Result Monad</em>, and the other is the <em>Do Notation</em>.</p>

<h3 id="result-monad">Result Monad</h3>

<p>The Result Monad is a type of object that can represent whether an action has succeeded or failed. Where it comes in handy is when you have a chain of actions that you might want to stop if one of those things goes wrong. For instance, in the above code when the user is invalid, we want the code to not persist the user to the database.</p>

<p>To do this with <code class="language-plaintext highlighter-rouge">dry-monads</code>, we would return one of two types of the result monad, a <code class="language-plaintext highlighter-rouge">Success</code> or <code class="language-plaintext highlighter-rouge">Failure</code>. Here’s a flowchart showing what would go on when we use a Result monad:</p>

<p><img src="/images/rom/dry-monads.png" alt="Result monad diagram" /></p>

<p>Here we have a “Create User” action that has two steps: a “Validate User” and a “Persist User” step. When our “Create User” action receives some parameters, it passes them to the “Validate User” step. When this step runs, there can be one of two results: success or failure.</p>

<p>When the validation succeeds, that step returns a <code class="language-plaintext highlighter-rouge">Success</code> result monad which will contain the validated (and type-casted!) parameters.</p>

<p>If the validation fails, the step returns a <code class="language-plaintext highlighter-rouge">Failure</code> result monad. This monad contains the validation errors.</p>

<p>When our code sees a <code class="language-plaintext highlighter-rouge">Failure</code> Result Monad returned, it will not execute the remaining steps. In the above diagram, the validation of a user <em>must</em> succeed before persistence happens. Just like in the earlier code we wrote too.</p>

<h3 id="do-notation">Do Notation</h3>

<p>The Result Monad is used in conjunction with that other feature of <code class="language-plaintext highlighter-rouge">dry-monads</code> I mentioned earlier: Do Notation. Let’s take the above <code class="language-plaintext highlighter-rouge">CreateUser</code> class and re-write it using <code class="language-plaintext highlighter-rouge">dry-monads</code>’ Do Notation. We’ll put this class at <code class="language-plaintext highlighter-rouge">lib/bix/transactions/users/create_user.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Transactions</span>
    <span class="k">module</span> <span class="nn">Users</span>
      <span class="k">class</span> <span class="nc">CreateUser</span>
        <span class="kp">include</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="p">[</span><span class="ss">:result</span><span class="p">]</span>
        <span class="kp">include</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Do</span><span class="p">.</span><span class="nf">for</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span>


        <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
          <span class="n">values</span> <span class="o">=</span> <span class="k">yield</span> <span class="n">validate</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
          <span class="n">user</span> <span class="o">=</span> <span class="k">yield</span> <span class="n">persist</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>

          <span class="no">Success</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
        <span class="k">end</span>

        <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
          <span class="n">create_contract</span> <span class="o">=</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">Create</span><span class="p">.</span><span class="nf">new</span>
          <span class="n">create_contract</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">input</span><span class="p">).</span><span class="nf">to_monad</span>
        <span class="k">end</span>

        <span class="k">def</span> <span class="nf">persist</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
          <span class="n">user_repo</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Repos</span><span class="o">::</span><span class="no">UserRepo</span><span class="p">.</span><span class="nf">new</span>
          <span class="no">Success</span><span class="p">(</span><span class="n">user_repo</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">values</span><span class="p">))</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This code is a bit longer than the code we had previously. However, it comes with a few benefits. The first of these is that each step is clearly split out into its own method.</p>

<aside>
  <header>The <code>call</code> dumping ground anti-pattern</header>

  <p>
    No longer are we just throwing <em>everything</em> into the <code>call</code> function.
  </p>

  <p>
    This is a common trap for developers who adopt this kind of <em>transaction</em> (or "service") pattern. They split out a class from a controller, and then dump everything into the <code>call</code> method! The code is no cleaner when you've done this, it has simply been swept under the proverbial rug.
  </p>

  <p>
    A much better approach is a call method that delegates to <em>other</em> methods.
  </p>
</aside>

<p>The <code class="language-plaintext highlighter-rouge">call</code> method here is responsible for ordering the steps of our transaction. It takes our initial <code class="language-plaintext highlighter-rouge">input</code> for this transaction and runs it through the validator. All of that validation logic is neatly gathered together in the <code class="language-plaintext highlighter-rouge">validate</code> method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
  <span class="n">create_contract</span> <span class="o">=</span> <span class="no">Contracts</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span><span class="p">.</span><span class="nf">new</span>
  <span class="n">create_contract</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">input</span><span class="p">).</span><span class="nf">to_monad</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In this method, we use our contract that we built earlier. When we call this contract, it will return a <code class="language-plaintext highlighter-rouge">Dry::Validation::Result</code> object. To use this in conjunction with <code class="language-plaintext highlighter-rouge">dry-monads</code>’ Do Notation, we need to convert this object to a Result Monad. We do this by calling <code class="language-plaintext highlighter-rouge">to_monad</code> on the result.</p>

<p>If the validation succeeds, we’ll get back a <code class="language-plaintext highlighter-rouge">Success(validated_input)</code> result monad, otherwise a <code class="language-plaintext highlighter-rouge">Failure(validation_result)</code> result monad will be returned.</p>

<p>If it fails at this point, the transaction will stop and return the validation failure.</p>

<p>If it succeeds however, the transaction to the next step: <code class="language-plaintext highlighter-rouge">create_user</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_user</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
  <span class="n">user_repo</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Repos</span><span class="o">::</span><span class="no">UserRepo</span><span class="p">.</span><span class="nf">new</span>
  <span class="no">Success</span><span class="p">(</span><span class="n">user_repo</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">values</span><span class="p">))</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This step takes a <code class="language-plaintext highlighter-rouge">result</code> argument, which will be the <code class="language-plaintext highlighter-rouge">validated_input</code> returned from our validation step. We then initialise a new repo, and use that to create a user, taking the <code class="language-plaintext highlighter-rouge">result.values</code>. These values will be the validated and type-casted values from the validation’s result.</p>

<p>Let’s try using this class now in <code class="language-plaintext highlighter-rouge">bin/console</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create_user</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Transactions</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span><span class="p">.</span><span class="nf">new</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">create_user</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">,</span> <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span> <span class="ss">age: </span><span class="mi">32</span><span class="p">)</span>
<span class="c1"># =&gt; Success(#&lt;Bix::User id=4 first_name="Ryan" last_name="Bigg" age=32 ...&gt;)</span>
</code></pre></div></div>

<p>When we use this transaction, it runs the validation and persistence steps for us. If everything goes well, like in the above example, then we get back a <code class="language-plaintext highlighter-rouge">Success</code> result monad.</p>

<p>Let’s see what happens if the validation fails in this transaction:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create_user</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Transactions</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span><span class="p">.</span><span class="nf">new</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">create_user</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">,</span> <span class="ss">last_name: </span><span class="s2">""</span><span class="p">,</span> <span class="ss">age: </span><span class="mi">32</span><span class="p">)</span>
<span class="c1"># =&gt; Failure(#&lt;Dry::Validation::Result{:first_name=&gt;"Ryan", :last_name=&gt;"", :age=&gt;32} errors={:last_name=&gt;["must be filled"]}&gt;)</span>
</code></pre></div></div>

<p>This time, we get back a <code class="language-plaintext highlighter-rouge">Failure</code> result monad, which is wrapping our <code class="language-plaintext highlighter-rouge">Dry::Validation::Result</code>. This will mean that the persistence won’t happen at all.</p>

<p>Our transaction class so far has only two methods, but <em>could</em> be expanded out to include more. Perhaps we would want to send an email to the user to confirm that they’ve signed up?</p>

<p>Or what if we had a transaction class that handled account signup, where both an account <em>and</em> a user had to be created? A flowchart for that transaction class would look like this:</p>

<p><img src="/images/rom/dry-monads-complex.png" alt="More complex transaction diagram" /></p>

<p>A transaction class is a great way of grouping together all these steps into small, discrete methods.</p>

<h2 id="handling-success-or-failure">Handling success or failure</h2>

<p>Let’s now think about how we would actually use this <code class="language-plaintext highlighter-rouge">CreateUser</code> transaction class in a real context, something a bit more specialised than a simple <code class="language-plaintext highlighter-rouge">bin/console</code> session. For this section, we’ll create a new file at the root of the Bix application, called <code class="language-plaintext highlighter-rouge">transaction_test.rb</code>. In this file, we’ll put this content:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"config/application"</span>

<span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">finalize!</span>

<span class="kp">include</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="p">[</span><span class="ss">:result</span><span class="p">]</span>

<span class="n">input</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">first_name: </span><span class="s2">"Ryan"</span><span class="p">,</span>
  <span class="ss">last_name: </span><span class="s2">"Bigg"</span><span class="p">,</span>
  <span class="ss">age: </span><span class="mi">32</span>
<span class="p">}</span>

<span class="n">create_user</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Transactions</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span><span class="p">.</span><span class="nf">new</span>
<span class="k">case</span> <span class="n">create_user</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
<span class="k">when</span> <span class="no">Success</span>
  <span class="nb">puts</span> <span class="s2">"User created successfully!"</span>
<span class="k">when</span> <span class="no">Failure</span><span class="p">(</span><span class="no">Dry</span><span class="o">::</span><span class="no">Validation</span><span class="o">::</span><span class="no">Result</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"User creation failed:"</span>
  <span class="nb">puts</span> <span class="n">result</span><span class="p">.</span><span class="nf">failure</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">to_h</span> <span class="c1"># TODO variable result is not defined</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This file starts out the same way as <code class="language-plaintext highlighter-rouge">bin/console</code>: we require <code class="language-plaintext highlighter-rouge">config/application.rb</code> and then “finalize” our application. This finalization step will load all the application’s files and start all of the application’s dependencies.</p>

<p>Next up, we include <code class="language-plaintext highlighter-rouge">Dry::Monads[:result]</code>. This gives us access to the <code class="language-plaintext highlighter-rouge">Success</code> and <code class="language-plaintext highlighter-rouge">Failure</code> result monad classes that we use at the end of this file.</p>

<p>Once we’ve set everything up, we define an input hash for our transaction, and the transaction itself. When we call the transaction, we can use a <code class="language-plaintext highlighter-rouge">case</code> to match on the outcome of the transaction. If it is successful, we output a message saying as much. If it fails, and the failure is a validation failure (indicated by the failure being a <code class="language-plaintext highlighter-rouge">Dry::Validation::Result</code> failure), we output the validation error messages.</p>

<p>Here we’ve seen a very simple way of handling the success or failure of a transaction. This code is very similar to how we would use the transaction in another context, such as a controller. The great thing about a transaction is that we aren’t limited to using it just within a controller – we could use it anywhere we pleased. This example is just a small one showing us how we could use it.</p>

<p>In Part 4 of this guide, we’ll re-visit how to use this transaction in a different context.</p>

<h2 id="automatically-injecting-dependencies">Automatically injecting dependencies</h2>

<p>Before we finish up this part of the showcase, I would like to demonstrate one additional piece of cleanup that we could do. Let’s re-visit our transaction’s code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Transactions</span>
    <span class="k">module</span> <span class="nn">Users</span>
      <span class="k">class</span> <span class="nc">CreateUser</span>
        <span class="kp">include</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="p">[</span><span class="ss">:result</span><span class="p">]</span>
        <span class="kp">include</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Do</span><span class="p">.</span><span class="nf">for</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span>

        <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
          <span class="n">values</span> <span class="o">=</span> <span class="k">yield</span> <span class="n">validate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
          <span class="n">user</span> <span class="o">=</span> <span class="k">yield</span> <span class="n">persist</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>

          <span class="no">Success</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
        <span class="k">end</span>

        <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
          <span class="n">create_user</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Contracts</span><span class="o">::</span><span class="no">Users</span><span class="o">::</span><span class="no">CreateUser</span><span class="p">.</span><span class="nf">new</span>
          <span class="n">create_user</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">).</span><span class="nf">to_monad</span>
        <span class="k">end</span>

        <span class="k">def</span> <span class="nf">persist</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
          <span class="n">user_repo</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Repos</span><span class="o">::</span><span class="no">UserRepo</span><span class="p">.</span><span class="nf">new</span>
          <span class="no">Success</span><span class="p">(</span><span class="n">user_repo</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">values</span><span class="p">))</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This code looks pretty clean as it stands. But there’s one extra thing we can do to make it even tidier, and that thing is to use <code class="language-plaintext highlighter-rouge">dry-auto_inject</code>’s import feature. When we define things like the <code class="language-plaintext highlighter-rouge">CreateUser</code> contract or the <code class="language-plaintext highlighter-rouge">UserRepo</code> within our application, these classes are automatically registered with <code class="language-plaintext highlighter-rouge">Bix::Application</code>, because we’ve directed the application to <code class="language-plaintext highlighter-rouge">auto_register</code> things in <code class="language-plaintext highlighter-rouge">lib</code>. This happened over in <code class="language-plaintext highlighter-rouge">config/application.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"boot"</span>

<span class="nb">require</span> <span class="s2">"dry/system/container"</span>
<span class="nb">require</span> <span class="s2">"dry/auto_inject"</span>

<span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Dry</span><span class="o">::</span><span class="no">System</span><span class="o">::</span><span class="no">Container</span>
    <span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
      <span class="n">config</span><span class="p">.</span><span class="nf">root</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="s1">'..'</span><span class="p">,</span> <span class="n">__dir__</span><span class="p">)</span>
      <span class="n">config</span><span class="p">.</span><span class="nf">default_namespace</span> <span class="o">=</span> <span class="s1">'bix'</span>

      <span class="n">config</span><span class="p">.</span><span class="nf">auto_register</span> <span class="o">=</span> <span class="s1">'lib'</span>
    <span class="k">end</span>

    <span class="n">load_paths!</span><span class="p">(</span><span class="s1">'lib'</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="no">Import</span> <span class="o">=</span> <span class="no">Dry</span><span class="o">::</span><span class="no">AutoInject</span><span class="p">(</span><span class="no">Application</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We saw earlier that we could refer to the ROM container with the syntax <code class="language-plaintext highlighter-rouge">include Import["container"]</code> within our <code class="language-plaintext highlighter-rouge">UserRepo</code> class. Well, we can do the same thing with our contract and repository in this transaction class too.</p>

<p>Here’s how we’ll do it. At the top of the class, we’ll put these two <code class="language-plaintext highlighter-rouge">include</code> lines:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Transactions</span>
    <span class="k">module</span> <span class="nn">Users</span>
      <span class="k">class</span> <span class="nc">CreateUser</span>
        <span class="kp">include</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="p">[</span><span class="ss">:result</span><span class="p">]</span>
        <span class="kp">include</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Monads</span><span class="o">::</span><span class="no">Do</span><span class="p">.</span><span class="nf">for</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span>

        <span class="kp">include</span> <span class="no">Import</span><span class="p">[</span><span class="s2">"contracts.users.create_user"</span><span class="p">]</span>
        <span class="kp">include</span> <span class="no">Import</span><span class="p">[</span><span class="s2">"repos.user_repo"</span><span class="p">]</span>
<span class="o">...</span>
</code></pre></div></div>

<p>By using <code class="language-plaintext highlighter-rouge">include</code> like this, we will be able to access our contract and repository in a simpler fashion. To do that, we can change our <code class="language-plaintext highlighter-rouge">validate</code> and <code class="language-plaintext highlighter-rouge">persist</code> methods in this transaction to this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
  <span class="n">create_user</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">).</span><span class="nf">to_monad</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">persist</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
  <span class="no">Success</span><span class="p">(</span><span class="n">user_repo</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">values</span><span class="p">))</span>
<span class="k">end</span>
</code></pre></div></div>

<p>That’s a lot cleaner, isn’t it? We’re now able to refer to the contract as simply <code class="language-plaintext highlighter-rouge">create_user</code>, and the repository as <code class="language-plaintext highlighter-rouge">user_repo</code>, without putting in those ugly namespaces into these methods. This syntax also more clearly defines the other class dependencies this transaction has, right at the top of the class. We don’t need to scan through the class to figure out what they are anymore.</p>

<p>To make sure that things are working again, let’s try running <code class="language-plaintext highlighter-rouge">ruby transaction_test.rb</code> again. If the <code class="language-plaintext highlighter-rouge">input</code> hash at the top of this file contains valid input, then we should see the successful message still:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User created successfully!
</code></pre></div></div>

<p>If this transaction class went on to use other classes from our application, we could import them with very little effort, thanks to the <code class="language-plaintext highlighter-rouge">dry-system</code> and <code class="language-plaintext highlighter-rouge">dry-auto_inject</code> gems.</p>

<h2 id="summary">Summary</h2>

<p>In this 2nd part of the ROM and Dry showcase, we have used the <code class="language-plaintext highlighter-rouge">dry-validation</code> gem to add a  <em>contract</em> to our application. A contract is a class that contains validation logic. It’s a way of saying that incoming data must meet some criteria before our application can use it.</p>

<p>In the second half of this guide, we used <code class="language-plaintext highlighter-rouge">dry-monads</code> to define a <em>transaction</em> class within our application for creating users. This class is a collection of all the actions that our application would have to take to create a user. So far, there are only two of them: <code class="language-plaintext highlighter-rouge">validate</code> and <code class="language-plaintext highlighter-rouge">persist</code>. This class uses the contract to first validate the input, and then if that validation succeeds, the class will create a user in the database by using the repo.</p>

<p>In the final part of this guide, we used <code class="language-plaintext highlighter-rouge">dry-auto_inject</code> once more to automatically inject the repository and contract into our transaction class, allowing us to tidy up the code very slightly, but still noticeably.</p>

<p>In the next part, we’re going to look at how we can test the parts of the application that we’ve built so far by using the RSpec testing framework. We’ll also see <em>another</em> advantage of <code class="language-plaintext highlighter-rouge">dry-auto_inject</code> in this part.</p>
]]></content>
 </entry>
 
 <entry>
   <title>ROM + Dry Showcase: Part 1 - Application + Database setup</title>
   <link href="http://ryanbigg.com/2020/02/rom-and-dry-showcase-part-1"/>
   <updated>2020-02-01T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2020/02/rom-and-dry-showcase-part-1</id>
   <content type="html"><![CDATA[<p>The <a href="https://rom-rb.org/">rom-rb</a> and <a href="https://dry-rb.org/">dry-rb</a> sets of gems have come out in the last couple of years. These gems allow an alternative take on building a Ruby application, separate from Rails or Sinatra, or anything else like that.</p>

<p>In this <em>series</em> of blog posts, I am going to show you how to build a simple application that I’m calling “Bix” using some of these gems. By the end of this series, the application will:</p>

<ul>
  <li>Part 1 (you are here) - Interact with a database using ROM</li>
  <li><a href="/2020/02/rom-and-dry-showcase-part-2">Part 2 - Have validation and transaction classes</a></li>
  <li><a href="/2020/02/rom-and-dry-showcase-part-3">Part 3 - Test our application with RSpec</a></li>
  <li><a href="/2020/02/rom-and-dry-showcase-part-4">Part 4 - Have a router and a series of actions</a></li>
</ul>

<p>This part will cover how to start building out an application’s architecture. We’ll also work on having this application speak to a database. For this, we’ll use the following gems:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">dry-system</code> – Used for loading an application’s dependencies automatically</li>
  <li>rom, <a href="https://rom-rb.org/5.0/learn/sql/">rom-sql</a> + pg – We’ll use these to connect to a database</li>
  <li><code class="language-plaintext highlighter-rouge">dotenv</code> – a gem that helps load <code class="language-plaintext highlighter-rouge">.env</code> files that contain environment variables</li>
  <li><code class="language-plaintext highlighter-rouge">rake</code> – For running Rake tasks, like migrations!</li>
</ul>

<p>In this part, we will setup a small Ruby application that talks to a PostgreSQL database, by using the <code class="language-plaintext highlighter-rouge">dry-system</code>, <code class="language-plaintext highlighter-rouge">rom</code>, <code class="language-plaintext highlighter-rouge">rom-sql</code> and <code class="language-plaintext highlighter-rouge">pg</code> gems. At the end of this guide, we will be able to insert and retrieve data from the database.</p>

<p>If you’d like to see the code for this application, it’s at <a href="https://github.com/radar/bix">github.com/radar/bix</a>, and each part of this series has its own branch.</p>

<h2 id="a-word-on-setup-costs">A word on setup costs</h2>

<p>In these guides, you may get a sense that the setup of rom-rb and dry-rb libraries takes a long time – maybe you’ll think thoughts like “this is so easy in Rails!” These are normal and understandable thoughts. The setup of this sort of thing in Rails <em>is</em> easier, thanks to its generators.</p>

<p>However, Rails leads you into an application architecture that paints you into a corner, for reasons I explained in <a href="https://www.youtube.com/watch?v=04Kq_9scT1E">my “Exploding Rails” talk in 2018</a>.</p>

<p>The setup of ROM and dry-rb things <em>is</em> harder, but leads you ultimately into a better designed application with clearer lines drawn between the classes’ responsibilties.</p>

<p>It might help to think of it in the way my friend Bo Jeanes put it:</p>

<blockquote>
  <p>Setup cost is a cost that you pay <em>once</em>, whereas ease-of-application-maintenance is a cost that you pay <em>every single day</em>.</p>
</blockquote>

<p>So in the long run, this will be better. I promise.</p>

<h2 id="installing-gems">Installing Gems</h2>

<p>To get started, we’ll create an empty directory for our application. I’ve called mine <code class="language-plaintext highlighter-rouge">bix</code>. Inside this directory you will need to create a basic <code class="language-plaintext highlighter-rouge">Gemfile</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source 'https://rubygems.org'

ruby '2.7.0'

gem 'dry-system'
gem 'rom'
gem 'rom-sql'
gem 'pg'

gem 'dotenv'
gem 'rake'
</code></pre></div></div>

<p>Once we have created that <code class="language-plaintext highlighter-rouge">Gemfile</code>, we’ll need to run <code class="language-plaintext highlighter-rouge">bundle install</code> to install all of those dependencies.</p>

<h2 id="boot-configuration">Boot Configuration</h2>

<p>Next up, we will create an environment for our application that will allow us to load dependencies of the application, such as files in <code class="language-plaintext highlighter-rouge">lib</code> or other dependencies like database configuration. We’re going to use the <code class="language-plaintext highlighter-rouge">dry-system</code> gem for this.</p>

<p>Before we get to using that gem, let’s create a file called <code class="language-plaintext highlighter-rouge">config/boot.rb</code>. This file will contain this code to load up our application’s primary gem dependencies:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ENV</span><span class="p">[</span><span class="s1">'APP_ENV'</span><span class="p">]</span> <span class="o">||=</span> <span class="s2">"development"</span>

<span class="nb">require</span> <span class="s2">"bundler"</span>
<span class="no">Bundler</span><span class="p">.</span><span class="nf">setup</span><span class="p">(</span><span class="ss">:default</span><span class="p">,</span> <span class="no">ENV</span><span class="p">[</span><span class="s2">"APP_ENV"</span><span class="p">])</span>

<span class="nb">require</span> <span class="s2">"dotenv"</span>
<span class="no">Dotenv</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="s2">".env"</span><span class="p">,</span> <span class="s2">".env.</span><span class="si">#{</span><span class="no">ENV</span><span class="p">[</span><span class="s2">"APP_ENV"</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
</code></pre></div></div>

<p>The first line of code sets up an <code class="language-plaintext highlighter-rouge">APP_ENV</code> environment variable. Our application will use this environment variable to determine what dependencies to load. For instance, when we’re developing our application locally we may want to use development gems like <code class="language-plaintext highlighter-rouge">pry</code>. However, when we deploy the application to production, we will not want to use those gems. By setting <code class="language-plaintext highlighter-rouge">APP_ENV</code>, we can control what gems are loaded by our application.</p>

<p>The first block of code here will setup Bundler, which adds our gem dependencies’ paths to the load path, so that we can require them when we need to. Note that <code class="language-plaintext highlighter-rouge">Bundler.setup</code> is different from <code class="language-plaintext highlighter-rouge">Bundler.require</code> (like in a Rails application) – <code class="language-plaintext highlighter-rouge">Bundler.setup</code> only adds to the load path, and does not require everything at the beginning.</p>

<p>The two args passed here to <code class="language-plaintext highlighter-rouge">Bundler.setup</code> tell Bundler to include all gems outside of a group, and all gems inside of a group named after whatever <code class="language-plaintext highlighter-rouge">APP_ENV</code> is set to, which is <code class="language-plaintext highlighter-rouge">development</code>.</p>

<p>The first one that we require is <code class="language-plaintext highlighter-rouge">dotenv</code>, and that is just so we can load the <code class="language-plaintext highlighter-rouge">.env</code> or <code class="language-plaintext highlighter-rouge">.env.{APP_ENV}</code> files. When we’re working locally, we’ll want to have a <code class="language-plaintext highlighter-rouge">.env.development</code> file that specifies our local database’s URL. Let’s create this file now: <code class="language-plaintext highlighter-rouge">.env.development</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DATABASE_URL=postgres://localhost/bix_dev
</code></pre></div></div>

<p>This file specifies the database we want to connect to when we’re developing locally. To create that database, we will need to run:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>createdb bix_dev
</code></pre></div></div>

<h2 id="application-environment-setup">Application Environment Setup</h2>

<p>To setup our application’s environment and use this database configuration, we’re going to use that <code class="language-plaintext highlighter-rouge">dry-system</code> gem. To do this, we’ll create a new file called <code class="language-plaintext highlighter-rouge">config/application.rb</code> and put this code in it:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s2">"boot"</span>

<span class="nb">require</span> <span class="s2">"dry/system/container"</span>

<span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Dry</span><span class="o">::</span><span class="no">System</span><span class="o">::</span><span class="no">Container</span>
    <span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
      <span class="n">config</span><span class="p">.</span><span class="nf">root</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="s1">'..'</span><span class="p">,</span> <span class="n">__dir__</span><span class="p">)</span>
      <span class="n">config</span><span class="p">.</span><span class="nf">default_namespace</span> <span class="o">=</span> <span class="s1">'bix'</span>

      <span class="n">config</span><span class="p">.</span><span class="nf">auto_register</span> <span class="o">=</span> <span class="s1">'lib'</span>
    <span class="k">end</span>

    <span class="n">load_paths!</span><span class="p">(</span><span class="s1">'lib'</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This code is responsible for loading our <code class="language-plaintext highlighter-rouge">boot.rb</code> file and defining a <code class="language-plaintext highlighter-rouge">Bix::Application</code> <em>container</em>. This container is responsible for automatically loading dependencies in from <code class="language-plaintext highlighter-rouge">lib</code> (when we have them!). This container is also responsible for handling how system-level dependencies for our application are loaded – like how our application connects to a database.</p>

<p>To set that database connection up, we’re going to create a new file over in <code class="language-plaintext highlighter-rouge">system/boot/db.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">boot</span><span class="p">(</span><span class="ss">:db</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">init</span> <span class="k">do</span>
    <span class="nb">require</span> <span class="s2">"rom"</span>
    <span class="nb">require</span> <span class="s2">"rom-sql"</span>

    <span class="n">connection</span> <span class="o">=</span> <span class="no">Sequel</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="no">ENV</span><span class="p">[</span><span class="s1">'DATABASE_URL'</span><span class="p">],</span> <span class="ss">extensions: </span><span class="sx">%i[pg_timestamptz]</span><span class="p">)</span>
    <span class="n">register</span><span class="p">(</span><span class="s1">'db.connection'</span><span class="p">,</span> <span class="n">connection</span><span class="p">)</span>
    <span class="n">register</span><span class="p">(</span><span class="s1">'db.config'</span><span class="p">,</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Configuration</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:sql</span><span class="p">,</span> <span class="n">connection</span><span class="p">))</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">system/boot</code> directory is where we put system-level dependencies when using <code class="language-plaintext highlighter-rouge">dry-system</code>. This new file that we’ve created configures how our application defines its database connection.</p>

<p>To connect to the database, we need to use the <code class="language-plaintext highlighter-rouge">rom</code> and <code class="language-plaintext highlighter-rouge">rom-sql</code> gems. These will automatically require the <code class="language-plaintext highlighter-rouge">Sequel</code> gem, and we build a database connection there using <code class="language-plaintext highlighter-rouge">Sequel.connect</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">extensions</code> option passed here tells the underlying database gem, Sequel, to load an extension called <code class="language-plaintext highlighter-rouge">pg_timestamptz</code>. This extension will create <code class="language-plaintext highlighter-rouge">timestamp with time zone</code> columns in our database, rather than the default, which is <code class="language-plaintext highlighter-rouge">timestamp without time zone</code>. This means that times will be stored with time zone information in the database and this means when we retrieve them Ruby won’t add the system’s timezone on the end. To demonstrate what I mean here, compare these three lines:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s2">"2020-10-14 14:23:07.155221"</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">14</span> <span class="mi">14</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mo">07</span><span class="o">.</span><span class="mi">155221</span> <span class="o">+</span><span class="mi">1100</span>
<span class="o">&gt;&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s2">"2020-10-14 14:23:07.155221 UTC"</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">14</span> <span class="mi">14</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mo">07</span><span class="o">.</span><span class="mi">155221</span> <span class="no">UTC</span>
<span class="o">&gt;&gt;</span> <span class="no">Time</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s2">"2020-10-14 14:23:07.155221 +0100"</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="mi">2020</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">14</span> <span class="mi">14</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mo">07</span><span class="o">.</span><span class="mi">155221</span> <span class="o">+</span><span class="mo">0100</span>
</code></pre></div></div>

<p>A time <em>without</em> a timezone will have the local system’s timezone applied to the end. I’m in Melbourne and it’s Daylight Savings Time, so my timezone is +1100.</p>

<p>However, if the time comes back out of the database with a time zone (shown here to either be <code class="language-plaintext highlighter-rouge">UTC</code> or <code class="language-plaintext highlighter-rouge">+0100</code>), then the time will be parsed correctly!</p>

<p>Now that we have our database connection defined and our database itself created, we will need to create tables in that database. If this was a Rails app, we would use migrations to do such a thing. Fortunately for us, ROM “borrowed” that idea and so we can use migrations with ROM too.</p>

<p>To create migrations with ROM, we will need to create another file to define the Rake tasks, called <code class="language-plaintext highlighter-rouge">Rakefile</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s1">'config/application'</span>
<span class="nb">require</span> <span class="s1">'rom-sql'</span>
<span class="nb">require</span> <span class="s1">'rom/sql/rake_task'</span>

<span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
  <span class="n">task</span> <span class="ss">:setup</span> <span class="k">do</span>
    <span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="ss">:db</span><span class="p">)</span>
    <span class="n">config</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">[</span><span class="s1">'db.config'</span><span class="p">]</span>
    <span class="n">config</span><span class="p">.</span><span class="nf">gateways</span><span class="p">[</span><span class="ss">:default</span><span class="p">].</span><span class="nf">use_logger</span><span class="p">(</span><span class="no">Logger</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vg">$stdout</span><span class="p">))</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This file loads the <code class="language-plaintext highlighter-rouge">config/application.rb</code> file that we created earlier and that will make it possible to require the other two files we use here.</p>

<p>In order to tell ROM’s Rake tasks where our database lives, we’re required to setup a Rake task of our own: one called <code class="language-plaintext highlighter-rouge">db:setup</code>. This configuration starts the system-level dependency <code class="language-plaintext highlighter-rouge">:db</code> by calling <code class="language-plaintext highlighter-rouge">start</code> on <code class="language-plaintext highlighter-rouge">Bix::Application</code>. This will run the code inside the <code class="language-plaintext highlighter-rouge">init</code> block defined within <code class="language-plaintext highlighter-rouge">system/boot/db.rb</code>. This <code class="language-plaintext highlighter-rouge">init</code> block registers a <code class="language-plaintext highlighter-rouge">db.config</code> with our application, and we can retrieve that value by using <code class="language-plaintext highlighter-rouge">Bix::Application['db.config']</code> here. ROM will then use this value to talk to our database.</p>

<p>Using this configuration, we configure something called the <em>default gateway</em>, which is the simply the default database connection that ROM has been configured with. We <em>could</em> configure multiple gateways, but we’re only going to be using the one in this series. On this gateway, we tell it to use a new <code class="language-plaintext highlighter-rouge">Logger</code> instance, which will log SQL output for our Rake tasks.</p>

<h3 id="migrations">Migrations</h3>

<p>Like a lot of database frameworks, ROM also comes with <a href="https://rom-rb.org/5.0/learn/sql/migrations/">migrations</a>. We can use these to create the tables for our application.</p>

<p>To generate a migration with ROM, we can run:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
rake "db:create_migration[create_users]"

</code></pre></div></div>

<p>This will create us a new file under <code class="language-plaintext highlighter-rouge">db/migrate</code> and it’ll be almost empty:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>

<span class="no">ROM</span><span class="o">::</span><span class="no">SQL</span><span class="p">.</span><span class="nf">migration</span> <span class="k">do</span>
  <span class="n">change</span> <span class="k">do</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>It’s up to us to fill this out. Let’s do so:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>

<span class="no">ROM</span><span class="o">::</span><span class="no">SQL</span><span class="p">.</span><span class="nf">migration</span> <span class="k">do</span>
  <span class="n">change</span> <span class="k">do</span>
    <span class="n">create_table</span> <span class="ss">:users</span> <span class="k">do</span>
      <span class="n">primary_key</span> <span class="ss">:id</span>
      <span class="n">column</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="no">String</span>
      <span class="n">column</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="no">String</span>
      <span class="n">column</span> <span class="ss">:age</span><span class="p">,</span> <span class="no">Integer</span>

      <span class="n">column</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="ss">:datetime</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
      <span class="n">column</span> <span class="ss">:updated_at</span><span class="p">,</span> <span class="ss">:datetime</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>In this migration, we’ve specified six columns. We’ve had to specify the <code class="language-plaintext highlighter-rouge">primary_key</code> here, because ROM does not assume that all primary keys are <code class="language-plaintext highlighter-rouge">id</code> by default.</p>

<p>To run this migration, we will need to run:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rake db:migrate
</code></pre></div></div>

<p>If we see this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>... INFO -- : Finished applying migration [timestamp]_create_users.rb, direction: up, took [duration] seconds
&lt;= db:migrate executed
</code></pre></div></div>

<p>Then the migration has been successfully applied.</p>

<h3 id="repositories">Repositories</h3>

<p>In order to get data into and out of database tables with ROM, we need to create something called a <em>repository</em>. A repository is a class that is used to define a clear API between your database and your application.</p>

<p>To create one of these, we’ll create a new file inside a new directory structure at <code class="language-plaintext highlighter-rouge">lib/bix/repos/user_repo.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Repos</span>
    <span class="k">class</span> <span class="nc">UserRepo</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Repository</span><span class="p">[</span><span class="ss">:users</span><span class="p">]</span>

    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>To use this class (and others that we will create later on), we’ll need to create a new file at <code class="language-plaintext highlighter-rouge">system/boot/persistence.rb</code> to setup our database configuration for our application:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">boot</span><span class="p">(</span><span class="ss">:persistence</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="n">start</span> <span class="k">do</span>
    <span class="n">register</span><span class="p">(</span><span class="s1">'container'</span><span class="p">,</span> <span class="no">ROM</span><span class="p">.</span><span class="nf">container</span><span class="p">(</span><span class="n">app</span><span class="p">[</span><span class="s1">'db.config'</span><span class="p">]))</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This file uses the <code class="language-plaintext highlighter-rouge">rom</code> gem to define a database configuration container and registers it with our application under the <code class="language-plaintext highlighter-rouge">container</code> key.</p>

<p>Next up, we’ll create a new file over at <code class="language-plaintext highlighter-rouge">bin/console</code> with this in it:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env ruby</span>

<span class="nb">require_relative</span> <span class="s1">'../config/application'</span>

<span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">finalize!</span>

<span class="nb">require</span> <span class="s1">'irb'</span>
<span class="no">IRB</span><span class="p">.</span><span class="nf">start</span>
</code></pre></div></div>

<p>This file will load our application’s <code class="language-plaintext highlighter-rouge">config/application.rb</code> file. When this file is loaded, all the files in <code class="language-plaintext highlighter-rouge">lib</code> will be required. This includes our new <code class="language-plaintext highlighter-rouge">lib/bix/repos/user_repo.rb</code> file.</p>

<p>We call <code class="language-plaintext highlighter-rouge">Bix::Application.finalize!</code> here to start our application and all of its dependencies, this includes the two system-level dependencies specified in <code class="language-plaintext highlighter-rouge">system/boot</code>.</p>

<p>Once those classes are loaded and the application is finalized <code class="language-plaintext highlighter-rouge">bin/console</code> will start an IRB prompt.</p>

<p>To make it so that we can run <code class="language-plaintext highlighter-rouge">bin/console</code>, let’s run this command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod +x bin/console
</code></pre></div></div>

<p>We can now launch our console by running:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bin/console
</code></pre></div></div>

<p>When we’re in this console, we can use our repository:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; Bix::Repos::UserRepo.new(Bix::Application['container'])
</code></pre></div></div>

<p>This code will tell our user repository to connect to the database specified by the configuration contained within <code class="language-plaintext highlighter-rouge">Bix::Application['container']</code>. But unfortunately for us, another key part of configuration is missing and so we’re going to see an error when we run this code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ROM::ElementNotFoundError (:users doesn't exist in ROM::RelationRegistry registry)
</code></pre></div></div>

<p>For this code to work, we’re going to need one extra class: a <em>relation</em>.</p>

<h3 id="relations">Relations</h3>

<p>A <em>relation</em> class is used to represent data returning from a database, and is used most often by the repository itself. If we had a need for complex methods for working with data, they would go in “messy” relation methods, and then the repository would call those methods.</p>

<p>Here’s an example from an app that I’ve worked on recently. I want to have a function that works on a <code class="language-plaintext highlighter-rouge">notes</code> table, counting up all the notes for a particular set of <em>elements</em>. In my relation, I have this code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Twist</span>
  <span class="k">module</span> <span class="nn">Relations</span>
    <span class="k">class</span> <span class="nc">Notes</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Relation</span><span class="p">[</span><span class="ss">:sql</span><span class="p">]</span>
      <span class="n">schema</span><span class="p">(</span><span class="ss">:notes</span><span class="p">,</span> <span class="ss">infer: </span><span class="kp">true</span><span class="p">)</span>

      <span class="k">def</span> <span class="nf">counts_for_element_ids</span><span class="p">(</span><span class="n">element_ids</span><span class="p">)</span>
        <span class="n">where</span><span class="p">(</span><span class="ss">element_id: </span><span class="n">element_ids</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">select</span> <span class="p">{</span> <span class="p">[</span><span class="n">element_id</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="ss">:count</span><span class="p">,</span> <span class="ss">:id</span><span class="p">).</span><span class="nf">as</span><span class="p">(</span><span class="ss">:count</span><span class="p">)]</span> <span class="p">}</span>
        <span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="ss">:element_id</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">order</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">to_a</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">counts_for_elements</code> method defines a <em>query</em> that will run against my database, and the final <code class="language-plaintext highlighter-rouge">to_a</code> on that query will return a <em>dataset</em>; an array of elements with their note counts.</p>

<p>However, this query will only return counts for elements that have counts, rather than all specified elements. In this particular application, I want a count for all elements specified in <code class="language-plaintext highlighter-rouge">element_ids</code>, regardless if they have notes or not. The place for this particular logic is in the <em>repository</em>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Twist</span>
  <span class="k">module</span> <span class="nn">Repositories</span>
    <span class="k">class</span> <span class="nc">NoteRepo</span> <span class="o">&lt;</span> <span class="no">Twist</span><span class="o">::</span><span class="no">Repository</span><span class="p">[</span><span class="ss">:notes</span><span class="p">]</span>
      <span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">element_ids</span><span class="p">)</span>
        <span class="n">counts</span> <span class="o">=</span> <span class="n">notes</span><span class="p">.</span><span class="nf">counts_for_elements</span><span class="p">(</span><span class="n">element_ids</span><span class="p">)</span>

        <span class="n">missing</span> <span class="o">=</span> <span class="n">element_ids</span><span class="p">.</span><span class="nf">select</span> <span class="p">{</span> <span class="o">|</span><span class="nb">id</span><span class="o">|</span> <span class="n">counts</span><span class="p">.</span><span class="nf">none?</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">c</span><span class="p">.</span><span class="nf">element_id</span> <span class="o">==</span> <span class="nb">id</span> <span class="p">}</span> <span class="p">}</span>
        <span class="n">counts</span> <span class="o">+=</span> <span class="n">missing</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="no">NoteCount</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">element_id: </span><span class="n">m</span><span class="p">,</span> <span class="ss">count: </span><span class="mi">0</span><span class="p">)</span> <span class="p">}</span>
        <span class="n">counts</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">element_id</span><span class="p">:,</span> <span class="n">count</span><span class="ss">:|</span> <span class="p">[</span><span class="n">element_id</span><span class="p">,</span> <span class="n">count</span><span class="p">]</span> <span class="p">}.</span><span class="nf">to_h</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The repository’s code is all about working with the data. It does not know how to build the query for the data – that responsibility is the relation’s.</p>

<p>In short: relations run queries to get data out of a database, repositories define methods to work data returned by relations.</p>

<p>Back to Bix!</p>

<p>Let’s define our relation now at <code class="language-plaintext highlighter-rouge">lib/bix/relations/users.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Relations</span>
    <span class="k">class</span> <span class="nc">Users</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Relation</span><span class="p">[</span><span class="ss">:sql</span><span class="p">]</span>
      <span class="n">schema</span><span class="p">(</span><span class="ss">:users</span><span class="p">,</span> <span class="ss">infer: </span><span class="kp">true</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This relation class inherits from <code class="language-plaintext highlighter-rouge">ROM::Relation[:sql]</code>, and that will meant hat our relation is used to talk to an SQL database.</p>

<p>Inside the class itself, there’s a method called <code class="language-plaintext highlighter-rouge">schema</code>. This method says that our relation class is for a table called <code class="language-plaintext highlighter-rouge">users</code> and that we should <em>infer</em> the attributes for that schema – meaning ROM will look at the table to define the attributes for this relation.</p>

<p>This <em>almost</em> gets us past the error we saw previously:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ROM::ElementNotFoundError (:users doesn't exist in ROM::RelationRegistry registry)
</code></pre></div></div>

<p>However, we will need to register relations with our application’s database container. To do this, we can change <code class="language-plaintext highlighter-rouge">system/boot/persistence.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">boot</span><span class="p">(</span><span class="ss">:persistence</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
  <span class="n">start</span> <span class="k">do</span>
    <span class="n">config</span> <span class="o">=</span> <span class="n">app</span><span class="p">[</span><span class="s1">'db.config'</span><span class="p">]</span>
    <span class="n">config</span><span class="p">.</span><span class="nf">auto_registration</span><span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="nf">root</span> <span class="o">+</span> <span class="s2">"lib/bix"</span><span class="p">)</span>

    <span class="n">register</span><span class="p">(</span><span class="s1">'container'</span><span class="p">,</span> <span class="no">ROM</span><span class="p">.</span><span class="nf">container</span><span class="p">(</span><span class="n">app</span><span class="p">[</span><span class="s1">'db.config'</span><span class="p">]))</span>
  <span class="k">end</span>
<span class="k">end</span>

</code></pre></div></div>

<p>This file will now automatically register this relation under <code class="language-plaintext highlighter-rouge">lib/bix</code>, and any other ROM things we add in later. This means that our <code class="language-plaintext highlighter-rouge">User</code> repository will be able to find the <code class="language-plaintext highlighter-rouge">Users</code> relation.</p>

<p>Let’s run <code class="language-plaintext highlighter-rouge">bin/console</code> again and try working with our repository again:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; user_repo = Bix::Repos::UserRepo.new(Bix::Application['container'])
&gt;&gt; user_repo.all
NoMethodError (undefined method `all' for #&lt;Bix::Repos::User struct_namespace=ROM::Struct auto_struct=true&gt;)
</code></pre></div></div>

<p>Oops! Repositores are intentionally bare-bones in ROM; they do not come with very many methods at all. Let’s exit the console and then we’ll define some methods on our repository. While we’re here, we’ll add a method for finding all the users, and one for creating users. Let’s open <code class="language-plaintext highlighter-rouge">lib/bix/repos/user_repo.rb</code> and add these methods:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Repos</span>
    <span class="k">class</span> <span class="nc">UserRepo</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Repository</span><span class="p">[</span><span class="ss">:users</span><span class="p">]</span>
      <span class="n">commands</span> <span class="ss">:create</span><span class="p">,</span>
        <span class="ss">use: :timestamps</span><span class="p">,</span>
        <span class="ss">plugins_options: </span><span class="p">{</span>
          <span class="ss">timestamps: </span><span class="p">{</span>
            <span class="ss">timestamps: </span><span class="sx">%i(created_at updated_at)</span>
          <span class="p">}</span>
        <span class="p">}</span>

      <span class="k">def</span> <span class="nf">all</span>
        <span class="n">users</span><span class="p">.</span><span class="nf">to_a</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">commands</code> class method defines built-in commands that we can use on our repository. ROM comes with three: <code class="language-plaintext highlighter-rouge">:create</code>, <code class="language-plaintext highlighter-rouge">:update</code> and <code class="language-plaintext highlighter-rouge">:delete</code>.</p>

<p>This one tells ROM that we want a method called <code class="language-plaintext highlighter-rouge">create</code> that will let us create new records. The <code class="language-plaintext highlighter-rouge">use :timestamps</code> at the end tells ROM that we want <code class="language-plaintext highlighter-rouge">create</code> to set <code class="language-plaintext highlighter-rouge">created_at</code> and <code class="language-plaintext highlighter-rouge">updated_at</code> when our records are created.</p>

<p>The <code class="language-plaintext highlighter-rouge">all</code> method here calls the <code class="language-plaintext highlighter-rouge">users</code> relation, and the <code class="language-plaintext highlighter-rouge">to_a</code> will run a query to fetch all of the users.</p>

<p>With both of these things in place, let’s now create and retrieve a user from the database through <code class="language-plaintext highlighter-rouge">bin/console</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user_repo = Bix::Repos::UserRepo.new(Bix::Application['container'])
user_repo.create(first_name: "Ryan", last_name: "Bigg", age: 32)
=&gt; #&lt;ROM::Struct::User id=1 first_name="Ryan" last_name="Bigg" age=32 ...&gt;

user_repo.all
=&gt; [#&lt;ROM::Struct::User id=1 first_name="Ryan" last_name="Bigg" age=32 ...&gt;]
</code></pre></div></div>

<p>Hooray! We have now been able to add a record and retrieve it. We have now set up quite a few components for our application:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">config/boot.rb</code> - Requires boot-level pieces of our application – such as Bundler and <code class="language-plaintext highlighter-rouge">dotenv</code></li>
  <li><code class="language-plaintext highlighter-rouge">config/application.rb</code> - Defines a Container for our application’s configuration</li>
  <li><code class="language-plaintext highlighter-rouge">system/boot/db.rb</code> - Specifies how our application connects to a database</li>
  <li><code class="language-plaintext highlighter-rouge">system/boot/persistence.rb</code> - Defines a ROM container that defines how the ROM pieces of our application connect to and interact with our database</li>
  <li><code class="language-plaintext highlighter-rouge">lib/bix/relations/users.rb</code> - Defines a class that can contain query logic for our <code class="language-plaintext highlighter-rouge">users</code> table</li>
  <li><code class="language-plaintext highlighter-rouge">lib/bix/repos/user_repo.rb</code> - A class that contains methods for interacting with our relation, allowing us to create + retrieve data from the databse.</li>
</ul>

<p>ROM and Dry separate our application into small, clearly defined pieces with individual responsibilities. While this setup cost feels large <em>now</em>, it’s a cost that we’re only going to be paying once; Setup cost is one-time, maintenance cost is forever.</p>

<h3 id="entities">Entities</h3>

<p>Now what happens if we want to add a custom method on to the objects returned by our database? Let’s say, a <code class="language-plaintext highlighter-rouge">full_name</code> method that would let us combine a user’s <code class="language-plaintext highlighter-rouge">first_name</code> and <code class="language-plaintext highlighter-rouge">last_name</code> attributes. Currently these are <code class="language-plaintext highlighter-rouge">ROM::Struct::User</code> objects, returned from ROM. There isn’t a place to define these methods in our application yet. So let’s create one!</p>

<p>To be able to define custom methods like <code class="language-plaintext highlighter-rouge">full_name</code> for users, we’re going to need a class. For this, ROM has a feature called <em>entities</em>. These are simple classes that can be considered as super-powered structs. Let’s build a new one by creating it in a new directory called <code class="language-plaintext highlighter-rouge">lib/bix/entities</code>, and calling it <code class="language-plaintext highlighter-rouge">user.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Struct</span>
    <span class="k">def</span> <span class="nf">full_name</span>
      <span class="s2">"</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">"</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Ignoring <a href="https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/">the falsehoods programmers believe about names</a>, this method will combine a user’s <code class="language-plaintext highlighter-rouge">first_name</code> and <code class="language-plaintext highlighter-rouge">last_name</code> attributes.</p>

<p>To use this class though, we need to configure the repository further over in <code class="language-plaintext highlighter-rouge">lib/bix/repos/user_repo.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Repos</span>
    <span class="k">class</span> <span class="nc">UserRepo</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Repository</span><span class="p">[</span><span class="ss">:users</span><span class="p">]</span>
      <span class="n">struct_namespace</span> <span class="no">Bix</span>

      <span class="o">...</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">struct_namespace</code> method tells the repository that when it builds structs, it can use the <code class="language-plaintext highlighter-rouge">Bix</code> namespace for those structs. The class name will be the singularised version of the relation specified in the <code class="language-plaintext highlighter-rouge">ROM::Repository</code> class inheritance: <code class="language-plaintext highlighter-rouge">Bix::User</code>.</p>

<p>Let’s go back into <code class="language-plaintext highlighter-rouge">bin/console</code> and try this out:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">user_repo</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Repos</span><span class="o">::</span><span class="no">UserRepo</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">[</span><span class="s1">'container'</span><span class="p">])</span>
<span class="n">user_repo</span><span class="p">.</span><span class="nf">all</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">full_name</span>
<span class="c1"># =&gt; "Ryan Bigg"</span>
</code></pre></div></div>

<p>Great! We’re now able to have a class that contains custom Ruby logic for the data that is returned from the database.</p>

<h2 id="specifying-the-container-automatically">Specifying the container automatically</h2>

<p>When we initialize our repository, we have to use some really long code to do that:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">user_repo</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Repos</span><span class="o">::</span><span class="no">UserRepo</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">Bix</span><span class="o">::</span><span class="no">Application</span><span class="p">[</span><span class="s1">'container'</span><span class="p">])</span>
</code></pre></div></div>

<p>What if we were able to do this instead?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">user_repo</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Repos</span><span class="o">::</span><span class="no">UserRepo</span><span class="p">.</span><span class="nf">new</span>
</code></pre></div></div>

<p>Wouldn’t that be much nicer?</p>

<p>Well, with another one of the <code class="language-plaintext highlighter-rouge">dry-rb</code> set of gems, we can indeed do this. The last gem that we’ll use in this part is one called <code class="language-plaintext highlighter-rouge">dry-auto_inject</code>. This gem will make it so that the <em>dependency</em> of the <em>database container</em> will be <em>auto(matically) injected</em> into the <code class="language-plaintext highlighter-rouge">Bix::Repos::User</code> class.</p>

<p>Let’s get started with this gem by adding the <code class="language-plaintext highlighter-rouge">dry-auto_inject</code> gem into our <code class="language-plaintext highlighter-rouge">Gemfile</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'dry-auto_inject'</span>
</code></pre></div></div>

<p>Then we’ll run <code class="language-plaintext highlighter-rouge">bundle install</code> to install this gem.</p>

<p>Next up we’ll add two lines to <code class="language-plaintext highlighter-rouge">config/application.rb</code>. The first one is to require this gem:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s2">"dry/auto_inject"</span>
</code></pre></div></div>

<p>Next, we’ll need to define a new constant in this file:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Dry</span><span class="o">::</span><span class="no">System</span><span class="o">::</span><span class="no">Container</span>
    <span class="o">...</span>
  <span class="k">end</span>

  <span class="no">Import</span> <span class="o">=</span> <span class="no">Dry</span><span class="o">::</span><span class="no">AutoInject</span><span class="p">(</span><span class="no">Application</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">Import</code> constant will allow us to import (or <em>inject</em>) anything registered with our application into other parts. Let’s see this in action now by adding this line to <code class="language-plaintext highlighter-rouge">lib/repos/user_repo.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Bix</span>
  <span class="k">module</span> <span class="nn">Repos</span>
    <span class="k">class</span> <span class="nc">UserRepo</span> <span class="o">&lt;</span> <span class="no">ROM</span><span class="o">::</span><span class="no">Repository</span><span class="p">[</span><span class="ss">:users</span><span class="p">]</span>
      <span class="kp">include</span> <span class="no">Import</span><span class="p">[</span><span class="s2">"container"</span><span class="p">]</span>

      <span class="o">...</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This line will use the <code class="language-plaintext highlighter-rouge">Import</code> constant to inject the <code class="language-plaintext highlighter-rouge">container</code> dependency into this class. This works by passing in a <code class="language-plaintext highlighter-rouge">container</code> keyword argument to <code class="language-plaintext highlighter-rouge">initialize</code> for this class.</p>

<p>Let’s try initializing a repository again in <code class="language-plaintext highlighter-rouge">bin/console</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">user_repo</span> <span class="o">=</span> <span class="no">Bix</span><span class="o">::</span><span class="no">Repos</span><span class="o">::</span><span class="no">UserRepo</span><span class="p">.</span><span class="nf">new</span>
<span class="c1"># =&gt; #&lt;Bix::Repos::User struct_namespace=Bix auto_struct=true&gt;</span>
<span class="n">user_repo</span><span class="p">.</span><span class="nf">all</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">full_name</span>
<span class="c1"># =&gt; "Ryan Bigg"</span>
</code></pre></div></div>

<p>Everything seems to be working correctly!</p>

<h3 id="summary">Summary</h3>

<p>In this first part of the ROM + Dry showcase, we’ve seen how to setup a small application that can talk to a database.</p>

<p>We have created files that allow us to bootstrap our application’s environment – <code class="language-plaintext highlighter-rouge">config/boot.rb</code> and <code class="language-plaintext highlighter-rouge">config/application.rb</code>. Along with this, we have created <code class="language-plaintext highlighter-rouge">system/boot</code>, a directory that contains system-level dependencies for our application’s boot process.</p>

<p>In the <code class="language-plaintext highlighter-rouge">lib</code> directory, we have setup three directories:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">entities</code> - Classes that represent specific data types returned from our database.</li>
  <li><code class="language-plaintext highlighter-rouge">relations</code> - Classes that can contain custom methods for querying the database</li>
  <li><code class="language-plaintext highlighter-rouge">repos</code> - Classes that provide a place for defining a public API between relations and our application code</li>
</ul>

<p>This separation of concerns across our application will make it easier to work with in the long run. One more time: the setup cost is paid <em>once</em>, the maintenance cost is paid <em>forever</em>.</p>

<p>In the last part of this guide, we used the <code class="language-plaintext highlighter-rouge">dry-auto_inject</code> gem to inject the ROM container dependency into our <code class="language-plaintext highlighter-rouge">Repos::User</code> class. This will allow us to reduce the code that we need to write whenever we want to initialize the repository.</p>

<p>In the next part, we’re going to look at how to use more dry-rb gems to add validations to our application, and we’ll see another benefit of <code class="language-plaintext highlighter-rouge">dry-auto_inject</code> demonstrated.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Getting Started with Rails: Extended Edition</title>
   <link href="http://ryanbigg.com/2020/01/getting-started-with-rails-extended-edition"/>
   <updated>2020-01-19T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2020/01/getting-started-with-rails-extended-edition</id>
   <content type="html"><![CDATA[<p>This guide is an <em>extended edition</em> of the offical <a href="https://guides.rubyonrails.org/getting_started.html">Getting Started with Rails</a> guide.</p>

<p>This extended version has the following additions:</p>

<ul>
  <li>A re-worked introduction to routing, showing clearer matching between routes and controllers.</li>
  <li>Creates and uses a model right after building the first route.</li>
  <li>Examples of HTML output generated by Rails helpers such as <code class="language-plaintext highlighter-rouge">link_to</code>, <code class="language-plaintext highlighter-rouge">form_with</code> and <code class="language-plaintext highlighter-rouge">text_field</code>.</li>
  <li>Beef up explainations of routing helpers, especially <code class="language-plaintext highlighter-rouge">article_comment_path</code>.</li>
  <li>Beef up explainations in general.</li>
</ul>

<hr />

<p>This guide covers getting up and running with Ruby on Rails.</p>

<p>After reading this guide, you will know:</p>

<ul>
  <li>How to install Rails, create a new Rails application, and connect your
application to a database.</li>
  <li>The general layout of a Rails application.</li>
  <li>The basic principles of MVC (Model, View, Controller) and RESTful design.</li>
  <li>How to quickly generate the starting pieces of a Rails application.</li>
</ul>

<hr />

<h2 id="guide-assumptions">Guide Assumptions</h2>

<p>This guide is designed for beginners who want to get started with a Rails
application from scratch. It does not assume that you have any prior experience
with Rails.</p>

<p>Rails is a web application framework running on the Ruby programming language.
If you have no prior experience with Ruby, you will find a very steep learning
curve diving straight into Rails. There are several curated lists of online resources
for learning Ruby:</p>

<ul>
  <li><a href="https://www.ruby-lang.org/en/documentation/">Official Ruby Programming Language website</a></li>
  <li><a href="https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books.md#ruby">List of Free Programming Books</a></li>
</ul>

<p>Be aware that some resources, while still excellent, cover versions of Ruby as old as
1.6, and commonly 1.8, and will not include some syntax that you will see in day-to-day
development with Rails.</p>

<h2 id="what-is-rails">What is Rails?</h2>

<p>Rails is a web application development framework written in the Ruby programming language.
It is designed to make programming web applications easier by making assumptions
about what every developer needs to get started. It allows you to write less
code while accomplishing more than many other languages and frameworks.
Experienced Rails developers also report that it makes web application
development more fun.</p>

<p>Rails is opinionated software. It makes the assumption that there is a “best”
way to do things, and it’s designed to encourage that way - and in some cases to
discourage alternatives. If you learn “The Rails Way” you’ll probably discover a
tremendous increase in productivity. If you persist in bringing old habits from
other languages to your Rails development, and trying to use patterns you
learned elsewhere, you may have a less happy experience.</p>

<p>The Rails philosophy includes two major guiding principles:</p>

<ul>
  <li><strong>Don’t Repeat Yourself:</strong> DRY is a principle of software development which
states that “Every piece of knowledge must have a single, unambiguous, authoritative
representation within a system”. By not writing the same information over and over
again, our code is more maintainable, more extensible, and less buggy.</li>
  <li><strong>Convention Over Configuration:</strong> Rails has opinions about the best way to do many
things in a web application, and defaults to this set of conventions, rather than
require that you specify minutiae through endless configuration files.</li>
</ul>

<h2 id="creating-a-new-rails-project">Creating a New Rails Project</h2>
<p>The best way to read this guide is to follow it step by step. All steps are
essential to run this example application and no additional code or steps are
needed.</p>

<p>By following along with this guide, you’ll create a Rails project called
<code class="language-plaintext highlighter-rouge">blog</code>, a (very) simple weblog. Before you can start building the application,
you need to make sure that you have Rails itself installed.</p>

<p>TIP: The examples below use <code class="language-plaintext highlighter-rouge">$</code> to represent your terminal prompt in a UNIX-like OS,
though it may have been customized to appear differently. If you are using Windows,
your prompt will look something like <code class="language-plaintext highlighter-rouge">c:\source_code&gt;</code></p>

<h3 id="installing-rails">Installing Rails</h3>

<p>Before you install Rails, you should check to make sure that your system has the
proper prerequisites installed. These include Ruby and SQLite3.</p>

<p>Open up a command line prompt. On macOS open Terminal.app, on Windows choose
“Run” from your Start menu and type ‘cmd.exe’. Any commands prefaced with a
dollar sign <code class="language-plaintext highlighter-rouge">$</code> should be run in the command line. Verify that you have a
current version of Ruby installed:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ruby <span class="nt">-v</span>
ruby 2.7.0
</code></pre></div></div>

<p>Rails requires Ruby version 2.5.0 or later. If the version number returned is
less than that number (such as 2.3.7, or 1.8.7), you’ll need to install a fresh copy of Ruby.</p>

<p>TIP: To quickly install Ruby and Ruby on Rails on your system in Windows, you can use
<a href="http://railsinstaller.org">Rails Installer</a>. For more installation methods for most
Operating Systems take a look at <a href="https://www.ruby-lang.org/en/documentation/installation/">ruby-lang.org</a>.</p>

<p>If you are working on Windows, you should also install the
<a href="https://rubyinstaller.org/downloads/">Ruby Installer Development Kit</a>.</p>

<p>You will also need an installation of the SQLite3 database.
Many popular UNIX-like OSes ship with an acceptable version of SQLite3.
On Windows, if you installed Rails through Rails Installer, you
already have SQLite installed. Others can find installation instructions
at the <a href="https://www.sqlite.org">SQLite3 website</a>.
Verify that it is correctly installed and in your PATH:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>sqlite3 <span class="nt">--version</span>
</code></pre></div></div>

<p>The program should report its version.</p>

<p>To install Rails, use the <code class="language-plaintext highlighter-rouge">gem install</code> command provided by RubyGems:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gem <span class="nb">install </span>rails
</code></pre></div></div>

<p>To verify that you have everything installed correctly, you should be able to
run the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails <span class="nt">--version</span>
</code></pre></div></div>

<p>If it says something like “Rails 6.0.0”, you are ready to continue.</p>

<h3 id="creating-the-blog-application">Creating the Blog Application</h3>

<p>Rails comes with a number of scripts called generators that are designed to make
your development life easier by creating everything that’s necessary to start
working on a particular task. One of these is the new application generator,
which will provide you with the foundation of a fresh Rails application so that
you don’t have to write it yourself.</p>

<p>To use this generator, open a terminal, navigate to a directory where you have
rights to create files, and type:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>rails new blog
</code></pre></div></div>

<p>This will create a Rails application called Blog in a <code class="language-plaintext highlighter-rouge">blog</code> directory and
install the gem dependencies that are already mentioned in <code class="language-plaintext highlighter-rouge">Gemfile</code> using
<code class="language-plaintext highlighter-rouge">bundle install</code>.</p>

<p>NOTE: If you’re using Windows Subsystem for Linux then there are currently some
limitations on file system notifications that mean you should disable the <code class="language-plaintext highlighter-rouge">spring</code>
and <code class="language-plaintext highlighter-rouge">listen</code> gems which you can do by running <code class="language-plaintext highlighter-rouge">rails new blog --skip-spring --skip-listen</code>.</p>

<p>TIP: You can see all of the command line options that the Rails application
builder accepts by running <code class="language-plaintext highlighter-rouge">rails new -h</code>.</p>

<p>After you create the blog application, switch to its folder:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>blog
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">blog</code> directory has a number of auto-generated files and folders that make
up the structure of a Rails application. Most of the work in this tutorial will
happen in the <code class="language-plaintext highlighter-rouge">app</code> folder, but here’s a basic rundown on the function of each
of the files and folders that Rails created by default:</p>

<table>
  <thead>
    <tr>
      <th>File/Folder</th>
      <th>Purpose</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>app/</td>
      <td>Contains the controllers, models, views, helpers, mailers, channels, jobs, and assets for your application. You’ll focus on this folder for the remainder of this guide.</td>
    </tr>
    <tr>
      <td>bin/</td>
      <td>Contains the rails script that starts your app and can contain other scripts you use to setup, update, deploy, or run your application.</td>
    </tr>
    <tr>
      <td>config/</td>
      <td>Configure your application’s routes, database, and more. This is covered in more detail in <a href="configuring.html">Configuring Rails Applications</a>.</td>
    </tr>
    <tr>
      <td>config.ru</td>
      <td>Rack configuration for Rack based servers used to start the application. For more information about Rack, see the <a href="https://rack.github.io/">Rack website</a>.</td>
    </tr>
    <tr>
      <td>db/</td>
      <td>Contains your current database schema, as well as the database migrations.</td>
    </tr>
    <tr>
      <td>Gemfile<br />Gemfile.lock</td>
      <td>These files allow you to specify what gem dependencies are needed for your Rails application. These files are used by the Bundler gem. For more information about Bundler, see the <a href="https://bundler.io">Bundler website</a>.</td>
    </tr>
    <tr>
      <td>lib/</td>
      <td>Extended modules for your application.</td>
    </tr>
    <tr>
      <td>log/</td>
      <td>Application log files.</td>
    </tr>
    <tr>
      <td>package.json</td>
      <td>This file allows you to specify what npm dependencies are needed for your Rails application. This file is used by Yarn. For more information about Yarn, see the <a href="https://yarnpkg.com/lang/en/">Yarn website</a>.</td>
    </tr>
    <tr>
      <td>public/</td>
      <td>The only folder seen by the world as-is. Contains static files and compiled assets.</td>
    </tr>
    <tr>
      <td>Rakefile</td>
      <td>This file locates and loads tasks that can be run from the command line. The task definitions are defined throughout the components of Rails. Rather than changing <code class="language-plaintext highlighter-rouge">Rakefile</code>, you should add your own tasks by adding files to the <code class="language-plaintext highlighter-rouge">lib/tasks</code> directory of your application.</td>
    </tr>
    <tr>
      <td>README.md</td>
      <td>This is a brief instruction manual for your application. You should edit this file to tell others what your application does, how to set it up, and so on.</td>
    </tr>
    <tr>
      <td>storage/</td>
      <td>Active Storage files for Disk Service. This is covered in <a href="active_storage_overview.html">Active Storage Overview</a>.</td>
    </tr>
    <tr>
      <td>test/</td>
      <td>Unit tests, fixtures, and other test apparatus. These are covered in <a href="testing.html">Testing Rails Applications</a>.</td>
    </tr>
    <tr>
      <td>tmp/</td>
      <td>Temporary files (like cache and pid files).</td>
    </tr>
    <tr>
      <td>vendor/</td>
      <td>A place for all third-party code. In a typical Rails application this includes vendored gems.</td>
    </tr>
    <tr>
      <td>.gitignore</td>
      <td>This file tells git which files (or patterns) it should ignore. See <a href="https://help.github.com/articles/ignoring-files">GitHub - Ignoring files</a> for more info about ignoring files.</td>
    </tr>
    <tr>
      <td>.ruby-version</td>
      <td>This file contains the default Ruby version.</td>
    </tr>
  </tbody>
</table>

<h2 id="hello-rails">Hello, Rails!</h2>

<p>To begin with, let’s get some text up on screen quickly. To do this, you need to
get your Rails application server running.</p>

<h3 id="starting-up-the-web-server">Starting up the Web Server</h3>

<p>You actually have a functional Rails application already. To see it, you need to
start a web server on your development machine. You can do this by running the
following in the <code class="language-plaintext highlighter-rouge">blog</code> directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bin/rails server
</code></pre></div></div>

<p>TIP: If you are using Windows, you have to pass the scripts under the <code class="language-plaintext highlighter-rouge">bin</code>
folder directly to the Ruby interpreter e.g. <code class="language-plaintext highlighter-rouge">ruby bin\rails server</code>.</p>

<p>TIP: JavaScript asset compression requires you
have a JavaScript runtime available on your system, in the absence
of a runtime you will see an <code class="language-plaintext highlighter-rouge">execjs</code> error during asset compression.
Usually macOS and Windows come with a JavaScript runtime installed.
<code class="language-plaintext highlighter-rouge">therubyrhino</code> is the recommended runtime for JRuby users and is added by
default to the <code class="language-plaintext highlighter-rouge">Gemfile</code> in apps generated under JRuby. You can investigate
all the supported runtimes at <a href="https://github.com/rails/execjs#readme">ExecJS</a>.</p>

<p>This will fire up Puma, a web server distributed with Rails by default. To see
your application in action, open a browser window and navigate to
<a href="http://localhost:3000">http://localhost:3000</a>. You should see the Rails default information page:</p>

<p><img src="/images/getting_started/rails_welcome.png" alt="Yay! You're on Rails! screenshot" /></p>

<p>TIP: To stop the web server, hit Ctrl+C in the terminal window where it’s
running. To verify the server has stopped you should see your command prompt
cursor again. For most UNIX-like systems including macOS this will be a
dollar sign <code class="language-plaintext highlighter-rouge">$</code>. In development mode, Rails does not generally require you to
restart the server; changes you make in files will be automatically picked up by
the server.</p>

<p>The “Yay! You’re on Rails!” page is the <em>smoke test</em> for a new Rails
application: it makes sure that you have your software configured correctly
enough to serve a page.</p>

<h3 id="say-hello-rails">Say “Hello”, Rails</h3>

<p>To get Rails saying “Hello”, you need to create at minimum a <em>route</em>, a <em>controller</em> and a <em>view</em>.</p>

<p>A controller’s purpose is to receive specific requests for the application.
<em>Routing</em> decides which controller receives which requests. Often, there is more
than one route to each controller, and different routes can be served by
different <em>actions</em>. Each action’s purpose is to collect information to provide
it to a view.</p>

<p>A view’s purpose is to display this information in a human readable format. An
important distinction to make is that the <em>controller</em>, not the view,
is where information is collected. The view should just display that information.
By default, view templates are written in a language called eRuby (Embedded
Ruby) which is processed by the request cycle in Rails before being sent to the
user.</p>

<p>When we make a request to our Rails applications, we do so by making a request to a particular <em>route</em>. So to start off, we’ll start with a route. Let’s create one now in <code class="language-plaintext highlighter-rouge">config/routes.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">get</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#index"</span>

  <span class="c1"># For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This is your application’s <em>routing file</em> which holds entries in a special
<a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL (domain-specific language)</a> that tells Rails how to connect incoming requests to
controllers and actions.</p>

<p>The line that we have just added says that we are going to match a <code class="language-plaintext highlighter-rouge">GET /welcome</code> request to <code class="language-plaintext highlighter-rouge">welcome#index</code>. This string passed as the <code class="language-plaintext highlighter-rouge">to</code> option represents the <em>controller</em> and <em>action</em> that will be responsible for handling this request.</p>

<p>Controllers are classes that group together common methods for handling a particular <em>resource</em>. The methods inside controllers are given the name “actions”, as they <em>act upon</em> requests as they come in.</p>

<p>To create a new controller, you will need to run the “controller” generator and
tell it you want a controller called “articles” with an action called “index”,
just like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bin/rails generate controller articles index
</code></pre></div></div>

<p>Rails will create several files and a route for you.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>create  app/controllers/articles_controller.rb
  route  get <span class="s1">'articles/index'</span>
invoke  erb
create    app/views/articles
create    app/views/articles/index.html.erb
invoke  test_unit
create    <span class="nb">test</span>/controllers/articles_controller_test.rb
invoke  helper
create    app/helpers/articles_helper.rb
invoke    test_unit
invoke  assets
invoke    scss
create      app/assets/stylesheets/articles.scss
</code></pre></div></div>

<p>Most important of these are is of course the controller, located at
<code class="language-plaintext highlighter-rouge">app/controllers/articles_controller.rb</code>.</p>

<p>Let’s look at that controller now:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArticlesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This controller defines a single action, or “method” in common Ruby terms, called <code class="language-plaintext highlighter-rouge">index</code>. This action is where we would define any logic that we would want to happen when a request comes in to this action. Right at this moment, we don’t want this action to do anything, and so we’ll keep it blank for now.</p>

<p>When an action is left blank like this, Rails will default to rendering a view that matches the name of the controller, and the name of the action. That view is going to be <code class="language-plaintext highlighter-rouge">app/views/articles/index.html.erb</code>.</p>

<p>Open the <code class="language-plaintext highlighter-rouge">app/views/articles/index.html.erb</code> file in your text editor. Delete all
of the existing code in the file, and replace it with the following single line
of code:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Hello, Rails!<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div>

<p>If we go back to our browser and make a request to <a href="http://localhost:3000/articles">http://localhost:3000/articles</a>, we’ll see our text appear on the page.</p>

<h3 id="setting-the-application-home-page">Setting the Application Home Page</h3>

<p>Now that we have made the route, controller, action and view, let’s make a small change to our routes. In this application, we’re going to change it so that our message appears at <a href="http://localhost:3000/">http://localhost:3000/</a> and not just <a href="http://localhost:3000/articles">http://localhost:3000/articles</a>. At the moment, at <a href="http://localhost:3000">http://localhost:3000</a> it still says “Yay! You’re on Rails!”.</p>

<p>To change this, we need to tell our routes file where the <em>root path</em> of our application is.</p>

<p>Open the file <code class="language-plaintext highlighter-rouge">config/routes.rb</code> in your editor.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">get</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#index"</span>
  <span class="c1"># For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Underneath the line that is there, add this line:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">root</span> <span class="ss">to: </span><span class="s2">"articles#index"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>A slightly shorter way of writing the same thing is:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">get</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#index"</span>
  <span class="n">root</span> <span class="s2">"articles#index"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">root</code> method defines a <em>root path</em> for our application. The <code class="language-plaintext highlighter-rouge">root</code> method tells Rails to map requests to the root of the application to the <code class="language-plaintext highlighter-rouge">ArticlesController</code> <code class="language-plaintext highlighter-rouge">index</code> action.</p>

<p>Launch the web server again if you stopped it to generate the controller (<code class="language-plaintext highlighter-rouge">rails
server</code>) and navigate to <a href="http://localhost:3000">http://localhost:3000</a> in your browser. You’ll see the
“Hello, Rails!” message you put into <code class="language-plaintext highlighter-rouge">app/views/articles/index.html.erb</code>,
indicating that this new route is indeed going to <code class="language-plaintext highlighter-rouge">ArticleController</code>’s <code class="language-plaintext highlighter-rouge">index</code>
action and is rendering the view correctly.</p>

<p>TIP: For more information about routing, refer to <a href="routing.html">Rails Routing from the Outside In</a>.</p>

<h2 id="creating-a-model">Creating a model</h2>

<p>So far, we have seen routes, controllers, actions and views within our Rails application. All of these are conventional parts of Rails applications and it is done this way to follow the MVC pattern. The MVC pattern is an application design pattern which makes it easy to separate the different responsibilities of applications into easy to reason about pieces.</p>

<p>So with “MVC”, you might guess that the “V” stands for “View” and the “C” stands for controller, but you might have trouble guessing what the “M” stands for. This next section is all about that “M” part, the <em>model</em>.</p>

<p>A model is a class that is used to represent data in our application. In a plain-Ruby application, you might have a class defined like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Article</span>
  <span class="nb">attr_reader</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">title</span><span class="p">:,</span> <span class="n">body</span><span class="p">:)</span>
    <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
    <span class="vi">@body</span> <span class="o">=</span> <span class="n">body</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Models in a Rails application are designed for this purpose too: to represent particular data.</p>

<p>Models have another purpose in a Rails application too though. They’re also used to interact with the application’s database. In this section, we’re going to use a model to put data into our database and to pull that data back out.</p>

<p>To start with, we’re going to need to generate a model. We can do that with the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bin/rails g model article title:string body:text
</code></pre></div></div>

<p>NOTE: The model name here is <em>singular</em>, because model classes are classes that are used to represent single instances. To help remember this rule, in a Ruby application to start building a new object, you would define the class as <code class="language-plaintext highlighter-rouge">Article</code>, and then do <code class="language-plaintext highlighter-rouge">Article.new</code>, not <code class="language-plaintext highlighter-rouge">Articles</code> and <code class="language-plaintext highlighter-rouge">Articles.new</code>.</p>

<p>When this command runs, it will generate the following files:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>invoke  active_record
create    db/migrate/[timestamp]_create_articles.rb
create    app/models/article.rb
invoke    test_unit
create      <span class="nb">test</span>/models/article_test.rb
create      <span class="nb">test</span>/fixtures/articles.yml
</code></pre></div></div>

<p>The two files we’ll focus on here are the <em>migration</em> (the file at <code class="language-plaintext highlighter-rouge">db/migrate</code>) and the <em>model</em>.</p>

<p>A migration is used to alter the structure of our database, and it is written in Ruby. Let’s look at this file now, <code class="language-plaintext highlighter-rouge">db/migrate/[timestamp]_create_articles.rb</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreateArticles</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="p">[</span><span class="mf">6.0</span><span class="p">]</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:articles</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="ss">:title</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">text</span> <span class="ss">:body</span>

      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This file contains Ruby code to create a table within our application’s database. Migrations are written in Ruby so that they can be database-agnostic – regardless of what database you use with Rails, you’ll always write migrations in Ruby.</p>

<p>Inside this migration file, there’s a <code class="language-plaintext highlighter-rouge">create_table</code> method that defines how the <code class="language-plaintext highlighter-rouge">articles</code> table should be constructed. This method will create a table in our database that contains an <code class="language-plaintext highlighter-rouge">id</code> auto-incrementing primary key. That means that the first record in our table will have an <code class="language-plaintext highlighter-rouge">id</code> of 1, and the next <code class="language-plaintext highlighter-rouge">id</code> of 2, and so on.  Rails assumes by default this is the behaviour we want, and so it does this for us.</p>

<p>Inside the block for <code class="language-plaintext highlighter-rouge">create_table</code>, we have two fields, <code class="language-plaintext highlighter-rouge">title</code> and <code class="language-plaintext highlighter-rouge">body</code>. These were added to the migration automatically because we put them at the end of the <code class="language-plaintext highlighter-rouge">rails g model</code> call:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bin/rails g model article title:string body:text
</code></pre></div></div>

<p>On the last line of the block is <code class="language-plaintext highlighter-rouge">t.timestamps</code>. This method defines two additional fields in our table, called <code class="language-plaintext highlighter-rouge">created_at</code> and <code class="language-plaintext highlighter-rouge">updated_at</code>. When we create or update model objects, these fields will be set respectively.</p>

<p>The structure of our table will look like this:</p>

<table>
  <thead>
    <tr>
      <th>id</th>
      <th>title</th>
      <th>body</th>
      <th>created_at</th>
      <th>updated_at</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>To create this table in our application’s database, we can run this command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails db:migrate
</code></pre></div></div>

<p>This command will show us output indicating that the table was created:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>== 20200118233119 CreateArticles: migrating ===================================
-- create_table(:articles)
   -&gt; 0.0018s
== 20200118233119 CreateArticles: migrated (0.0018s) ==========================
</code></pre></div></div>

<p>Now that we have a table in our application’s database, we can use the model to interact with this table.</p>

<p>To use the model, we’ll use a feature of Rails called the <em>console</em>. The console allows us write code like we might in <code class="language-plaintext highlighter-rouge">irb</code>, but the code of our application is available there too. Let’s launch the console with this command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails console
</code></pre></div></div>

<p>Or, a shorter version:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails c
</code></pre></div></div>

<p>When we launch this, we should see an irb prompt:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Loading development environment (Rails 6.0.2.1)
irb(main):001:0&gt;
</code></pre></div></div>

<p>In this prompt, we can use our model to initialize a new <code class="language-plaintext highlighter-rouge">Article</code> object:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Hello Rails"</span><span class="p">,</span> <span class="ss">body: </span><span class="s2">"I am on Rails!"</span><span class="p">)</span>
</code></pre></div></div>

<p>When we use <code class="language-plaintext highlighter-rouge">Article.new</code>, it will initialze a new <code class="language-plaintext highlighter-rouge">Article</code> object in the console. This object is not saved to the database at all, it’s just available in the console so far. To save the object to the database, we need to call <code class="language-plaintext highlighter-rouge">save</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">article</span><span class="p">.</span><span class="nf">save</span>
</code></pre></div></div>

<p>This command will show us the following output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(0.1ms)  begin transaction
Article Create (0.4ms)  INSERT INTO "articles" ("title", "body", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["title", "Hello Rails"], ["body", "I am on Rails!"], ["created_at", "2020-01-18 23:47:30.734416"], ["updated_at", "2020-01-18 23:47:30.734416"]]
(0.9ms)  commit transaction
=&gt; true
</code></pre></div></div>

<p>This output shows an <code class="language-plaintext highlighter-rouge">INSERT INTO "articles"...</code> database query. This means that our article has been successfully inserted into our table.</p>

<p>If we take a look at our <code class="language-plaintext highlighter-rouge">article</code> object again, an interesting thing has happened:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">article</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Article id: 1, title: "Hello Rails", body: "I am on Rails!", created_at: "2020-01-18 23:47:30", updated_at: "2020-01-18 23:47:30"&gt;</span>
</code></pre></div></div>

<p>Our object now has the <code class="language-plaintext highlighter-rouge">id</code>, <code class="language-plaintext highlighter-rouge">created_at</code> and <code class="language-plaintext highlighter-rouge">updated_at</code> fields set. All of this happened automatically for us when we saved this article.</p>

<p>If we wanted to retrieve this article back from the database later on, we can do that with <code class="language-plaintext highlighter-rouge">find</code>, and pass that <code class="language-plaintext highlighter-rouge">id</code> as an argument:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">004</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Article id: 1, title: "Hello Rails", body: "I am on Rails!", created_at: "2020-01-18 23:47:30", updated_at: "2020-01-18 23:47:30"&gt;</span>
</code></pre></div></div>

<p>A shorter way to add articles into our database is to use <code class="language-plaintext highlighter-rouge">Article.create</code>, like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">005</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">Article</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">title: </span><span class="s2">"Post #2"</span><span class="p">,</span> <span class="ss">body: </span><span class="s2">"Still riding the Rails!"</span><span class="p">)</span>
</code></pre></div></div>

<p>This way, we don’t need to call <code class="language-plaintext highlighter-rouge">new</code> and then <code class="language-plaintext highlighter-rouge">save</code>.</p>

<p>Lastly, models provide a method to find all of their data:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">006</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">articles</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">all</span>
 <span class="c1">#&lt;ActiveRecord::Relation [</span>
   <span class="c1">#&lt;Article id: 1, title: "Hello Rails", body: "I am on Rails!", created_at: "2020-01-18 23:47:30", updated_at: "2020-01-18 23:47:30"&gt;,</span>
   <span class="c1">#&lt;Article id: 2, title: "Post #2", body: "Still riding the Rails!", created_at: "2020-01-18 23:53:45", updated_at: "2020-01-18 23:53:45"&gt;]&gt;</span>
</code></pre></div></div>

<p>This method returns an <code class="language-plaintext highlighter-rouge">ActiveRecord::Relation</code> object, which you can think of as a super-powered array. This array contains both of the topics that we have created so far.</p>

<p>As you can see, models are very helpful classes for interacting with databases within Rails applications. Models are the final piece of the “MVC” puzzle. Let’s look at how we can go about connecting all these pieces together into a cohesive whole.</p>

<h2 id="getting-up-and-running">Getting Up and Running</h2>

<p>Now that you’ve seen how to create a route, a controller, an action, a view and a model, let’s connect these pieces together.</p>

<p>Let’s go back to <code class="language-plaintext highlighter-rouge">app/controllers/articles_controller.rb</code> now. We’re going to change the <code class="language-plaintext highlighter-rouge">index</code> action here to use our model.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArticlesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@articles</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">all</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Controller actions are where we assemble all the data that will later be displayed in the <em>view</em>. In this <code class="language-plaintext highlighter-rouge">index</code> action, we’re calling <code class="language-plaintext highlighter-rouge">Article.all</code> which will make a query to our database and retrieve all of the articles, storing them in an instance variable: <code class="language-plaintext highlighter-rouge">@articles</code>.</p>

<p>We’re using an instance variable here for a very good reason: instance variables are automatically shared from controllers into views. So to use this <code class="language-plaintext highlighter-rouge">@articles</code> variable in our view to show all the articles, we can write this code in <code class="language-plaintext highlighter-rouge">app/views/articles/index.html.erb</code>:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Articles<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;ul&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@articles</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="p">.</span><span class="nf">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>We’ve now changed this file from using just HTML to using HTML and <em>ERB</em>. ERB is a language that we can use to run Ruby code.</p>

<p>There’s two types of ERB tag beginnings that we’re using here: <code class="language-plaintext highlighter-rouge">&lt;%</code> and <code class="language-plaintext highlighter-rouge">&lt;%=</code>. The <code class="language-plaintext highlighter-rouge">&lt;%</code> tag means to evalulate some Ruby code, while the <code class="language-plaintext highlighter-rouge">&lt;%=</code> means to evalulate that code, and then to output the return value from that code.</p>

<p>In this view, we do not want the output of <code class="language-plaintext highlighter-rouge">articles.each</code> to show, and so we use a <code class="language-plaintext highlighter-rouge">&lt;%</code>. But we do want each of the articles’ titles to appear, and so we use <code class="language-plaintext highlighter-rouge">&lt;%=</code>.</p>

<p>When we start an ERB tag with either <code class="language-plaintext highlighter-rouge">&lt;%</code> or <code class="language-plaintext highlighter-rouge">&lt;%=</code>, it can help to think “I am now writing Ruby, not HTML”. Anything you could write in a regular Ruby program, can go inside these ERB tags.</p>

<p>When the view is used by Rails, the embedded Ruby will be evalulated, and the page will show our list of articles. Let’s go to <a href="http://localhost:3000">http://localhost:3000</a> now and see the list of articles:</p>

<p><img src="/images/getting_started/article_list.png" alt="List of articles" /></p>

<p>If we look at the source of the page in our browser &lt;view-source:http://localhost:3000/&gt;, we’ll see this part:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;h1&gt;</span>Articles<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;li&gt;</span>Hello Rails<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;</span>Post #2<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>This is the HTML that has been output from our view in our Rails application.</p>

<p>Here’s what’s happened to get to this point:</p>

<ol>
  <li>Our browser makes a request: <code class="language-plaintext highlighter-rouge">GET http://localhost:3000</code></li>
  <li>The Rails application receives this request</li>
  <li>The router sees that the <code class="language-plaintext highlighter-rouge">root</code> route is configured to route to the <code class="language-plaintext highlighter-rouge">ArticlesController</code>’s <code class="language-plaintext highlighter-rouge">index</code> action</li>
  <li>The <code class="language-plaintext highlighter-rouge">index</code> action uses the <code class="language-plaintext highlighter-rouge">Article</code> model to find all the articles</li>
  <li>Rails automatically renders the <code class="language-plaintext highlighter-rouge">app/views/articles/index.html.erb</code> view</li>
  <li>The view contains ERB (Embedded Ruby). This code is evalulated, and plain HTML is returned.</li>
  <li>The server sends a response containing that plain HTML back to the browser.</li>
</ol>

<p>Here’s a flowchart of the above steps:</p>

<p><img src="/images/getting_started/application_flowchart.png" alt="Application flowchart" /></p>

<p>We’ve now successfully connected all the different parts of our Rails application together: the router, the controller, the action, the model and the view. With this connection, we have finished the first action of our application.</p>

<p>Let’s move on to the second action!</p>

<h3 id="viewing-an-article">Viewing an Article</h3>

<p>For our second action, we want our application to show us the details about an article, specifically the article’s title and body:</p>

<p><img src="/images/getting_started/single_article_view.png" alt="Single Article View" /></p>

<p>We’ll start in the same place we started with the <code class="language-plaintext highlighter-rouge">index</code> action, which was in <code class="language-plaintext highlighter-rouge">config/routes.rb</code>. We’ll add a new route for this page. Let’s change our routes file now to this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">root</span> <span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#show"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This route is another <code class="language-plaintext highlighter-rouge">get</code> route, but it has something different in it: <code class="language-plaintext highlighter-rouge">:id</code>. This syntax in Rails routing is called a <em>parameter</em>, and it will be available in the <code class="language-plaintext highlighter-rouge">show</code> action of <code class="language-plaintext highlighter-rouge">ArticlesController</code> when a request is made. A request to this action will use a route such as <a href="http://localhost:3000/articles/1">http://localhost:3000/articles/1</a> or <a href="http://localhost:3000/articles/2">http://localhost:3000/articles/2</a>.</p>

<p>This time, we’re still routing to the <code class="language-plaintext highlighter-rouge">ArticlesController</code>, but we’re going to the <code class="language-plaintext highlighter-rouge">show</code> action of that controller instead of the <code class="language-plaintext highlighter-rouge">index</code> action.</p>

<p>Let’s look at how to add that <code class="language-plaintext highlighter-rouge">show</code> action to the <code class="language-plaintext highlighter-rouge">ArticlesController</code>. We’ll open <code class="language-plaintext highlighter-rouge">app/controllers/articles_controller.rb</code> and add it in, under the <code class="language-plaintext highlighter-rouge">index</code> action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArticlesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@articles</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">all</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>When a request is made to this <code class="language-plaintext highlighter-rouge">show</code> action, it will be made to a URL such as <a href="http://localhost:3000/articles/1">http://localhost:3000/articles/1</a>. Rails sees that the last part of that route is a dynamic parameter, and makes that parameter available for us in our controller through the method <code class="language-plaintext highlighter-rouge">params</code>. We use <code class="language-plaintext highlighter-rouge">params[:id]</code> to access that parameter, because back in the routes file we called the parameter <code class="language-plaintext highlighter-rouge">:id</code>. If we used a name like <code class="language-plaintext highlighter-rouge">:article_id</code> in the routes file, then we would need to use <code class="language-plaintext highlighter-rouge">params[:article_id]</code> here too.</p>

<p>The <code class="language-plaintext highlighter-rouge">show</code> action finds a particular article with that ID. Once it has that, it needs to then display that article’s information, which will do by attempting to use a view at <code class="language-plaintext highlighter-rouge">app/views/articles/show.html.erb</code>. Let’s create that file now and add this content:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">body</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Now when we go to <a href="http://localhost:3000/articles/1">http://localhost:3000/articles/1</a> we will see the article:</p>

<p><img src="/images/getting_started/single_article_view.png" alt="Single Article View" /></p>

<p>Excellent! We now have our second action working in our controller. But in order to navigate to it, we have to manually type in <a href="http://localhost:3000/articles/1">http://localhost:3000/articles/1</a>. That seems a bit silly. Let’s change our application a little, so that we can navigate to an article by clicking a link from the list of articles.</p>

<p>To add the link to an article, we need to change <code class="language-plaintext highlighter-rouge">app/views/articles/index.html.erb</code>, which currently looks like this:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Articles<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;ul&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@articles</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="p">.</span><span class="nf">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>This code will render an <code class="language-plaintext highlighter-rouge">li</code> element for each of the articles, and that element contains the title of the article. But we can’t click on the title to go to an article yet! To make that happen, we need to use an <code class="language-plaintext highlighter-rouge">a</code> tag:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Articles<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;ul&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@articles</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">'/articles/</span><span class="cp">&lt;%=</span> <span class="n">article</span><span class="p">.</span><span class="nf">id</span> <span class="cp">%&gt;</span><span class="s">'</span><span class="nt">&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">article</span><span class="p">.</span><span class="nf">title</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">a</code> tag will provide us with a link to the specific article. If we go back to <a href="http://localhost:3000/">http://localhost:3000/</a>, we’ll see that we can now click on the articles:</p>

<p><img src="/images/getting_started/articles_list_with_links.png" alt="Articles list with links" /></p>

<p>Clicking either of these links will take us to the relevant article:</p>

<p><img src="/images/getting_started/single_article_view.png" alt="Single Article View" /></p>

<p>Now we have been able to link together the <code class="language-plaintext highlighter-rouge">index</code> and <code class="language-plaintext highlighter-rouge">show</code> pages in our application using a simple <code class="language-plaintext highlighter-rouge">a</code> tag. What could be simpler than that?</p>

<p>Well, Rails has a method called <code class="language-plaintext highlighter-rouge">link_to</code> that can make that linking a little simpler. Let’s use this in <code class="language-plaintext highlighter-rouge">app/views/articles/index.html.erb</code>:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Articles<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;ul&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@articles</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">article</span><span class="p">.</span><span class="nf">title</span><span class="p">,</span> <span class="s2">"/articles/</span><span class="si">#{</span><span class="n">article</span><span class="p">.</span><span class="nf">id</span><span class="si">}</span><span class="s2">"</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>There we go, that is now a little bit cleaner. Rails has given us a way to shorten this code a little. But what you don’t know yet is that this line can be made even simpler.</p>

<p>Rails has a feature called <em>routing helpers</em>. These are methods that can be used to generate route paths like <code class="language-plaintext highlighter-rouge">"/articles/#{article.id}"</code> programatically. We’ll use one of these to generate the route for our article. To set this up, let’s go back to <code class="language-plaintext highlighter-rouge">config/routes.rb</code> and change this line:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#show"</span>
</code></pre></div></div>

<p>To this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#show"</span><span class="p">,</span> <span class="ss">as: :article</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">:as</code> option here tells Rails that we want routing helpers for this article route to be available in our application. Rails will then let us use this helper to build that route.</p>

<p>Let’s look at how we can use that in <code class="language-plaintext highlighter-rouge">app/views/articles/index.html.erb</code> now, by changing the end of the <code class="language-plaintext highlighter-rouge">link_to</code> call to this:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Articles<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;ul&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@articles</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">article</span><span class="p">.</span><span class="nf">title</span><span class="p">,</span> <span class="n">article_path</span><span class="p">(</span><span class="n">article</span><span class="p">)</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">link_to</code> now assembles its path using the <code class="language-plaintext highlighter-rouge">article_path</code> helper. This will still generate the same <code class="language-plaintext highlighter-rouge">/articles/:id</code> route we used earlier, but now it happens programatically instead. Now there is not so much switching happening between HTML and Ruby in this code. We enter Ruby, generate a link, and exit Ruby. The code still does the same thing: it links an article’s title to the <code class="language-plaintext highlighter-rouge">show</code> page for that article.</p>

<p>TIP: To learn more about routing, read the <a href="https://guides.rubyonrails.org/routing.html">Rails Routing from the Outside In Guide</a>.</p>

<p>We now have an <code class="language-plaintext highlighter-rouge">index</code> action that lists the articles, and a <code class="language-plaintext highlighter-rouge">show</code> action that shows the title and body for a specific article. Before we move on, we’ll make one more little change: we’ll add a “Back” link in <code class="language-plaintext highlighter-rouge">app/views/articles/show.html.erb</code>:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">body</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;div&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"Back"</span><span class="p">,</span> <span class="s2">"/"</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/div&gt;</span>

</code></pre></div></div>

<p>This will allow us to navigate back to the list of articles easily.</p>

<p>With that small change done, let’s now look at how we can create new articles within this application.</p>

<h3 id="creating-new-articles">Creating new articles</h3>

<p>To have a place to create new articles in our application, we’re going to need create a new route, action and view. On that view, we’re going to have this form:</p>

<p>IMAGE GOES HERE</p>

<p>Let’s start with the route:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">root</span> <span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles/new"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#new"</span><span class="p">,</span> <span class="ss">as: :new_article</span>
  <span class="n">get</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#show"</span><span class="p">,</span> <span class="ss">as: :article</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This place to create new articles will be <code class="language-plaintext highlighter-rouge">/articles/new</code>, and the route for this has <em>very</em> intentionally been placed above the route for the <code class="language-plaintext highlighter-rouge">show</code> action. The reason for this is because routes in a Rails application are matched top-to-bottom. If we had <code class="language-plaintext highlighter-rouge">/articles/:id</code> first, that route would match <code class="language-plaintext highlighter-rouge">/articles/new</code>, and so if we went to <code class="language-plaintext highlighter-rouge">/articles/new</code>, the <code class="language-plaintext highlighter-rouge">show</code> action would serve that request, not the <code class="language-plaintext highlighter-rouge">new</code> action. And so for this reason, we put the <code class="language-plaintext highlighter-rouge">new</code> route <em>above</em> the <code class="language-plaintext highlighter-rouge">show</code> action.</p>

<p>This <code class="language-plaintext highlighter-rouge">/articles/new</code> route will send the request to the <code class="language-plaintext highlighter-rouge">new</code> action within the <code class="language-plaintext highlighter-rouge">ArticlesController</code>, which we’ll see in a minute. We’ve added the <code class="language-plaintext highlighter-rouge">:as</code> option here, as we will be using the <code class="language-plaintext highlighter-rouge">new_article_path</code> helper in a little while to provide a way to navigate to this form.</p>

<p>If we were to attempt to go to this route now, would see an error for the first time:</p>

<p><img src="/images/getting_started/unknown_action_new_for_articles.png" alt="Unknown action new for ArticlesController!" /></p>

<p>This error indicates that Rails cannot find the <code class="language-plaintext highlighter-rouge">new</code> action inside the
<code class="language-plaintext highlighter-rouge">ArticlesController</code>. No worries, we will need to define this action.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArticlesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@articles</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">all</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We can put the <code class="language-plaintext highlighter-rouge">new</code> action under <code class="language-plaintext highlighter-rouge">show</code> in the controller, because the order of methods in classes doesn’t matter in Ruby.</p>

<p>With the <code class="language-plaintext highlighter-rouge">new</code> method defined in <code class="language-plaintext highlighter-rouge">ArticlesController</code>, if you refresh
<a href="http://localhost:3000/articles/new">http://localhost:3000/articles/new</a> you’ll see another error:</p>

<p><img src="/images/getting_started/template_is_missing_articles_new.png" alt="Template is missing for articles/new" /></p>

<p>You’re getting this error now because Rails expects empty actions like this one to have views associated with them to display their information. With no view available, Rails will raise an exception.</p>

<p>Let’s look at the full error message again:</p>

<blockquote>
  <p>ArticlesController#new is missing a template for request formats: text/html</p>
</blockquote>

<blockquote>
  <p>NOTE!
Unless told otherwise, Rails expects an action to render a template with the same name, contained in a folder named after its controller. If this controller is an API responding with 204 (No Content), which does not require a template, then this error will occur when trying to access it via browser, since we expect an HTML template to be rendered for such requests. If that’s the case, carry on.</p>
</blockquote>

<p>The message identifies which template is missing. In this case, it’s the
<code class="language-plaintext highlighter-rouge">articles/new</code> template. Next the message contains <code class="language-plaintext highlighter-rouge">request.formats</code> which specifies the format of template to be served in response. It is set to <code class="language-plaintext highlighter-rouge">text/html</code> as we requested this page via browser, so Rails is looking for an HTML template.</p>

<p>The simplest template that would work in this case would be one located at <code class="language-plaintext highlighter-rouge">app/views/articles/new.html.erb</code>. The extension of this file name is important: the first extension is the <em>format</em> of the template, and the second extension is the <em>handler</em> that will be used to render the template.  Think of it reading right-to-left: “I’m going to <em>execute ERB</em> to <em>generate HTML</em> for the <em><code class="language-plaintext highlighter-rouge">new</code> action</em>”.</p>

<p>So let’s now go ahead now and create a new file at <code class="language-plaintext highlighter-rouge">app/views/articles/new.html.erb</code> and write this content in it:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>New Article<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div>

<p>To create a form within this template, you will use a <em>form
builder</em>. The primary form builder for Rails is provided by a helper
method called <code class="language-plaintext highlighter-rouge">form_with</code>. To use this method, add this code into
<code class="language-plaintext highlighter-rouge">app/views/articles/new.html.erb</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>New Article<span class="nt">&lt;/h1&gt;</span>

<span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/articles"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;p&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"title"</span><span class="nt">&gt;</span>Title<span class="nt">&lt;/label&gt;&lt;br&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">id=</span><span class="s">"title"</span> <span class="na">name=</span><span class="s">"title"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"text"</span><span class="nt">&gt;</span>Text<span class="nt">&lt;/label&gt;&lt;br&gt;</span>
    <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">"text"</span> <span class="na">id=</span><span class="s">"text"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"Save Article"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>This is an awful lot of typing for building a form. Fortunately, Rails provides helpers for us to simplify matters:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>New Article<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">form_with</span> <span class="ss">scope: :article</span><span class="p">,</span> <span class="ss">local: </span><span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">form</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:title</span> <span class="cp">%&gt;</span><span class="nt">&lt;br&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:title</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:body</span> <span class="cp">%&gt;</span><span class="nt">&lt;br&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_area</span> <span class="ss">:body</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">submit</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">form_with</code> helper method allows us to build a form. The first line of this provides us a block argument called <code class="language-plaintext highlighter-rouge">form</code>, and then throughout the form we use that to build labels and text inputs for our field.</p>

<p>NOTE: By default <code class="language-plaintext highlighter-rouge">form_with</code> submits forms using Ajax thereby skipping full page redirects. To make this guide easier to get into we’ve disabled that with <code class="language-plaintext highlighter-rouge">local: true</code> for now.</p>

<p>This ERB code that uses <code class="language-plaintext highlighter-rouge">form_with</code> will output a HTML form that looks very similar to the one we hand-rolled, but there are some key differences. Here’s what the <code class="language-plaintext highlighter-rouge">form_with</code> outputs:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/articles/new"</span> <span class="na">accept-charset=</span><span class="s">"UTF-8"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"authenticity_token"</span> <span class="na">value=</span><span class="s">"DIwa34..."</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;p&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"article_title"</span><span class="nt">&gt;</span>Title<span class="nt">&lt;/label&gt;&lt;br&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"article[title]"</span> <span class="na">id=</span><span class="s">"article_title"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"article_text"</span><span class="nt">&gt;</span>Text<span class="nt">&lt;/label&gt;&lt;br&gt;</span>
    <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">"article[text]"</span> <span class="na">id=</span><span class="s">"article_text"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/textarea&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">name=</span><span class="s">"commit"</span> <span class="na">value=</span><span class="s">"Save Article"</span> <span class="na">data-disable-with=</span><span class="s">"Save Article"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>The first key difference is that there is a hidden field called <code class="language-plaintext highlighter-rouge">authenticity_token</code> at the top. This is a security feature of Rails and it prevents outside people from submitting your forms maliciously using a technique called Cross Site Request Forgery. <a href="https://stackoverflow.com/a/1571900/15245">This Stack Overflow answer explains further</a>.</p>

<p>The labels and fields are mostly the way they were, with a key difference: the <code class="language-plaintext highlighter-rouge">name</code> fields have an <code class="language-plaintext highlighter-rouge">article[]</code> wrapping around their values. This wrapping comes from the <code class="language-plaintext highlighter-rouge">scope</code> argument that we have passed to <code class="language-plaintext highlighter-rouge">form_with</code>. This wrapping groups all the fields of the form into one hash once they’re submitted, and that will make it easy to process once they reach our application.</p>

<p>Speaking of, let’s try and fill out this form now with a title and a body for our 3rd article:</p>

<p><img src="/images/getting_started/article_the_third.png" alt="The third article" /></p>

<p>There’s one problem with this form though. If you inspect the HTML that is generated, by viewing the source of the page, you will see that the <code class="language-plaintext highlighter-rouge">action</code> attribute for the form is pointing at <code class="language-plaintext highlighter-rouge">/articles/new</code>. This is a problem because this route goes to the very page that you’re on right at the moment, and that route should only be used to display the form for a new article.</p>

<p>The form needs to use a different URL in order to go somewhere else.
This can be done quite simply with the <code class="language-plaintext highlighter-rouge">:url</code> option of <code class="language-plaintext highlighter-rouge">form_with</code>.
Typically in Rails, the action that is used for new form submissions
like this is called “create”, and so the form should be pointed to that action.</p>

<p>Edit the <code class="language-plaintext highlighter-rouge">form_with</code> line inside <code class="language-plaintext highlighter-rouge">app/views/articles/new.html.erb</code> to look like this:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_with</span> <span class="ss">scope: :article</span><span class="p">,</span> <span class="ss">url: </span><span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">local: </span><span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">form</span><span class="o">|</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Once the form is submitted, it will send a <code class="language-plaintext highlighter-rouge">POST</code> request to <code class="language-plaintext highlighter-rouge">/articles</code>. If we hit submit on that form now, we’ll be shown a Routing Error:</p>

<p><img src="/images/getting_started/routing_error_post_articles.png" alt="Routing Error" /></p>

<p>This error means that we haven’t set up a route to handle <code class="language-plaintext highlighter-rouge">POST</code> requests to <code class="language-plaintext highlighter-rouge">/articles</code>. If we look in our <code class="language-plaintext highlighter-rouge">config/routes.rb</code> file, we’ll see that is correct:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">root</span> <span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles/new"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#new"</span><span class="p">,</span> <span class="ss">as: :new_article_path</span>
  <span class="n">get</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#show"</span><span class="p">,</span> <span class="ss">as: :article</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Let’s add this new route now:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">root</span> <span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles/new"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#new"</span><span class="p">,</span> <span class="ss">as: :new_article_path</span>
  <span class="n">get</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#show"</span><span class="p">,</span> <span class="ss">as: :article</span>
  <span class="n">post</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#create"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>TIP: The <code class="language-plaintext highlighter-rouge">get</code> and <code class="language-plaintext highlighter-rouge">post</code> methods that we use in <code class="language-plaintext highlighter-rouge">config/routes.rb</code> match HTTP request methods. These methods are conventions used across all HTTP applications – not just Rails! – to clearly indicate what sort of action we want to do. A <code class="language-plaintext highlighter-rouge">GET</code> request is one that retrieves information. A <code class="language-plaintext highlighter-rouge">POST</code> request is one that <em>adds</em> information. For more detials on these, see this MDN article: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods.</p>

<p>When Rails receives a <code class="language-plaintext highlighter-rouge">POST /articles</code> request, it will now route that request to the <code class="language-plaintext highlighter-rouge">create</code> action of the <code class="language-plaintext highlighter-rouge">ArticlesController</code>. However, if we re-submit that form, we’ll see that the action cannot be found:</p>

<p><img src="images/getting_started/unknown_action_create_for_articles.png" alt="Unknown action create for ArticlesController" /></p>

<p>You now need to create the <code class="language-plaintext highlighter-rouge">create</code> action within the <code class="language-plaintext highlighter-rouge">ArticlesController</code> for this to work.</p>

<h3 id="creating-articles">Creating Articles</h3>

<p>To make the “Unknown action” go away, we can define a <code class="language-plaintext highlighter-rouge">create</code> action within the <code class="language-plaintext highlighter-rouge">ArticlesController</code> class in <code class="language-plaintext highlighter-rouge">app/controllers/articles_controller.rb</code>, underneath the <code class="language-plaintext highlighter-rouge">new</code> action, as shown:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArticlesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>If you re-submit the form now, you may not see any change on the page. Don’t worry!</p>

<p>This is because Rails by default returns <code class="language-plaintext highlighter-rouge">204 No Content</code> response for an action if we don’t specify what the response should be. We just added the <code class="language-plaintext highlighter-rouge">create</code> action but didn’t specify anything about how the response should be. In this case, the <code class="language-plaintext highlighter-rouge">create</code> action should save our new article to the database.</p>

<p>When a form is submitted, the fields of the form are sent to Rails as
<em>parameters</em>. Yes, there are the same parameters as we saw earlier when we used <code class="language-plaintext highlighter-rouge">params[:id]</code>. These parameters can then be referenced inside the controller actions, typically to perform a particular task. To see what these parameters look like, change the <code class="language-plaintext highlighter-rouge">create</code> action to this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">render</span> <span class="ss">plain: </span><span class="n">params</span><span class="p">[</span><span class="ss">:article</span><span class="p">].</span><span class="nf">inspect</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">render</code> method here is taking a very simple hash with a key of <code class="language-plaintext highlighter-rouge">:plain</code> and value of <code class="language-plaintext highlighter-rouge">params[:article].inspect</code>. The <code class="language-plaintext highlighter-rouge">params</code> method is the object which represents the parameters (or fields) coming in from the form. The <code class="language-plaintext highlighter-rouge">params</code> method returns an <code class="language-plaintext highlighter-rouge">ActionController::Parameters</code> object, which allows you to access the keys of the hash using either strings or symbols. In this situation, the only parameters that matter are the ones from the form. Thanks to the use of the <code class="language-plaintext highlighter-rouge">scope</code> option on the form, all of our form’s parameters are grouped under <code class="language-plaintext highlighter-rouge">params[:article]</code>.</p>

<p>TIP: Ensure you have a firm grasp of the <code class="language-plaintext highlighter-rouge">params</code> method, as you’ll use it fairly regularly. Let’s consider an example URL: <strong>http://www.example.com/?username=dhh&amp;email=dhh@email.com</strong>. In this URL, <code class="language-plaintext highlighter-rouge">params[:username]</code> would equal “dhh” and <code class="language-plaintext highlighter-rouge">params[:email]</code> would equal “dhh@email.com”.</p>

<p>If you re-submit the form one more time, you’ll see something that looks like the following:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="no">ActionController</span><span class="o">::</span><span class="no">Parameters</span> <span class="p">{</span><span class="s2">"title"</span><span class="o">=&gt;</span><span class="s2">"Article the Third"</span><span class="p">,</span> <span class="s2">"text"</span><span class="o">=&gt;</span><span class="s2">"The Trilogy Ends"</span><span class="p">}</span> <span class="ss">permitted: </span><span class="kp">false</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>This action is now displaying the parameters for the article that are coming in from the form. However, this isn’t really all that helpful. Yes, you can see the parameters but nothing in particular is being done with them.</p>

<p>Let’s change the  <code class="language-plaintext highlighter-rouge">create</code> action to use the <code class="language-plaintext highlighter-rouge">Article</code> model to save the data in the database. Let’s change the <code class="language-plaintext highlighter-rouge">create</code> action to look like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:article</span><span class="p">])</span>
  <span class="n">article</span><span class="p">.</span><span class="nf">save</span>

  <span class="n">redirect_to</span> <span class="n">article_path</span><span class="p">(</span><span class="n">article</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>NOTE: We’re <em>not</em> using an instance variable in this action. This is because this action redirects at the end, and since there is a redirection there is no view. So there is no need to make these variables instance variables.</p>

<p>Here we use some familar code to create a new article – we saw this previously right after we generated the <code class="language-plaintext highlighter-rouge">Article</code> model. The call to <code class="language-plaintext highlighter-rouge">new</code> and then to <code class="language-plaintext highlighter-rouge">save</code> will create a new article record in the database.</p>

<p>The final line, a <code class="language-plaintext highlighter-rouge">redirect_to</code>, uses <code class="language-plaintext highlighter-rouge">article_path</code> to redirect back to the <code class="language-plaintext highlighter-rouge">show</code> action.</p>

<p>If you now go to <a href="http://localhost:3000/articles/new">http://localhost:3000/articles/new</a> you’ll <em>almost</em> be able to create an article. Try it! You should get an error that looks like this:</p>

<p><img src="images/getting_started/forbidden_attributes_for_new_article.png" alt="Forbidden attributes for new article" /></p>

<p>Rails has several security features that help you write secure applications, and you’re running into one of them now. This one is called <a href="action_controller_overview.html#strong-parameters">strong parameters</a>,
which requires us to tell Rails exactly which parameters are allowed into our controller actions.</p>

<p>Why do you have to bother? The ability to grab and automatically assign all controller parameters to your model in one shot makes the programmer’s job easier, but this convenience also allows malicious use. What if this form was a bank account and we allowed just anyone to add in a new field that set their balance to whatever they wished? This would end up bad for us!</p>

<p>We have to define our permitted controller parameters to prevent wrongful mass assignment. In this case, we want to both allow and require the <code class="language-plaintext highlighter-rouge">title</code> and <code class="language-plaintext highlighter-rouge">body</code> parameters for valid use of <code class="language-plaintext highlighter-rouge">create</code>. The syntax for this introduces <code class="language-plaintext highlighter-rouge">require</code> and <code class="language-plaintext highlighter-rouge">permit</code>. The change will involve one line in the <code class="language-plaintext highlighter-rouge">create</code> action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:article</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="p">))</span>
</code></pre></div></div>

<p>This code is quite long and is often pulled out into its own method so it can be reused by multiple actions in the same controller. Above and beyond mass assignment issues, the method is often made <code class="language-plaintext highlighter-rouge">private</code> to make sure it can’t be called outside its intended context. Here is the result:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">article_params</span><span class="p">)</span>

  <span class="vi">@article</span><span class="p">.</span><span class="nf">save</span>
  <span class="n">redirect_to</span> <span class="vi">@article</span>
<span class="k">end</span>

<span class="kp">private</span>
  <span class="k">def</span> <span class="nf">article_params</span>
    <span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:article</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="p">)</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>TIP: For more information, refer to the reference above and
[this blog article about Strong Parameters]
(https://weblog.rubyonrails.org/2012/3/21/strong-parameters/).</p>

<p>If we attempt to submit our form once more, this time it will succeed and we’ll see the article’s title and body. The URL should be <a href="http://localhost:3000/articles/3">http://localhost:3000/articles/3</a>, indicating that we’re now on the <code class="language-plaintext highlighter-rouge">show</code> action.</p>

<p>Before we wrap up this section, let’s add a link to <code class="language-plaintext highlighter-rouge">app/views/articles/index.html.erb</code> so that we can go to the “New Article” page from there:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Articles<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"New Article"</span><span class="p">,</span> <span class="n">new_article_path</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;ul&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@articles</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">article</span><span class="p">.</span><span class="nf">title</span><span class="p">,</span> <span class="n">article_path</span><span class="p">(</span><span class="n">article</span><span class="p">)</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>Now we’ll have an easy link to go back to that page:</p>

<p><img src="/images/getting_started/three_articles.png" alt="Three articles" /></p>

<p>Great! That’s another two actions finished in our controller: <code class="language-plaintext highlighter-rouge">new</code> and <code class="language-plaintext highlighter-rouge">create</code>.</p>

<h3 id="adding-some-validation">Adding Some Validation</h3>

<p>Sometimes, in web applications, we want to make sure certain fields are filled in.</p>

<p>The model file, <code class="language-plaintext highlighter-rouge">app/models/article.rb</code> is about as simple as it can get:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
<span class="k">end</span>
</code></pre></div></div>

<p>There isn’t much to this file - but note that the <code class="language-plaintext highlighter-rouge">Article</code> class inherits from
<code class="language-plaintext highlighter-rouge">ApplicationRecord</code>. <code class="language-plaintext highlighter-rouge">ApplicationRecord</code> inherits from <code class="language-plaintext highlighter-rouge">ActiveRecord::Base</code> which supplies a great deal of functionality to your Rails models for free. We’ve used some of this already: <code class="language-plaintext highlighter-rouge">Article.new</code>, <code class="language-plaintext highlighter-rouge">Article.all</code>, <code class="language-plaintext highlighter-rouge">Article.find</code> and so on.</p>

<p>One of these pieces of functionality is that Active Record includes methods to help you validate the data that you send to models and it’s easy to use.</p>

<p>Open the <code class="language-plaintext highlighter-rouge">app/models/article.rb</code> file and edit it to this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">validates</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span><span class="p">,</span>
                    <span class="ss">length: </span><span class="p">{</span> <span class="ss">minimum: </span><span class="mi">5</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>These changes will ensure that all articles have a title that is at least five characters long. Rails can validate a variety of conditions in a model, including the presence or uniqueness of columns, their format, and the existence of associated objects. Validations are covered in detail in <a href="active_record_validations.html">Active Record Validations</a>.</p>

<p>This validation will now only let us save articles that have titles longer than 5 characters. Let’s open up the console now and try:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails console
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">invalid_article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Article id: nil, title: nil, body: nil, created_at: nil, updated_at: nil&gt;</span>
<span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">invalid_article</span><span class="p">.</span><span class="nf">save</span>
<span class="o">=&gt;</span> <span class="kp">false</span>
</code></pre></div></div>

<p>When <code class="language-plaintext highlighter-rouge">save</code> returns <code class="language-plaintext highlighter-rouge">false</code>, it means that the object is invalid and won’t be saved to the database. To find out why, we can use this code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">invalid_article</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">full_messages</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"Title can't be blank"</span><span class="p">,</span> <span class="s2">"Title is too short (minimum is 5 characters)"</span><span class="p">]</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">errors.full_messages</code> method chain shows two validation failure messages for our model:</p>

<ul>
  <li>The title can’t be blank</li>
  <li>The title is too short (minimum of 5 characters)</li>
</ul>

<p>That’s because we’ve left the title blank. Now let’s see what happens when we save an article with a valid title:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb(main):006:0&gt; article = Article.new title: "Getting Started"
=&gt; #&lt;Article id: nil, title: "Getting Started", body: nil, created_at: nil, updated_at: nil&gt;

irb(main):007:0&gt; article.save
   (0.1ms)  begin transaction
  Article Create (0.4ms)  INSERT INTO "articles" ("title", "created_at", "updated_at") VALUES (?, ?, ?)  [["title", "Getting Started"], ["created_at", "2020-01-19 09:56:25.693465"], ["updated_at", "2020-01-19 09:56:25.693465"]]
   (0.6ms)  commit transaction
=&gt; true
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">save</code> call here has returned <code class="language-plaintext highlighter-rouge">true</code>, indicating that the article has passed validations. Also in the console, we can see an <code class="language-plaintext highlighter-rouge">Article Create</code> message, that contains an <code class="language-plaintext highlighter-rouge">INSERT INTO</code> database query, and so we can be confident that this article has now been inserted into our database.</p>

<p>Now that we’ve seen how to handle invalid and valid articles in the console, let’s try using this same technique in our controller.</p>

<p>If you open
<code class="language-plaintext highlighter-rouge">app/controllers/articles_controller.rb</code> again, you’ll notice that we don’t check the result of calling <code class="language-plaintext highlighter-rouge">@article.save</code> inside the <code class="language-plaintext highlighter-rouge">create</code> action.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">article_params</span><span class="p">)</span>

  <span class="vi">@article</span><span class="p">.</span><span class="nf">save</span>
  <span class="n">redirect_to</span> <span class="vi">@article</span>
<span class="k">end</span>
</code></pre></div></div>

<p>If <code class="language-plaintext highlighter-rouge">@article.save</code> fails in this situation, we need to do something different: we need to show the form again to the user so that they can correct their mistake.</p>

<p>To do this, let’s change the <code class="language-plaintext highlighter-rouge">create</code> action to either redirect to the article if the save was successful (the method returns <code class="language-plaintext highlighter-rouge">true</code>) or to show the new form again if the save failed:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">new</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">create</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">article_params</span><span class="p">)</span>

  <span class="k">if</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">save</span>
    <span class="n">redirect_to</span> <span class="n">article_path</span><span class="p">(</span><span class="vi">@article</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="n">render</span> <span class="s1">'new'</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The first thing to note here is that we’ve now switched from using a local variable <code class="language-plaintext highlighter-rouge">article</code> to using an instance variable, <code class="language-plaintext highlighter-rouge">@article</code>. The reason for this is the <code class="language-plaintext highlighter-rouge">else</code> statement. Inside that <code class="language-plaintext highlighter-rouge">else</code> we tell Rails to <code class="language-plaintext highlighter-rouge">render 'new'</code>. This tells Rails that we want the <code class="language-plaintext highlighter-rouge">app/views/articles/new.html.erb</code> view to be rendered in the case where our save fails.</p>

<p>If you reload <a href="http://localhost:3000/articles/new">http://localhost:3000/articles/new</a> and
try to save an article without a title, Rails will send you back to the
form, but that’s not very useful. It doesn’t tell us why something went wrong. To do that, we’ll need to modify <code class="language-plaintext highlighter-rouge">app/views/articles/new.html.erb</code> to check for error messages:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>New Article<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">form_with</span> <span class="ss">scope: :article</span><span class="p">,</span> <span class="ss">url: </span><span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">local: </span><span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">form</span><span class="o">|</span> <span class="cp">%&gt;</span>

  <span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">any?</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"error_explanation"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h2&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">pluralize</span><span class="p">(</span><span class="vi">@article</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">count</span><span class="p">,</span> <span class="s2">"error"</span><span class="p">)</span> <span class="cp">%&gt;</span> prohibited
        this article from being saved:
      <span class="nt">&lt;/h2&gt;</span>
      <span class="nt">&lt;ul&gt;</span>
        <span class="cp">&lt;%</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">full_messages</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="cp">%&gt;</span>
          <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">msg</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
        <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:title</span> <span class="cp">%&gt;</span><span class="nt">&lt;br&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:title</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:body</span> <span class="cp">%&gt;</span><span class="nt">&lt;br&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_area</span> <span class="ss">:body</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">submit</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>At the top of this view, we’re now using <code class="language-plaintext highlighter-rouge">@article.errors</code> to check for any errors. The <code class="language-plaintext highlighter-rouge">@article</code> variable here will come from the <code class="language-plaintext highlighter-rouge">create</code> action, when the <code class="language-plaintext highlighter-rouge">app/views/articles/new.html.erb</code> view is rendered due to an invalid article.</p>

<p>Inside the check for any errors, we call <code class="language-plaintext highlighter-rouge">pluralize</code>. <code class="language-plaintext highlighter-rouge">pluralize</code> is a rails helper that takes a number and a string as its arguments. If the number is greater than one, the string will be automatically
pluralized.</p>

<p>If we attempt to go to <a href="http://localhost:3000/articles/new">http://localhost:3000/articles/new</a> at this point, we’ll see it fail:</p>

<p><img src="images/getting_started/no_method_in_form.png" alt="NoMethodError" /></p>

<p>This is happening because we’re referring to a variable called <code class="language-plaintext highlighter-rouge">@article</code> within <code class="language-plaintext highlighter-rouge">app/views/articles/new.html.erb</code>, but the <code class="language-plaintext highlighter-rouge">new</code> action does not provide this variable at all.</p>

<p>The path to this error is:</p>

<ol>
  <li>Browser goes to http://localhost:3000/articles/new</li>
  <li>Rails sees <code class="language-plaintext highlighter-rouge">/articles/new</code> is the route, routes the request to the <code class="language-plaintext highlighter-rouge">ArticlesController</code>’s <code class="language-plaintext highlighter-rouge">new</code> action</li>
  <li>The <code class="language-plaintext highlighter-rouge">new</code> action is blank, and so Rails defaults to rendering <code class="language-plaintext highlighter-rouge">app/views/articles/new.html.erb</code>.</li>
  <li>The template attempts to reference <code class="language-plaintext highlighter-rouge">@article</code>, but it is not defined.</li>
</ol>

<p>So to make this error go away, we need to define this <code class="language-plaintext highlighter-rouge">@article</code> variable. We can do it like this in the <code class="language-plaintext highlighter-rouge">new</code> action inside <code class="language-plaintext highlighter-rouge">app/controllers/articles_controller.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">new</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">@article</code> is a brand-new <code class="language-plaintext highlighter-rouge">Article</code> object, and will be perfect for our form. It doesn’t have any errors on it – because we haven’t tried saving it yet! – and so the form will not display any errors.</p>

<p>If we refresh this <a href="http://localhost:3000/articles/new">http://localhost:3000/articles/new</a> page, we should see our form renders once again.</p>

<p><img src="images/getting_started/new_article.png" alt="The form works again" /></p>

<p>Now you’ll get a nice error message when saving an article without a title when
you attempt to do just that on the new article form
<a href="http://localhost:3000/articles/new">http://localhost:3000/articles/new</a>:</p>

<p><img src="images/getting_started/form_with_errors.png" alt="Form With Errors" /></p>

<p>And there we have it! We now have the ability to create new articles within our application.</p>

<h3 id="updating-articles">Updating Articles</h3>

<p>Now what should happen if we make a mistake when creating an article? Well, we should have a way to edit an article and correct that mistake.</p>

<p>Our edit form will look just like our new form, just with a few differences:</p>

<p><img src="/images/getting_started/edit_form.png" alt="Edit form" /></p>

<p>Firstly, the title will say “Edit Article”, not “New Article”. Secondly, the fields will be filled out with the article’s current values. And lastly, the submit button says “Update Article”, not “Save Article”.</p>

<p>To add this feature to our application, we’re going to need to add a new route, a route just for editing articles. Let’s do this now in <code class="language-plaintext highlighter-rouge">config/routes.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get</span> <span class="s2">"/articles/:id/edit"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#edit"</span><span class="p">,</span> <span class="ss">as: :edit_article</span>
</code></pre></div></div>

<p>This new route is another <code class="language-plaintext highlighter-rouge">get</code> route. This time, we’re routing to <code class="language-plaintext highlighter-rouge">/articles/:id/edit</code>, so that we can see that edit form for a particular article. Which article we’re editing depends on that <code class="language-plaintext highlighter-rouge">:id</code> parameter in the route.</p>

<p>The route will be handled by the <code class="language-plaintext highlighter-rouge">edit</code> action within <code class="language-plaintext highlighter-rouge">ArticlesController</code>. We’ll add that action soon.</p>

<p>The <code class="language-plaintext highlighter-rouge">as</code> option will provide us with a routing helper that we can use across our application to take us to this edit form for a specific article.</p>

<p>As a first step, let’s add an “Edit” link for each article on <code class="language-plaintext highlighter-rouge">app/views/articles/index.html.erb</code>:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Articles<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"New Article"</span><span class="p">,</span> <span class="n">new_article_path</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;ul&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@articles</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">article</span><span class="p">.</span><span class="nf">title</span><span class="p">,</span> <span class="n">article_path</span><span class="p">(</span><span class="n">article</span><span class="p">)</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"Edit"</span><span class="p">,</span> <span class="n">edit_article_path</span><span class="p">(</span><span class="n">article</span><span class="p">)</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>This “Edit” link will now appear next to all of the articles at <a href="http://localhost:3000/articles">http://localhost:3000/articles</a>.</p>

<p><img src="/images/getting_started/articles_with_edit.png" alt="Articles with edit links" /></p>

<p>If we click on any one of those “Edit” links, we’ll see that we haven’t yet defined the <code class="language-plaintext highlighter-rouge">edit</code> action.</p>

<p><img src="/images/getting_started/no_edit_action.png" alt="No edit action" /></p>

<p>So the next step here is to add that action to our controller. Let’s open <code class="language-plaintext highlighter-rouge">app/controllers/articles_controller.rb</code> and add that action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">new</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">create</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">article_params</span><span class="p">)</span>

  <span class="k">if</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">save</span>
    <span class="n">redirect_to</span> <span class="vi">@article</span>
  <span class="k">else</span>
    <span class="n">render</span> <span class="s1">'new'</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">edit</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div></div>

<p>NOTE:  We’re using <code class="language-plaintext highlighter-rouge">edit</code> to render just a form to display the current values of the article. For the actual updating of the article, we’ll use a different action for this shortly called <code class="language-plaintext highlighter-rouge">update</code>.</p>

<p>The view will contain a form similar to the one we used when creating new articles. Create a file called <code class="language-plaintext highlighter-rouge">app/views/articles/edit.html.erb</code> and put this content inside:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Edit Article<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">form_with</span> <span class="ss">model: </span><span class="vi">@article</span><span class="p">,</span> <span class="ss">local: </span><span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">form</span><span class="o">|</span> <span class="cp">%&gt;</span>

  <span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">any?</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"error_explanation"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h2&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">pluralize</span><span class="p">(</span><span class="vi">@article</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">count</span><span class="p">,</span> <span class="s2">"error"</span><span class="p">)</span> <span class="cp">%&gt;</span> prohibited
        this article from being saved:
      <span class="nt">&lt;/h2&gt;</span>
      <span class="nt">&lt;ul&gt;</span>
        <span class="cp">&lt;%</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">full_messages</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="cp">%&gt;</span>
          <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">msg</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
        <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:title</span> <span class="cp">%&gt;</span><span class="nt">&lt;br&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:title</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:body</span> <span class="cp">%&gt;</span><span class="nt">&lt;br&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_area</span> <span class="ss">:body</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">submit</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Back'</span><span class="p">,</span> <span class="n">articles_path</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>The only things different in this view are the <code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code> at the top of the view, and the <code class="language-plaintext highlighter-rouge">form_with</code>. The <code class="language-plaintext highlighter-rouge">form_with</code> is not using <code class="language-plaintext highlighter-rouge">scope</code> or <code class="language-plaintext highlighter-rouge">url</code>, but is instead using a different key called <code class="language-plaintext highlighter-rouge">model</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">model</code> key for <code class="language-plaintext highlighter-rouge">form_with</code> takes an instance of a model’s class and builds a form for that particular object. By using <code class="language-plaintext highlighter-rouge">form_with</code> in this way, Rails will pre-populate the title and body fields in this form for us.</p>

<p>There’s one extra feature that Rails does for us that is not immediately obvious from looking at the form itself. This feature requires us to look at the HTML source of this form. Inside this source at the top of the <code class="language-plaintext highlighter-rouge">&lt;form&gt;</code> element, here’s what we’ll see:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/articles/1"</span> <span class="na">accept-charset=</span><span class="s">"UTF-8"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"_method"</span> <span class="na">value=</span><span class="s">"patch"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>Firstly, the <code class="language-plaintext highlighter-rouge">action</code> attribute for this form goes to a route called <code class="language-plaintext highlighter-rouge">/articles/1</code>. This path was automatically generated by Rails; in short: it uses the <code class="language-plaintext highlighter-rouge">article_path</code> helper to generate this route. The second thing to notice is that hidden field. This hidden field is a special field that will make the form do a <code class="language-plaintext highlighter-rouge">PATCH</code> request when this form is submitted, instead of the default <code class="language-plaintext highlighter-rouge">POST</code> (as is configured in the <code class="language-plaintext highlighter-rouge">form</code> element’s <code class="language-plaintext highlighter-rouge">method</code> attribute).</p>

<p>This means that our form will make a <code class="language-plaintext highlighter-rouge">PATCH /articles/1</code> request when it is submitted. If we hit submit on the form, we’ll see that this is correct, and that this route is currently missing:</p>

<p><img src="/images/getting_started/no_route_for_patch_articles.png" alt="No route matches [PATCH] &quot;/articles/1&quot;" /></p>

<p>This route is supposed to handle the submission of our form, but the route does not exist yet. To make this form work, we’ll need to define this route. Let’s go back to <code class="language-plaintext highlighter-rouge">config/routes.rb</code> and define this route:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">root</span> <span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles/new"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#new"</span><span class="p">,</span> <span class="ss">as: :new_article</span>
  <span class="n">get</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#show"</span><span class="p">,</span> <span class="ss">as: :article</span>
  <span class="n">post</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#create"</span>
  <span class="n">get</span> <span class="s2">"/articles/:id/edit"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#edit"</span><span class="p">,</span> <span class="ss">as: :edit_article</span>
  <span class="n">patch</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#update"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">patch</code> method will generate us a route for <code class="language-plaintext highlighter-rouge">PATCH /articles/:id</code> requests. We use the <code class="language-plaintext highlighter-rouge">PATCH</code> HTTP routing method for when we want to modify an existing resource.</p>

<p>These requests to <code class="language-plaintext highlighter-rouge">PATCH /articles/:id</code> will be routed to the <code class="language-plaintext highlighter-rouge">update</code> action in our <code class="language-plaintext highlighter-rouge">ArticlesController</code>. Let’s add that action now underneath the <code class="language-plaintext highlighter-rouge">edit</code> action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">edit</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">update</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>

  <span class="k">if</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">article_params</span><span class="p">)</span>
    <span class="n">redirect_to</span> <span class="vi">@article</span>
  <span class="k">else</span>
    <span class="n">render</span> <span class="s1">'edit'</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="kp">private</span>
  <span class="k">def</span> <span class="nf">article_params</span>
    <span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:article</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="p">)</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>The new method, <code class="language-plaintext highlighter-rouge">update</code>, is used when you want to update a record that already exists, and it accepts a hash containing the attributes that you want to update. As before, if there was an error updating the article we want to show the form back to the user.</p>

<p>We reuse the <code class="language-plaintext highlighter-rouge">article_params</code> method that we defined earlier for the create action. We want to accept the same parameters here, and so it makes sense to use the same <code class="language-plaintext highlighter-rouge">article_params</code> method.</p>

<p>TIP: It is not necessary to pass all the attributes to <code class="language-plaintext highlighter-rouge">update</code>. For example, if <code class="language-plaintext highlighter-rouge">@article.update(title: 'A new title')</code> was called, Rails would only update the <code class="language-plaintext highlighter-rouge">title</code> attribute, leaving all other attributes untouched.</p>

<p>Let’s try this again. We’ll go to <a href="http://localhost:3000">http://localhost:3000</a>, click the “Edit” link next to one of the articles and change its title. I’m going to change the “Hello Rails” article’s title to “Hello Rails, how are you today?”. When this happens and we submit the form, we will see the new title for that article:</p>

<p><img src="/images/getting_started/how_are_you_rails.png" alt="How are you, Rails?" /></p>

<p>On this page, we’re currently missing a way to edit an article. This route that we’re currently on is <a href="http://localhost:3000/articles/1">http://localhost:3000/articles/1</a>, and we know that the route matches to <code class="language-plaintext highlighter-rouge">app/views/articles/show.html.erb</code>.</p>

<p>This now finishes our adventures in adding the ability to edit an article in this application.</p>

<h3 id="using-partials-to-clean-up-duplication-in-views">Using partials to clean up duplication in views</h3>

<p>Our <code class="language-plaintext highlighter-rouge">edit</code> page looks very similar to the <code class="language-plaintext highlighter-rouge">new</code> page; in fact, they both share almost same code for displaying the form. Rails has yet another great feature that we can use to reduce this duplication and this feature is called <em>partials</em>.</p>

<p>Partials allow us to extract out comon pieces of views into a file that is then shared across many different views, or in this case, just two views. Let’s remove this
duplication by using a partial. By convention, partial files are
prefixed with an underscore.</p>

<p>TIP: You can read more about partials in the
<a href="layouts_and_rendering.html">Layouts and Rendering in Rails</a> guide.</p>

<p>Create a new file <code class="language-plaintext highlighter-rouge">app/views/articles/_form.html.erb</code>. We’re going to copy <em>most</em> of <code class="language-plaintext highlighter-rouge">app/views/articles/edit.html.erb</code> into this new partial file:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_with</span> <span class="ss">model: </span><span class="n">article</span><span class="p">,</span> <span class="ss">local: </span><span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">form</span><span class="o">|</span> <span class="cp">%&gt;</span>

  <span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">article</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">any?</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"error_explanation"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h2&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">pluralize</span><span class="p">(</span><span class="n">article</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">count</span><span class="p">,</span> <span class="s2">"error"</span><span class="p">)</span> <span class="cp">%&gt;</span> prohibited
        this article from being saved:
      <span class="nt">&lt;/h2&gt;</span>
      <span class="nt">&lt;ul&gt;</span>
        <span class="cp">&lt;%</span> <span class="n">article</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">full_messages</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="cp">%&gt;</span>
          <span class="nt">&lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">msg</span> <span class="cp">%&gt;</span><span class="nt">&lt;/li&gt;</span>
        <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
      <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:title</span> <span class="cp">%&gt;</span><span class="nt">&lt;br&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:title</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:body</span> <span class="cp">%&gt;</span><span class="nt">&lt;br&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_area</span> <span class="ss">:body</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">submit</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>This partial can now be used in both the <code class="language-plaintext highlighter-rouge">new</code> and <code class="language-plaintext highlighter-rouge">edit</code> views. Let’s update the new view:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>New Article<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">'form'</span><span class="p">,</span> <span class="ss">article: </span><span class="vi">@article</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Then do the same for the <code class="language-plaintext highlighter-rouge">app/views/articles/edit.html.erb</code> view:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Edit Article<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">'form'</span><span class="p">,</span> <span class="ss">article: </span><span class="vi">@article</span> <span class="cp">%&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Back'</span><span class="p">,</span> <span class="n">articles_path</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">render</code> call in a view works differently to the <code class="language-plaintext highlighter-rouge">render</code> call in a controller. Back in the <code class="language-plaintext highlighter-rouge">create</code> action for <code class="language-plaintext highlighter-rouge">ArticlesController</code>, we have this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def create
  @article = Article.new(article_params)

  if @article.save
    redirect_to @article
  else
    render 'new'
  end
end
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">render</code> method call will render a <em>view</em>, not a partial. In this case, it will render the <code class="language-plaintext highlighter-rouge">app/views/articles/new.html.erb</code> view.</p>

<p>But when we call <code class="language-plaintext highlighter-rouge">render</code> inside a view, it will render a <em>partial</em>. When we call <code class="language-plaintext highlighter-rouge">render 'form', article: @article</code> inside our <code class="language-plaintext highlighter-rouge">new.html.erb</code> and <code class="language-plaintext highlighter-rouge">edit.html.erb</code> views, this will render the <code class="language-plaintext highlighter-rouge">app/views/articles/_form.html.erb</code> partial. How does Rails know that we want <em>this</em> particular form partial? It assumes we want the one in the same directory as the current view by default. This is another one of Rails’ conventions at work!</p>

<p>The <code class="language-plaintext highlighter-rouge">article: @article</code> syntax at the end of this line tells Rails that we want to pass the instance variable <code class="language-plaintext highlighter-rouge">@article</code> to the partial as a <em>local variable</em> called <code class="language-plaintext highlighter-rouge">article</code>.</p>

<p>Inside that partial, we can access whatever the current article is by using the <code class="language-plaintext highlighter-rouge">article</code> local variable.</p>

<p>Now, an interesting thing happens here. When this partial is rendered for the <code class="language-plaintext highlighter-rouge">new</code> action, the form will submit to the <code class="language-plaintext highlighter-rouge">create</code> action. But when it’s rendered for the <code class="language-plaintext highlighter-rouge">edit</code> action, it will submit to the <code class="language-plaintext highlighter-rouge">update</code> action. Go ahead and try it.</p>

<p>How can one piece of code do two things? The way this works lies in the magic of <code class="language-plaintext highlighter-rouge">form_with</code> and what it outputs, depending on its <code class="language-plaintext highlighter-rouge">model</code> option.</p>

<p>When this partial is rendered by the <code class="language-plaintext highlighter-rouge">new</code> action, the <code class="language-plaintext highlighter-rouge">@article</code> variable is set like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">new</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">form_with</code> helper from Rails detects that this object hasn’t yet been saved to the database, and therefore assumes we want to display a form for <em>creating</em> a new article. If you look at the HTML source from <a href="http://localhost:3000/articles/new">http://localhost:3000/articles/new</a>, you’ll see the form is configured like this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/articles"</span> <span class="na">accept-charset=</span><span class="s">"UTF-8"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>When the form is submitted, it will make a <code class="language-plaintext highlighter-rouge">POST /articles</code> request. This will go to the <code class="language-plaintext highlighter-rouge">create</code> action in <code class="language-plaintext highlighter-rouge">ArticlesController</code>, because that’s how our routes are configured:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">post</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#create"</span>
</code></pre></div></div>

<p>Over in the <code class="language-plaintext highlighter-rouge">edit</code> action, we instead set <code class="language-plaintext highlighter-rouge">@article</code> like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">edit</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">@article</code> represents an article that has already been saved to the database, and so <code class="language-plaintext highlighter-rouge">form_with</code> behaves different. Let’s look at the HTML source from <a href="http://localhost:3000/articles/1/edit">http://localhost:3000/articles/1/edit</a> and see:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/articles/1"</span> <span class="na">accept-charset=</span><span class="s">"UTF-8"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"_method"</span> <span class="na">value=</span><span class="s">"patch"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>This is the same <code class="language-plaintext highlighter-rouge">form_with</code> method call that is running, but it is acting differently. This time, the form is generated with an <code class="language-plaintext highlighter-rouge">action</code> of <code class="language-plaintext highlighter-rouge">/articles/1</code>. The hidden field called <code class="language-plaintext highlighter-rouge">_method</code> will make Rails do a <code class="language-plaintext highlighter-rouge">PATCH /articles/1</code> request. If we look in our routes file, we’ll see that such a request goes to the <code class="language-plaintext highlighter-rouge">update</code> action:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">patch</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#update"</span>
</code></pre></div></div>

<p>This is no coincidence. We have chosen these routes very specifically so that we can follow Rails conventions. The <code class="language-plaintext highlighter-rouge">form_with</code> helper acts differently depending on if the <code class="language-plaintext highlighter-rouge">@article</code> has been saved or not, and so we can use this one partial to represent a form in either <code class="language-plaintext highlighter-rouge">new.html.erb</code> or <code class="language-plaintext highlighter-rouge">edit.html.erb</code>.</p>

<p>Partials are a very handy feature of Rails that we can use to remove duplication between separate views. And combining them with <code class="language-plaintext highlighter-rouge">form_with</code> allows us to merge together two forms into one, without sacrificing any of our sanity.</p>

<h3 id="deleting-articles">Deleting Articles</h3>

<p>We’re now able to see, create, and update articles within our application. The final part that we’ll cover for articles in this guide is how to delete them.</p>

<p>In order to edit articles, we provided a link right next to the article’s title in <code class="language-plaintext highlighter-rouge">app/views/articles/index.html.erb</code>. To delete articles, let’s do the same thing:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>Articles<span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"New Article"</span><span class="p">,</span> <span class="n">new_article_path</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;ul&gt;</span>
  <span class="cp">&lt;%</span> <span class="vi">@articles</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;li&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="n">article</span><span class="p">.</span><span class="nf">title</span><span class="p">,</span> <span class="n">article_path</span><span class="p">(</span><span class="n">article</span><span class="p">)</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"Edit"</span><span class="p">,</span> <span class="n">edit_article_path</span><span class="p">(</span><span class="n">article</span><span class="p">)</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"Delete"</span><span class="p">,</span> <span class="n">article_path</span><span class="p">(</span><span class="n">article</span><span class="p">)</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">link_to</code> won’t delete the article. It will instead take us to the <code class="language-plaintext highlighter-rouge">show</code> action in <code class="language-plaintext highlighter-rouge">ArticlesController</code> and show us the article itself. We need to add one extra thing to this link, which is a <code class="language-plaintext highlighter-rouge">method</code> option:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"Delete"</span><span class="p">,</span> <span class="n">article_path</span><span class="p">(</span><span class="n">article</span><span class="p">),</span> <span class="ss">method: :delete</span>
<span class="cp">%&gt;</span>
</code></pre></div></div>

<p>This will make the link make a <code class="language-plaintext highlighter-rouge">DELETE /articles/:id</code> request. The <code class="language-plaintext highlighter-rouge">DELETE</code> HTTP method is one that we use when we want to delete things.</p>

<p>We can now refresh this page and click one of these “Delete” links. This request currently won’t work, because we don’t have a <code class="language-plaintext highlighter-rouge">DELETE /articles/:id</code> route set up:</p>

<p><img src="/images/getting_started/no_delete_route.png" alt="No delete route" /></p>

<p>Let’s add this route to <code class="language-plaintext highlighter-rouge">config/routes.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">root</span> <span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles/new"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#new"</span><span class="p">,</span> <span class="ss">as: :new_article</span>
  <span class="n">get</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#show"</span><span class="p">,</span> <span class="ss">as: :article</span>
  <span class="n">post</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#create"</span>
  <span class="n">get</span> <span class="s2">"/articles/:id/edit"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#edit"</span><span class="p">,</span> <span class="ss">as: :edit_article</span>
  <span class="n">patch</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#update"</span>
  <span class="n">delete</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#destroy"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This route will now match <code class="language-plaintext highlighter-rouge">DELETE /articles/:id</code> requests and send them to the <code class="language-plaintext highlighter-rouge">destroy</code> action in <code class="language-plaintext highlighter-rouge">ArticlesController</code>. Let’s add this action now in the <code class="language-plaintext highlighter-rouge">ArticlesController</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">destroy</span>
  <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
  <span class="n">article</span><span class="p">.</span><span class="nf">destroy</span>

  <span class="n">redirect_to</span> <span class="n">articles_path</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The complete <code class="language-plaintext highlighter-rouge">ArticlesController</code> in the
<code class="language-plaintext highlighter-rouge">app/controllers/articles_controller.rb</code> file should now look like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArticlesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@articles</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">all</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">article_params</span><span class="p">)</span>

    <span class="k">if</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">save</span>
      <span class="n">redirect_to</span> <span class="vi">@article</span>
    <span class="k">else</span>
      <span class="n">render</span> <span class="s1">'new'</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">edit</span>
    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">update</span>
    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>

    <span class="k">if</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">article_params</span><span class="p">)</span>
      <span class="n">redirect_to</span> <span class="vi">@article</span>
    <span class="k">else</span>
      <span class="n">render</span> <span class="s1">'edit'</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="n">article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
    <span class="n">article</span><span class="p">.</span><span class="nf">destroy</span>

    <span class="n">redirect_to</span> <span class="s1">'/'</span>
  <span class="k">end</span>

  <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">article_params</span>
      <span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:article</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>You can call <code class="language-plaintext highlighter-rouge">destroy</code> on model instances when you want to delete them from the database. Note that we don’t need to add a view for this action since we’re redirecting back to ‘/’ – the root of our application.</p>

<p>If we click “Delete” again on our list of articles, we’ll each article disappear in turn.</p>

<p>We might want to be a little mindful here and ask users if they’re <em>really</em> sure that they want to delete an article. Having a link so close to “Edit” like this is a recipe for disaster!</p>

<p>To prompt the user, we’re going to change the “Delete” link in <code class="language-plaintext highlighter-rouge">app/views/articles/index.html.erb</code> to this:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"Delete"</span><span class="p">,</span>
  <span class="n">article_path</span><span class="p">(</span><span class="n">article</span><span class="p">),</span>
  <span class="ss">method: :delete</span><span class="p">,</span>
  <span class="ss">data: </span><span class="p">{</span>
    <span class="ss">confirm: </span><span class="s2">"Are you sure you want to delete this article?"</span>
  <span class="p">}</span>
<span class="cp">%&gt;</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">data</code> option uses a feature of Rails called <em>Unobtrusive JavaScript</em>. By default, Rails applications come with a little bit of JavaScript for features like this.</p>

<p>TIP: Learn more about Unobtrusive JavaScript on
<a href="working_with_javascript_in_rails.html">Working With JavaScript in Rails</a> guide.</p>

<p>When we refresh this page and click “Delete” once again, we’ll see a new dialog box appear:</p>

<p><img src="/images/getting_started/confirm_dialog.png" alt="Confirm Dialog" /></p>

<p>If you press “Cancel” on this box, nothing will happen. The article will <em>not</em> be deleted. But if you press “OK”, then the article will be deleted. Rails provides this option on links just for links like this “Delete” link. We want people to be <em>really sure</em> that they mean to delete articles before they actually do it!</p>

<p>That is the last of our actions in the <code class="language-plaintext highlighter-rouge">ArticlesController</code>. We now have ways to create, read, update and delete articles. This pattern is so common in Rails applications that it even has its own acronym: CRUD: Create, Read, Update and Delete. What we have built here is a CRUD interface for articles.</p>

<h3 id="routing-for-resources">Routing for resources</h3>

<p>So far, we have not had to write much code to make our application functional. But there’s one extra thing that will massively reduce the lines of code you will write in the future, and that thing is called <em>resource routing</em>.</p>

<p>Rails has a convention that it follows when it comes to routing. When we list a collection of a resource, such as articles, that list is going to appear under the <code class="language-plaintext highlighter-rouge">index</code> action. When we want to see a single resource, such as a single article, that appears at the <code class="language-plaintext highlighter-rouge">show</code> action, and so on.</p>

<p>So far, we have been following this convention in Rails without drawing attention too much attention to it. In this section, we’re going to draw a lot of attention to it. By following this routing convention, we can simplify the code within <code class="language-plaintext highlighter-rouge">config/routes.rb</code> drastically. That file currently contains this code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">root</span> <span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#index"</span>
  <span class="n">get</span> <span class="s2">"/articles/new"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#new"</span><span class="p">,</span> <span class="ss">as: :new_article</span>
  <span class="n">get</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#show"</span><span class="p">,</span> <span class="ss">as: :article</span>
  <span class="n">post</span> <span class="s2">"/articles"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#create"</span>
  <span class="n">get</span> <span class="s2">"/articles/:id/edit"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#edit"</span><span class="p">,</span> <span class="ss">as: :edit_article</span>
  <span class="n">patch</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#update"</span>
  <span class="n">delete</span> <span class="s2">"/articles/:id"</span><span class="p">,</span> <span class="ss">to: </span><span class="s2">"articles#destroy"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We’ve been able to define our routes using the <code class="language-plaintext highlighter-rouge">root</code>, <code class="language-plaintext highlighter-rouge">get</code>, <code class="language-plaintext highlighter-rouge">post</code>, <code class="language-plaintext highlighter-rouge">patch</code> and <code class="language-plaintext highlighter-rouge">delete</code> helpers. But Rails comes with one helper that we haven’t seen yet, and that helper is called <code class="language-plaintext highlighter-rouge">resources</code>.</p>

<p>We can delete most of the code in this routes file and replace it with this method call:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">root</span> <span class="s2">"articles#index"</span>

  <span class="n">resources</span> <span class="ss">:articles</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This one line replaces all 7 of the routes that we had defined previously. This is one of the parts of Rails that people claim as the most “magical”, and hopefully by defining all 7 routes manually first you will gain an appreciation for the elegance of <code class="language-plaintext highlighter-rouge">resources</code> here.</p>

<p>To see what this has done, we can run this command in the terminal:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails routes <span class="nt">--controller</span> articles
</code></pre></div></div>

<p>Or:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails routes <span class="nt">-c</span> articles
</code></pre></div></div>

<p>This command will show us all the routes for the <code class="language-plaintext highlighter-rouge">ArticlesController</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Prefix Verb   URI Pattern                  Controller#Action
        root GET    /                            articles#index
    articles GET    /articles(.:format)          articles#index
 new_article GET    /articles/new(.:format)      articles#new
     article GET    /articles/:id(.:format)      articles#show
             POST   /articles(.:format)          articles#create
edit_article GET    /articles/:id/edit(.:format) articles#edit
             PATCH  /articles/:id(.:format)      articles#update
             DELETE /articles/:id(.:format)      articles#destroy
</code></pre></div></div>

<p>This command shows us four things:</p>

<ul>
  <li>Prefix: The routing helper <em>prefix</em> that can be used to generate this route. For example “article” means <code class="language-plaintext highlighter-rouge">article_path</code> can be used.</li>
  <li>Verb: The HTTP Verb / method that is used to make this request.</li>
  <li>URI pattern: the <em>path</em> of the route that is used to make this request.</li>
  <li>Controller &amp; Action: The controller &amp; action that will serve this request.</li>
</ul>

<p>From this output, we’ll be able to tell that a <code class="language-plaintext highlighter-rouge">GET</code> request to <code class="language-plaintext highlighter-rouge">/articles/new</code> will go to the <code class="language-plaintext highlighter-rouge">ArticlesController</code>’s <code class="language-plaintext highlighter-rouge">new</code> action.</p>

<p>These are all the same routes that we had previously, it’s just that we’re using one line to generate them now instead of 7.</p>

<p>TIP: In general, Rails encourages using resources objects instead of declaring routes manually. For more information about routing, see <a href="routing.html">Rails Routing from the Outside In</a>.</p>

<p>We have now completely finished building the first part of our application. If you’ve gotten this far, give yourself a pat on the back! And maybe a little break before you continue on this guide.</p>

<p>We’re about two-thirds of the way through, and have just a few more features of Rails to show off.</p>

<h2 id="adding-comments">Adding Comments</h2>

<p>Let’s expand this application a little further by adding the ability for users to leave comments on articles.</p>

<h3 id="generating-a-model">Generating a Model</h3>

<p>To start with, we’re going to generate a model for comments.</p>

<p>We’re going to see the same generator that we used before when creating the <code class="language-plaintext highlighter-rouge">Article</code> model. This time we’ll create a <code class="language-plaintext highlighter-rouge">Comment</code> model to hold a reference to an article. Run this command in your terminal:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bin/rails g model Comment commenter:string body:text article:references
</code></pre></div></div>

<p>This command will generate four files:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>invoke  active_record
create    db/migrate/[timestamp]_create_comments.rb
create    app/models/comment.rb
invoke    test_unit
create      test/models/comment_test.rb
create      test/fixtures/comments.yml
</code></pre></div></div>

<p>First, let’s take a look at <code class="language-plaintext highlighter-rouge">app/models/comment.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:article</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This is very similar to the <code class="language-plaintext highlighter-rouge">Article</code> model that you saw earlier. The difference is the line <code class="language-plaintext highlighter-rouge">belongs_to :article</code>, which sets up an Active Record <em>association</em>. You’ll learn a little about associations in the next section of this guide. This <code class="language-plaintext highlighter-rouge">belongs_to</code> was added to our model because we specific <code class="language-plaintext highlighter-rouge">article:references</code> when we generated this model.</p>

<p>The <code class="language-plaintext highlighter-rouge">references</code> type is a special type that define an association between the model that we’re generating and another model. In this case, we’re saying that every comment <em>belongs to</em> an article.</p>

<p>Let’s look at the migration next:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreateComments</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="p">[</span><span class="mf">6.0</span><span class="p">]</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:comments</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">string</span> <span class="ss">:commenter</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">text</span> <span class="ss">:body</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">references</span> <span class="ss">:article</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span><span class="p">,</span> <span class="ss">foreign_key: </span><span class="kp">true</span>

      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">t.references</code> line creates does a few things:</p>

<ol>
  <li>It adds a field called <code class="language-plaintext highlighter-rouge">article_id</code> to the comments table</li>
  <li>A <a href="https://www.essentialsql.com/what-is-a-database-index/">database index</a> is added for that column. This will speed up retrieving comments for particular articles.</li>
  <li>The <code class="language-plaintext highlighter-rouge">null: false</code> option says that in no circumstance can this column be set to a <code class="language-plaintext highlighter-rouge">NULL</code> value.</li>
  <li>The <code class="language-plaintext highlighter-rouge">foreign_key: true</code> option says that this column is linked to the <code class="language-plaintext highlighter-rouge">articles</code> table, and that the column’s values must be represented in the <code class="language-plaintext highlighter-rouge">articles</code> table, in the <code class="language-plaintext highlighter-rouge">id</code> column. There can be no comments without a related article to match.</li>
</ol>

<p>Go ahead and run the migration:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bin/rails db:migrate
</code></pre></div></div>

<p>Rails is smart enough to only execute the migrations that have not already been
run against the current database, so in this case you will just see:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">==</span>  CreateComments: migrating <span class="o">=================================================</span>
<span class="nt">--</span> create_table<span class="o">(</span>:comments<span class="o">)</span>
   -&gt; 0.0115s
<span class="o">==</span>  CreateComments: migrated <span class="o">(</span>0.0119s<span class="o">)</span> <span class="o">========================================</span>
</code></pre></div></div>

<p>This migration will create our comments table. It will look like this in our database:</p>

<table>
  <thead>
    <tr>
      <th>id</th>
      <th>commenter</th>
      <th>body</th>
      <th>article_id</th>
      <th>created_at</th>
      <th>updated_at</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="associating-models">Associating Models</h3>

<p>Active Record associations let you easily declare the relationship between two
models. In the case of comments and articles, you could write out the
relationships this way:</p>

<ul>
  <li>Each comment belongs to one article.</li>
  <li>One article can have many comments.</li>
</ul>

<p>In fact, this is very close to the syntax that Rails uses to declare this
association. You’ve already seen the line of code inside the <code class="language-plaintext highlighter-rouge">Comment</code> model
(app/models/comment.rb) that makes each comment belong to an Article:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:article</span>
<span class="k">end</span>
</code></pre></div></div>

<p>You’ll need to edit <code class="language-plaintext highlighter-rouge">app/models/article.rb</code> to add the other side of the
association:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:comments</span>
  <span class="n">validates</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span><span class="p">,</span>
                    <span class="ss">length: </span><span class="p">{</span> <span class="ss">minimum: </span><span class="mi">5</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>These two declarations enable a good bit of automatic behavior. Let’s explore some of this behaviour by starting up a new console:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails c
</code></pre></div></div>

<p>First, let’s find an article:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb(main):001:0&gt; article = Article.first

Article Load (0.1ms)  SELECT "articles".* FROM "articles" ORDER BY "articles"."id" ASC LIMIT ?  [["LIMIT", 1]]

=&gt; #&lt;Article id: 1, title: "Hello Rails", body: "I'm on Rails", created_at: "2020-01-20 05:22:45", updated_at: "2020-01-20 05:22:45"&gt;
</code></pre></div></div>

<p>Next up, let’s create a new comment for this article by using the <code class="language-plaintext highlighter-rouge">comments</code> association method:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb(main):002:0&gt; article.comments.create(commenter: "DHH", body: "Welcome to Rails!")

Comment Create (0.4ms)  INSERT INTO "comments" ("commenter", "body", "article_id", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?)  [["commenter", "DHH"], ["body", "Welcome to Rails!"], ["article_id", 9], ["created_at", "2020-01-20 06:19:33.572961"], ["updated_at", "2020-01-20 06:19:33.572961"]]

=&gt; #&lt;Comment id: 1, commenter: "DHH", body: "Welcome to Rails!", article_id: 1, created_at: "2020-01-20 06:19:33", updated_at: "2020-01-20 06:19:33"&gt;
</code></pre></div></div>

<p>If you look at the list of attributes here, you’ll see that both <code class="language-plaintext highlighter-rouge">commenter</code> and <code class="language-plaintext highlighter-rouge">body</code> are set the values that we passed in. We have come to expect this behaviour from Active Record: we give it attributes, it sets them on the object.</p>

<p>What we haven’t seen before is what has happened to <code class="language-plaintext highlighter-rouge">article_id</code> here. That attribute has been automatically set to the ID of the <code class="language-plaintext highlighter-rouge">article</code> object. This is what links that <code class="language-plaintext highlighter-rouge">Comment</code> object back to the article.</p>

<p>To find an article’s comments, we can do this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb(main):003:0&gt; article.comments

Comment Load (0.9ms)  SELECT "comments".* FROM "comments" WHERE "comments"."article_id" = ? LIMIT ?  [["article_id", 9], ["LIMIT", 11]]

=&gt; #&lt;ActiveRecord::Associations::CollectionProxy [#&lt;Comment id: 1, commenter: "DHH", body: "Welcome to Rails!", article_id: 9, created_at: "2020-01-20 06:19:33", updated_at: "2020-01-20 06:19:33"&gt;]&gt;
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">comments</code> method on <code class="language-plaintext highlighter-rouge">Article</code> objects allows us to work with the comments for any given article.</p>

<p>Similarly, there is an <code class="language-plaintext highlighter-rouge">article</code> method on comments. Let’s see that in action too:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb(main):004:0&gt; comment = Comment.first

Comment Load (0.2ms)  SELECT "comments".* FROM "comments" ORDER BY "comments"."id" ASC LIMIT ?  [["LIMIT", 1]]

=&gt; #&lt;Comment id: 1, commenter: "DHH", body: "Welcome to Rails!", article_id: 9, created_at: "2020-01-20 06:19:33", updated_at: "2020-01-20 06:19:33"&gt;


irb(main):005:0&gt; comment.article

Article Load (0.2ms)  SELECT "articles".* FROM "articles" WHERE "articles"."id" = ? LIMIT ?  [["id", 9], ["LIMIT", 1]]

=&gt; #&lt;Article id: 9, title: "dsfsadfasdf", body: "asdfasdfasdf", created_at: "2020-01-20 05:22:45", updated_at: "2020-01-20 05:22:45"&gt;
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">article</code> method is granted to us by the <code class="language-plaintext highlighter-rouge">belongs_to</code> method call in the <code class="language-plaintext highlighter-rouge">Comment</code> model.</p>

<p>TIP: For more information on Active Record associations, see the <a href="association_basics.html">Active Record Associations</a> guide.</p>

<h3 id="displaying-comments-on-articles">Displaying comments on articles</h3>

<p>Now that we can create comments on articles, it would be really useful to display them somewhere. The most appropriate place to do that would be within the <code class="language-plaintext highlighter-rouge">app/views/articles/show.html.erb</code> view. Let’s change this view now to display all of the comments:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">title</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">body</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;h2&gt;</span>Comments<span class="nt">&lt;/h2&gt;</span>

<span class="cp">&lt;%</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">comments</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">comment</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;p&gt;</span>
    <span class="nt">&lt;strong&gt;</span>Commenter:<span class="nt">&lt;/strong&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">comment</span><span class="p">.</span><span class="nf">commenter</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;p&gt;</span>
    <span class="nt">&lt;strong&gt;</span>Comment:<span class="nt">&lt;/strong&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">comment</span><span class="p">.</span><span class="nf">body</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;div&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">"Back"</span><span class="p">,</span> <span class="s2">"/"</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>The new code that we’ve just added to this view will go through all of the article’s comments and display the commenter and the comment that was made. When we go to <a href="http://localhost:3000/articles/1">http://localhost:3000/articles/1</a> now, we should see this comment appear:</p>

<p><img src="/images/getting_started/article_with_comments.png" alt="Article with comments" /></p>

<p>Well, that was pretty straight forward! Rails has given us an easy way to list all of the article comments, by way of the <code class="language-plaintext highlighter-rouge">has_many</code> method in the <code class="language-plaintext highlighter-rouge">Article</code> model.</p>

<h3 id="adding-a-comment">Adding a comment</h3>

<p>Now that we have a way to see all of the current comments, let’s add a form that lets us create additional comments. To start with, we’re going to put this form in <code class="language-plaintext highlighter-rouge">app/views/articles/show.html.erb</code>, just below the comments we just added:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">&lt;%</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">comments</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">comment</span><span class="o">|</span> <span class="cp">%&gt;</span>
  ...
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;h2&gt;</span>Add a comment:<span class="nt">&lt;/h2&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">form_with</span> <span class="ss">model: </span><span class="p">[</span><span class="vi">@article</span><span class="p">,</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">comments</span><span class="p">.</span><span class="nf">build</span><span class="p">],</span> <span class="ss">local: </span><span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">form</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:commenter</span> <span class="cp">%&gt;</span><span class="nt">&lt;br&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:commenter</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:body</span> <span class="cp">%&gt;</span><span class="nt">&lt;br&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_area</span> <span class="ss">:body</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">submit</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>This form looks almost like the one in <code class="language-plaintext highlighter-rouge">app/views/articles/_form.html.erb</code>, but it has one key difference: the <code class="language-plaintext highlighter-rouge">model</code> key has been passed an array, instead of a single model instance. What will happen here is that the form will build what’s called a <em>nested route</em> for the comment.</p>

<p>The second element in that array is <code class="language-plaintext highlighter-rouge">@article.comments.build</code>. This is a helper method that comes from <code class="language-plaintext highlighter-rouge">has_many</code>, that is essentially equivalent to this code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Comment.new(article_id: @article.id)
</code></pre></div></div>

<p>We’re going to be building a new comment for the purposes of saving it to the database, eventually.</p>

<p>If we refresh <a href="http://localhost:3000/articles/1">http://localhost:3000/articles/1</a>, we’ll see an error message which hints a little bit at this nested route:</p>

<p><img src="/images/getting_started/no_method_error_article_comments_path.png" alt="NoMethodError: article_comments_path" /></p>

<p>The <code class="language-plaintext highlighter-rouge">form_with</code> helper here is attempting to use a routing helper called <code class="language-plaintext highlighter-rouge">article_comments_path</code> to generate the route for the form. This routing helper doesn’t exist yet, and we’ll create it in a moment. But first, let’s talk about how Rails came to be wanting <code class="language-plaintext highlighter-rouge">article_comments_path</code> in the first place.</p>

<p>When we use <code class="language-plaintext highlighter-rouge">form_with</code>’s <code class="language-plaintext highlighter-rouge">:model</code> option, it combines the <em>class names</em> of the resources we pass it into a routing helper. Back when we were doing <code class="language-plaintext highlighter-rouge">form_with model: @article</code>, it would see that the class name of <code class="language-plaintext highlighter-rouge">@article</code> was <code class="language-plaintext highlighter-rouge">Article</code>. Then, <code class="language-plaintext highlighter-rouge">form_with</code> would see if this object had been saved to the database before or not. If the object had not been saved, the form would use <code class="language-plaintext highlighter-rouge">articles_path</code> – the <em>plural</em> version of the routing helper. If the object had been saved, it would use <code class="language-plaintext highlighter-rouge">article_path</code> – the <em>singular</em> version of routing helper.</p>

<p>The same rule applies here. <code class="language-plaintext highlighter-rouge">form_with</code>’s underlying code checks to see what <code class="language-plaintext highlighter-rouge">@article</code> is first. It’s an <code class="language-plaintext highlighter-rouge">Article</code> that has been saved to the database, so the first part of the routing helper is <code class="language-plaintext highlighter-rouge">article</code>. Then it checks what <code class="language-plaintext highlighter-rouge">@article.comments.build</code> is. This object is a <code class="language-plaintext highlighter-rouge">Comment</code> that has <em>not</em> been saved to the database, so the helper’s next component is <code class="language-plaintext highlighter-rouge">comments</code>. Then we’re out of array elements, so <code class="language-plaintext highlighter-rouge">form_with</code> puts <code class="language-plaintext highlighter-rouge">_path</code> on the end. This is how we arrive at <code class="language-plaintext highlighter-rouge">article_comments_path</code>.</p>

<p>This is another one of those excellent Rails conventions you’ve heard about throughout this guide. And it’s one of the more “magical” (or “confusing”) aspects of Rails. So don’t worry too much if you don’t get it first pass.</p>

<p>In order to solve the issue here, we need to add the route that has that routing helper. This time, however, instead of writing seven routes one-at-a-time for comments, just like we did for articles, we’re going to use <code class="language-plaintext highlighter-rouge">resources</code> again.</p>

<p>Open up the <code class="language-plaintext highlighter-rouge">config/routes.rb</code> file again, and edit it as follows:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">root</span> <span class="s2">"articles#index"</span>

  <span class="n">resources</span> <span class="ss">:articles</span> <span class="k">do</span>
    <span class="n">resources</span> <span class="ss">:comments</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This creates <code class="language-plaintext highlighter-rouge">comments</code> as a <em>nested resource</em> within <code class="language-plaintext highlighter-rouge">articles</code>. This is another part of capturing the hierarchical relationship that exists between articles and comments. By nesting comments inside of articles like this, this will give us the <code class="language-plaintext highlighter-rouge">article_comments_path</code> helper that our form is expecting.</p>

<p>We can verify this by going into a terminal and running:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails routes -c comments
</code></pre></div></div>

<p>And we’ll see these routes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>              Prefix Verb   URI Pattern                                       Controller#Action
    article_comments GET    /articles/:article_id/comments(.:format)          comments#index
                     POST   /articles/:article_id/comments(.:format)          comments#create
 new_article_comment GET    /articles/:article_id/comments/new(.:format)      comments#new
edit_article_comment GET    /articles/:article_id/comments/:id/edit(.:format) comments#edit
     article_comment GET    /articles/:article_id/comments/:id(.:format)      comments#show
                     PATCH  /articles/:article_id/comments/:id(.:format)      comments#update
                     PUT    /articles/:article_id/comments/:id(.:format)      comments#update
                     DELETE /articles/:article_id/comments/:id(.:format)      comments#destroy
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">article_comments</code> routing helper is the first line. We can see from this routing helper that it will generate the following path:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/articles/:article_id/comments
</code></pre></div></div>

<p>We can see this in action if we go back to <a href="http://localhost:3000/articles/1">http://localhost:3000/articles/1</a> and inspect the page’s HTML source again. We’ll see the form has that route as its <code class="language-plaintext highlighter-rouge">action</code> attribute:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/articles/9/comments"</span> <span class="na">accept-charset=</span><span class="s">"UTF-8"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>TIP: For more information on routing, see the <a href="routing.html">Rails Routing</a>
guide.</p>

<p>When we fill out the comment form and click “Create Comment”, we’ll now see that the <code class="language-plaintext highlighter-rouge">CommentsController</code> is missing:</p>

<p><img src="/images/getting_started/comments_controller_missing.png" alt="Comments Controller missing" /></p>

<h3 id="generating-a-controller">Generating a Controller</h3>

<p>To fix this issue, we will need to generate the <code class="language-plaintext highlighter-rouge">CommentsController</code>. Let’s do that now:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bin/rails g controller comments
</code></pre></div></div>

<p>This creates four files and one empty directory:</p>

<table>
  <thead>
    <tr>
      <th>File/Directory</th>
      <th>Purpose</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>app/controllers/comments_controller.rb</td>
      <td>The Comments controller</td>
    </tr>
    <tr>
      <td>app/views/comments/</td>
      <td>Views of the controller are stored here</td>
    </tr>
    <tr>
      <td>test/controllers/comments_controller_test.rb</td>
      <td>The test for the controller</td>
    </tr>
    <tr>
      <td>app/helpers/comments_helper.rb</td>
      <td>A view helper file</td>
    </tr>
    <tr>
      <td>app/assets/stylesheets/comments.scss</td>
      <td>Cascading style sheet for the controller</td>
    </tr>
  </tbody>
</table>

<p>If we attempt to submit the form again, we’ll see that the <code class="language-plaintext highlighter-rouge">create</code> action is missing in this new controller:</p>

<p><img src="/images/getting_started/create_action_comments_controller.png" alt="Create action missing in CommentsController" /></p>

<p>Let’s wire up the <code class="language-plaintext highlighter-rouge">create</code> in <code class="language-plaintext highlighter-rouge">app/controllers/comments_controller.rb</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CommentsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:article_id</span><span class="p">])</span>
    <span class="vi">@comment</span> <span class="o">=</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">comments</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">comment_params</span><span class="p">)</span>
    <span class="n">redirect_to</span> <span class="n">article_path</span><span class="p">(</span><span class="vi">@article</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">comment_params</span>
      <span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:comment</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:commenter</span><span class="p">,</span> <span class="ss">:body</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>You’ll see a bit more complexity here than you did in the controller for articles. That’s a side-effect of the nesting that you’ve set up. Each request for a comment has to keep track of the article to which the comment is attached, thus the initial call to the <code class="language-plaintext highlighter-rouge">find</code> method of the <code class="language-plaintext highlighter-rouge">Article</code> model to get the article in question.</p>

<p>But where did we get the idea for <code class="language-plaintext highlighter-rouge">article_id</code> from? Well, if we look at our route again with:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails routes -c comments
</code></pre></div></div>

<p>Then we’ll see:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>              Prefix Verb   URI Pattern                                       Controller#Action
    article_comments GET    /articles/:article_id/comments
</code></pre></div></div>

<p>The colon before <code class="language-plaintext highlighter-rouge">:article_id</code> indicates that this part of the URL will be available as <code class="language-plaintext highlighter-rouge">params[:article_id]</code> in our controller. This is why we’re using <code class="language-plaintext highlighter-rouge">:article_id</code> here, and not <code class="language-plaintext highlighter-rouge">:id</code>.</p>

<p>In addition, the code takes advantage of some of the methods available for an association. We use the <code class="language-plaintext highlighter-rouge">create</code> method on <code class="language-plaintext highlighter-rouge">@article.comments</code> to create and save the comment. This will automatically link the comment so that it belongs to
that particular article, just as we saw earlier when we created a comment in the Rails console.</p>

<p>Once we have made the new comment, we send the user back to the original article using the <code class="language-plaintext highlighter-rouge">article_path(@article)</code> helper. As we have already seen, this calls the <code class="language-plaintext highlighter-rouge">show</code> action of the <code class="language-plaintext highlighter-rouge">ArticlesController</code> which in turn renders the <code class="language-plaintext highlighter-rouge">show.html.erb</code> template.</p>

<p>If we fill out the comment form again, we will see our comment appear.</p>

<p>Now you can add articles and comments to your blog and have them show up in the right places.</p>

<p><img src="/images/getting_started/article_with_two_comments.png" alt="Article with Two Comments" /></p>

<h2 id="refactoring">Refactoring</h2>

<p>Now that we have articles and comments working, take a look at the <code class="language-plaintext highlighter-rouge">app/views/articles/show.html.erb</code> template. It is getting long and awkward. We can use partials to clean this view up.</p>

<h3 id="rendering-partial-collections">Rendering Partial Collections</h3>

<p>First, we will make a comment partial to extract showing all the comments for the article. Create the file <code class="language-plaintext highlighter-rouge">app/views/comments/_comment.html.erb</code> and put the following into it:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>
  <span class="nt">&lt;strong&gt;</span>Commenter:<span class="nt">&lt;/strong&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">comment</span><span class="p">.</span><span class="nf">commenter</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span>
  <span class="nt">&lt;strong&gt;</span>Comment:<span class="nt">&lt;/strong&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">comment</span><span class="p">.</span><span class="nf">body</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>Then you can change <code class="language-plaintext highlighter-rouge">app/views/articles/show.html.erb</code> to look like the
following:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>
  <span class="nt">&lt;strong&gt;</span>Title:<span class="nt">&lt;/strong&gt;</span>
  <span class="cp">&lt;%=</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">title</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span>
  <span class="nt">&lt;strong&gt;</span>Text:<span class="nt">&lt;/strong&gt;</span>
  <span class="cp">&lt;%=</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">text</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;h2&gt;</span>Comments<span class="nt">&lt;/h2&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">comments</span> <span class="cp">%&gt;</span>

...
</code></pre></div></div>

<p>This is the third style of <code class="language-plaintext highlighter-rouge">render</code> that we’ve seen throughout this guide.</p>

<p>The first was <code class="language-plaintext highlighter-rouge">render</code> in an action. That one will render a view by using code like <code class="language-plaintext highlighter-rouge">render "new"</code>.</p>

<p>The second was <code class="language-plaintext highlighter-rouge">render</code> in a view, we saw it in <code class="language-plaintext highlighter-rouge">app/views/articles/new.html.erb</code> and <code class="language-plaintext highlighter-rouge">app/views/articles/edit.html.erb</code>. It was written as <code class="language-plaintext highlighter-rouge">&lt;%= render "form", article: @article %&gt;</code>, and that meant to render the partial at <code class="language-plaintext highlighter-rouge">app/views/articles/_form.html.erb</code>.</p>

<p>This third one is <code class="language-plaintext highlighter-rouge">render</code> with a collection of objects. Rails will inspect these objects and see what class they are, and then it will render a partial that matches the name of the class: <code class="language-plaintext highlighter-rouge">comments/_comment.html.erb</code> for this one. If we were to do the same sort of thing for articles, it would render <code class="language-plaintext highlighter-rouge">articles/_article.html.erb</code>.</p>

<p>Inside the <code class="language-plaintext highlighter-rouge">comments/_comment.html.erb</code> partial, we’re able to refer to the local variable <code class="language-plaintext highlighter-rouge">comment</code> to refer to each comment, just like we did earlier with the <code class="language-plaintext highlighter-rouge">each</code> version of this code.</p>

<h3 id="rendering-a-partial-form">Rendering a Partial Form</h3>

<p>Let’s keep tidying up this <code class="language-plaintext highlighter-rouge">app/views/articles/show.html.erb</code> view. We can definitely move that comment form out too.</p>

<p>Let us also move that new comment section out to its own partial. To do this, we create a file <code class="language-plaintext highlighter-rouge">app/views/comments/_form.html.erb</code> containing:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_with</span> <span class="ss">model: </span><span class="p">[</span><span class="n">article</span><span class="p">,</span> <span class="n">article</span><span class="p">.</span><span class="nf">comments</span><span class="p">.</span><span class="nf">build</span><span class="p">],</span> <span class="ss">local: </span><span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">form</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:commenter</span> <span class="cp">%&gt;</span><span class="nt">&lt;br&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:commenter</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:body</span> <span class="cp">%&gt;</span><span class="nt">&lt;br&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">text_area</span> <span class="ss">:body</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>
    <span class="cp">&lt;%=</span> <span class="n">form</span><span class="p">.</span><span class="nf">submit</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/p&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Then you make the <code class="language-plaintext highlighter-rouge">app/views/articles/show.html.erb</code> look like the following:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...

<span class="nt">&lt;h2&gt;</span>Comments<span class="nt">&lt;/h2&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">comments</span> <span class="cp">%&gt;</span>

<span class="nt">&lt;h2&gt;</span>Add a comment:<span class="nt">&lt;/h2&gt;</span>
<span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s2">"comments/form"</span><span class="p">,</span> <span class="ss">article: </span><span class="vi">@article</span> <span class="cp">%&gt;</span>

...
</code></pre></div></div>

<p>This is the second version of the <code class="language-plaintext highlighter-rouge">render</code> method: it will render that partial at <code class="language-plaintext highlighter-rouge">app/views/comments/_form.html.erb</code> and pass through the instance variable of <code class="language-plaintext highlighter-rouge">@article</code> as a local variable called <code class="language-plaintext highlighter-rouge">article</code> to that partial.</p>

<h2 id="deleting-comments">Deleting Comments</h2>

<p>Another important feature of a blog is being able to delete spam comments. To do this, we need to implement a link of some sort in the view and a <code class="language-plaintext highlighter-rouge">destroy</code>
action in the <code class="language-plaintext highlighter-rouge">CommentsController</code>.</p>

<p>So first, let’s add the delete link in the
<code class="language-plaintext highlighter-rouge">app/views/comments/_comment.html.erb</code> partial:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>
  <span class="nt">&lt;strong&gt;</span>Commenter:<span class="nt">&lt;/strong&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">comment</span><span class="p">.</span><span class="nf">commenter</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span>
  <span class="nt">&lt;strong&gt;</span>Comment:<span class="nt">&lt;/strong&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">comment</span><span class="p">.</span><span class="nf">body</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Destroy Comment'</span><span class="p">,</span> <span class="p">[</span><span class="n">comment</span><span class="p">.</span><span class="nf">article</span><span class="p">,</span> <span class="n">comment</span><span class="p">],</span>
               <span class="ss">method: :delete</span><span class="p">,</span>
               <span class="ss">data: </span><span class="p">{</span> <span class="ss">confirm: </span><span class="s1">'Are you sure?'</span> <span class="p">}</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>The second argument to <code class="language-plaintext highlighter-rouge">link_to</code> is new to us. Well, sort of. We’ve seen it just before in the form for comments, but that was with <code class="language-plaintext highlighter-rouge">form_with</code>, and this is with <code class="language-plaintext highlighter-rouge">link_to</code>. This syntax for <code class="language-plaintext highlighter-rouge">link_to</code> works exactly the same as it did back in <code class="language-plaintext highlighter-rouge">form_with</code>; it works to build a routing helper. The <code class="language-plaintext highlighter-rouge">link_to</code> helper checks to see what kind of object <code class="language-plaintext highlighter-rouge">comment.article</code> is. It’s an <code class="language-plaintext highlighter-rouge">Article</code> object and that object exists in the database, so the first part of that helper is <code class="language-plaintext highlighter-rouge">article</code>. Then the second object is a <code class="language-plaintext highlighter-rouge">Comment</code> object, and so the second part is <code class="language-plaintext highlighter-rouge">comment</code>. This means that the routing helper used will be <code class="language-plaintext highlighter-rouge">article_comment_path</code>.</p>

<p>We could write this code out in a longer fashion if we wished:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>
  <span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">'Destroy Comment'</span><span class="p">,</span> <span class="n">article_comment_path</span><span class="p">(</span><span class="n">comment</span><span class="p">.</span><span class="nf">article</span><span class="p">,</span> <span class="n">comment</span><span class="p">),</span>
               <span class="ss">method: :delete</span><span class="p">,</span>
               <span class="ss">data: </span><span class="p">{</span> <span class="ss">confirm: </span><span class="s1">'Are you sure?'</span> <span class="p">}</span> <span class="cp">%&gt;</span>
<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>But Rails’ routing conventions save us some time and keystrokes by allowing us to write <code class="language-plaintext highlighter-rouge">[comment.article, comment]</code> instead.</p>

<p>Clicking this new “Destroy Comment” link will fire off a <code class="language-plaintext highlighter-rouge">DELETE /articles/:article_id/comments/:id</code> to our <code class="language-plaintext highlighter-rouge">CommentsController</code>, which can then use this to find the comment we want to delete. Right now, the <code class="language-plaintext highlighter-rouge">destroy</code> action that matches that route is missing, and so we will see this if we attempt to delete a comment:</p>

<p><img src="/images/getting_started/comments_destroy_not_found.png" alt="Destroy not found" /></p>

<p>So let’s add a <code class="language-plaintext highlighter-rouge">destroy</code> action
to our controller (<code class="language-plaintext highlighter-rouge">app/controllers/comments_controller.rb</code>):</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CommentsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:article_id</span><span class="p">])</span>
    <span class="vi">@comment</span> <span class="o">=</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">comments</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">comment_params</span><span class="p">)</span>
    <span class="n">redirect_to</span> <span class="n">article_path</span><span class="p">(</span><span class="vi">@article</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:article_id</span><span class="p">])</span>
    <span class="vi">@comment</span> <span class="o">=</span> <span class="vi">@article</span><span class="p">.</span><span class="nf">comments</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
    <span class="vi">@comment</span><span class="p">.</span><span class="nf">destroy</span>
    <span class="n">redirect_to</span> <span class="n">article_path</span><span class="p">(</span><span class="vi">@article</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">comment_params</span>
      <span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:comment</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">:commenter</span><span class="p">,</span> <span class="ss">:body</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">destroy</code> action will find the article we are looking at, locate the comment within the <code class="language-plaintext highlighter-rouge">@article.comments</code> collection, and then remove it from the database and send us back to the show action for the article.</p>

<p>If we attempt to delete a comment again, this time it will disppaear.</p>

<h3 id="deleting-associated-objects">Deleting Associated Objects</h3>

<p>If you delete an article, its associated comments will also need to be deleted, otherwise we would see an <code class="language-plaintext highlighter-rouge">ActiveRecord::InvalidForeignKey</code> error happen:</p>

<p><img src="/images/getting_started/foreign_key_constraint.png" alt="Foreign key constraint" /></p>

<p>This error happens because the database will not allow <code class="language-plaintext highlighter-rouge">comments</code> to be without an associated article, due to this line in the <code class="language-plaintext highlighter-rouge">db/migrate/[timestamp]_create_comments.rb</code> migration:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>t.references :article, null: false, foreign_key: true
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">foreign_key</code> option on this line, when set to <code class="language-plaintext highlighter-rouge">true</code>, says  that the <code class="language-plaintext highlighter-rouge">article_id</code> column within the <code class="language-plaintext highlighter-rouge">comments</code> table must have a matching <code class="language-plaintext highlighter-rouge">id</code> value in the <code class="language-plaintext highlighter-rouge">articles</code> table. If a situation arises where this <em>might</em> happen, the database raises a <em>foreign key constraint</em> error, which is what we’re seeing here.</p>

<p>To avoid this issue, we need to give our <code class="language-plaintext highlighter-rouge">Article</code>’s <code class="language-plaintext highlighter-rouge">comments</code> association one extra option, called <code class="language-plaintext highlighter-rouge">dependent</code>. Let’s change <code class="language-plaintext highlighter-rouge">app/models/article.rb</code> to this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">dependent: :destroy</span>
  <span class="n">validates</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">presence: </span><span class="kp">true</span><span class="p">,</span>
                    <span class="ss">length: </span><span class="p">{</span> <span class="ss">minimum: </span><span class="mi">5</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Now when an article is deleted, all of its comments will be deleted too, and we will avoid having a foreign key constraint error happen.</p>

<h2 id="security">Security</h2>

<h3 id="basic-authentication">Basic Authentication</h3>

<p>If you were to publish your blog online, anyone would be able to add, edit and delete articles or delete comments.</p>

<p>Rails provides a very simple HTTP authentication system that will work nicely in this situation.</p>

<p>In the <code class="language-plaintext highlighter-rouge">ArticlesController</code> we need to have a way to block access to the various actions if the person is not authenticated. Here we can use the Rails <code class="language-plaintext highlighter-rouge">http_basic_authenticate_with</code> method, which allows access to the requested action if that method allows it.</p>

<p>To use the authentication system, we specify it at the top of our <code class="language-plaintext highlighter-rouge">ArticlesController</code> in <code class="language-plaintext highlighter-rouge">app/controllers/articles_controller.rb</code>. In our case, we want the user to be authenticated on every action except <code class="language-plaintext highlighter-rouge">index</code> and <code class="language-plaintext highlighter-rouge">show</code>,
so we write that:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ArticlesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="n">http_basic_authenticate_with</span> <span class="ss">name: </span><span class="s2">"dhh"</span><span class="p">,</span> <span class="ss">password: </span><span class="s2">"secret"</span><span class="p">,</span> <span class="ss">except: </span><span class="p">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:show</span><span class="p">]</span>

  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@articles</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">all</span>
  <span class="k">end</span>

  <span class="c1"># snippet for brevity</span>
</code></pre></div></div>

<p>We also want to allow only authenticated users to delete comments, so in the <code class="language-plaintext highlighter-rouge">CommentsController</code> (<code class="language-plaintext highlighter-rouge">app/controllers/comments_controller.rb</code>) we write:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CommentsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="n">http_basic_authenticate_with</span> <span class="ss">name: </span><span class="s2">"dhh"</span><span class="p">,</span> <span class="ss">password: </span><span class="s2">"secret"</span><span class="p">,</span> <span class="ss">only: :destroy</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:article_id</span><span class="p">])</span>
    <span class="c1"># ...</span>
  <span class="k">end</span>

  <span class="c1"># snippet for brevity</span>
</code></pre></div></div>

<p>Now if you try to create a new article, you will be greeted with a basic HTTP Authentication challenge:</p>

<p><img src="images/getting_started/challenge.png" alt="Basic HTTP Authentication Challenge" /></p>

<p>Other authentication methods are available for Rails applications. Two popular
authentication add-ons for Rails are the
<a href="https://github.com/plataformatec/devise">Devise</a> rails engine and
the <a href="https://github.com/binarylogic/authlogic">Authlogic</a> gem,
along with a number of others.</p>

<h3 id="other-security-considerations">Other Security Considerations</h3>

<p>Security, especially in web applications, is a broad and detailed area. Security
in your Rails application is covered in more depth in
the <a href="security.html">Ruby on Rails Security Guide</a>.</p>

<h2 id="whats-next">What’s Next?</h2>

<p>Now that you’ve seen your first Rails application, you should feel free to
update it and experiment on your own.</p>

<p>Remember, you don’t have to do everything without help. As you need assistance
getting up and running with Rails, feel free to consult these support
resources:</p>

<ul>
  <li>The <a href="index.html">Ruby on Rails Guides</a></li>
  <li>The <a href="https://groups.google.com/group/rubyonrails-talk">Ruby on Rails mailing list</a></li>
  <li>The <a href="irc://irc.freenode.net/#rubyonrails">#rubyonrails</a> channel on irc.freenode.net</li>
</ul>

<h2 id="configuration-gotchas">Configuration Gotchas</h2>

<p>The easiest way to work with Rails is to store all external data as UTF-8. If
you don’t, Ruby libraries and Rails will often be able to convert your native
data into UTF-8, but this doesn’t always wowrk reliably, so you’re better off
ensuring that all external data is UTF-8.</p>

<p>If you have made a mistake in this area, the most common symptom is a black
diamond with a question mark inside appearing in the browser. Another common
symptom is characters like “Ã¼” appearing instead of “ü”. Rails takes a number
of internal steps to mitigate common causes of these problems that can be
automatically detected and corrected. However, if you have external data that is
not stored as UTF-8, it can occasionally result in these kinds of issues that
cannot be automatically detected by Rails and corrected.</p>

<p>Two very common sources of data that are not UTF-8:</p>

<ul>
  <li>Your text editor: Most text editors (such as TextMate), default to saving
files as UTF-8. If your text editor does not, this can result in special
characters that you enter in your templates (such as é) to appear as a diamond
with a question mark inside in the browser. This also applies to your i18n
translation files. Most editors that do not already default to UTF-8 (such as
some versions of Dreamweaver) offer a way to change the default to UTF-8. Do
so.</li>
  <li>Your database: Rails defaults to converting data from your database into UTF-8
at the boundary. However, if your database is not using UTF-8 internally, it
may not be able to store all characters that your users enter. For instance,
if your database is using Latin-1 internally, and your user enters a Russian,
Hebrew, or Japanese character, the data will be lost forever once it enters
the database. If possible, use UTF-8 as the internal storage of your database.</li>
</ul>
]]></content>
 </entry>
 
 <entry>
   <title>They fixed the keyboard</title>
   <link href="http://ryanbigg.com/2019/11/they-fixed-the-keyboard"/>
   <updated>2019-11-28T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2019/11/they-fixed-the-keyboard</id>
   <content type="html"><![CDATA[<p>Consider this post a sequel to my <a href="https://ryanbigg.com/2019/08/can-apple-please-design-a-laptop-that-has-a-functional-keyboard-for-the-love-of-all-that-is-precious">
The 2018 MacBook Pro Keyboard Drives Me Crazy
(Aug ‘19)</a> post from earlier in the year.</p>

<p>In that post, I listed the following complaints about the 2018 MacBook Pro keyboard:</p>

<blockquote>
  <ul>
    <li>duplicated “o’s” that I’ve had to go back and fix, or missing ones – guess how fun it is to write <a href="https://leanpub.com/elixir-toyrobot">a book about a Toy Robot</a> with this particular problem</li>
    <li>double spaces – or no spaces</li>
    <li>a Command key that registers 9 out of every 10 times</li>
    <li>words like “times” that inexplicably get spelled like “timies”, or “about” that gets spelled like “abouot”</li>
  </ul>
</blockquote>

<p>I’ve now been using a brand-new 2019 MacBook Pro for about 5 hours and I’ve been using the keyboard <em>extensively</em> during the setup of this machine.</p>

<p>Those complaints that I had above? They don’t exist on this keyboard. There has been no duplicated letters, spaces, dodgy Command keys, or mispelled words that were not my clumsiness.</p>

<p>I’ve <em>felt</em> more productive on this keyboard since I got it. I’m guessing because I didn’t have to go back and fix up so many mistakes.</p>

<p>But I wanted to get quantifiable data on this, and given that I <em>type for a living</em> what better way to do this than to run a few tests.</p>

<p>So I went over to <a href="https://typeracer.com">TypeRacer</a> on my <em>old</em> MacBook Pro and scored in the 95-105WPM range over 5 tests.</p>

<p>Then I went to TypeRacer on my <em>new</em> MacBook Pro and did 5 more tests.</p>

<p>My range there was 105-120WPM. So I’m typing at 15-20WPM faster on this keyboard than I was on the old one.</p>

<p>This keyboard <em>is</em> better for me than the old one was. It seems that Apple has fixed the keyboard issues.</p>

<p>Bravo.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Rough Edges</title>
   <link href="http://ryanbigg.com/2019/11/rough-edges"/>
   <updated>2019-11-18T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2019/11/rough-edges</id>
   <content type="html"><![CDATA[<p>Our job as software developers is to make functional software.</p>

<p>A user should be able to use our software to accomplish tasks that might otherwise take a long time if they were doing it without computers. This has a wide-and-varied range, of course. But the main thing is that we need to make software <em>that works</em>.</p>

<p>If we didn’t do that, we would find ourselves out of a job very quickly.</p>

<p>However, functional software shouldn’t just be the only thing we strive for.</p>

<p>We should also strive to eliminiate rough edges in our software. We can do this through a process of quality assurance testing, introspection and by plain old taking feedback from our users <em>and acting on it</em>.</p>

<p>We need to listen to real user feedback, discover what the rough edges are in our software and work to eliminate the roughness.</p>

<p>For users of our software this can look like:</p>

<ul>
  <li>A page that takes 10 seconds to load <em>is a rough edge</em>. Could we make it load in 5 seconds, or under a second? Why are our users waiting so long?</li>
  <li>A process that takes a user several clicks through tricky menus <em>is a rough edge</em>. Can we make a shortcut for common user flows instead?</li>
  <li>A part of our application that works on browsers, but not on mobile <em>is a rough edge</em>. Can we make that page responsive and useable on devices smaller than a 30” desktop or 13” laptop?</li>
  <li>A feature that works in one part of our application, but not in another <em>is a rough edge</em>. A feature should work in predictable ways, everywhere. For instance: <code class="language-plaintext highlighter-rouge">/collapse</code> works in the main Slack window, but not in threads. Why not?</li>
</ul>

<p>Rough edges in software are human-software interaction problems. They should be treated at the same level as a bug or as an exception. A rough edge <em>is an exceptional thing</em>.</p>

<p>We must work to make functional, smooth software that is pleasing to use. Software that is as free as rough edges as we can make it.</p>
]]></content>
 </entry>
 
 <entry>
   <title>RubyConf Indonesia Keynote - Transcript</title>
   <link href="http://ryanbigg.com/2019/09/hiring-juniors-2019"/>
   <updated>2019-09-19T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2019/09/hiring-juniors-2019</id>
   <content type="html"><![CDATA[<p><em>This post (and talk) is an updated version of my <a href="/2018/03/hiring-juniors">2018 “Hiring Juniors” talk at RubyConf AU</a>. This version of the talk was given at RubyConf Indonesia 2019 as the closing keynote. You can view <a href="https://speakerdeck.com/radar/hiring-juniors-rubyconf-indonesia-2019-closing-keynote">the slides for this talk on Speakerdeck</a></em></p>

<h2 id="intro">Intro</h2>

<p>Who’s hiring right now?</p>

<p>And who’s finding it easy to hire developers at the moment?</p>

<p>If you said it was easy to hire developers at the moment, you’re either very lucky or lying.</p>

<p>I work at a company back in Australia called Culture Amp and for the three years I’ve worked there I’ve never known hiring developers to be an easy task. There just isn’t anyone out there to hire! Everyone’s already working somewhere else. I hear this story from everyone I speak to.</p>

<p>It feels a bit like this.</p>

<p>But the industry is booming! Us developer folk are in a golden era of profitability and growth. To keep pace with that growth, we keep trying to hire more developers, but we have a really hard time with that.</p>

<p>We need to try something different. But what?</p>

<p>Hiring more mids and seniors doesn’t work, and so we need to look elsewhere.</p>

<p>The solution to this problem is to hire junior developers. That’s a scary concept, isn’t it? “Junior developer” evokes images of frustration, lost productivity and accidentally dropped production databases. But it doesn’t need to be scary. In fact, it can be the opposite.</p>

<p>I run a program at Culture Amp called the Junior Engineering Program where we have successfully hired and trained 18 junior developers to be the next generation of amazing talent at our company. And I’m so proud of them all.</p>

<p>You can do it too and I’ll tell you how.</p>

<p>“But Ryan, we only hire senior Ruby developers!” – ahh the classic
ActiveMantra in the Rails community: “Hiring seniors. Hiring seniors. Hiring seniors.”. Maybe if we say it enough and click our heels together three times our dreams might come true.</p>

<p>But how’s that working out for you at the moment? Probably not so great. It’s well known that there are only three hard problems in computer science: cache invalidation, naming things and hiring more seniors.</p>

<p>We have drained the talent pool dry. And yet our obsession and our Active Mantra continues. We only want to hire seniors. But why do we have this obsession?</p>

<p>Well, we want a senior developer – but we might be happy to take a mid too – because they have the skills to instantly dive straight into our application with little-to-no guidance and they can start shipping code. That old expression: “they can hit the ground running”.</p>

<p>This is because our code is so brilliantly well-structured and organized according to the Rails best practices. Nobody will have to upskill on any single parts of the codebase at all because we follow the Laws of Sandi and Commandments of Avdi to the letter.</p>

<p>There is no legacy code with their legacy decisions that meta-programs the constants from Java, written in a hurry because we needed to ship that thing <em>fast</em>.</p>

<p>You may think that you need to hire only these best-of-the-best badasses because your application is a large unmaintable collection of event-sourced microservices written in obscure languages surrounding a ginormous monolith and only the badasses can understand it. That you need seniors to navigate the spaghetti that is your legacy code. Maybe you use technologies that only <em>true</em> geniuses can understand, like Node or Go. Or Webpack.</p>

<p>That may indeed be the case. After all, if our code was simple, elegant and only written in a single Ruby monolith, would as many of us still be employed?</p>

<p>Companies spend thousands of dollars hunting the elusive 10x Developer Rockstar Unicorns (note: term used ironically), but the Unicorns are no longer out grazing in the sunny meadows, readily available for capture.  They’re already working somewhere else and the conditions of where they work are extremely competitive. The stables in which these Unicorns are now kept are filled with energy drinks, ping pong tables, lucrative salary bonuses and other extremely good perks. You will have a hard time luring these Unicorns away.</p>

<p>We’re out of freely available Rockstar Unicorns because they’re already employed elsewhere. Attempting to hire them is an exercise in futility. And so it’s time that we started to grow our own. It’s time that we started to hire and train our own 10x Developer Rockstar Unicorns.</p>

<hr />

<p>But where do we find these developers? Well, to start with we need to lower our bar for engineering talent and not be so caught up on hiring the best-of-the-best <em>now</em>, but instead we should be investing more in people’s future potential. We should be hiring junior developers and training them up.</p>

<p>A very smart person once said this: <confucious tweet=""></confucious></p>

<p>Your next Rockstar Unicorn isn’t within today’s top 5-10% of all
developers. The top 5-10% already works elsewhere. Your Next Rockstar Unicorn is hanging out with the rest of their peers in the other part of this totally scientific picture that I made up. These people need some mentoring in order to grow into the next generation of brilliant people.</p>

<p>They’re not brilliant <em>today</em>, but if you give them time and care, they will become brilliant.</p>

<p>It’s imperative that we do this because there isn’t an endless supply of brilliant people – sorry, I mean Developer Rockstar Unicorns – that we can just keep harvesting today. This talent pool of amazingly gifted developers, as we’re painfully finding out, is not limitless.</p>

<p>The best time to train a senior developer was 10 years ago, but the second best time is now.</p>

<p>We must lower the bar for our hiring, and hire outside of the top 5-10%. We must hire juniors. We must then train these juniors up to be our next generation of brilliant minds.</p>

<p>It is very, very difficult to hire a senior developer today in Rubyland. And so we must grow our own senior developers. This is a process that will take time.</p>

<p>There’s no packet mix where you “just add water” and blammo you’ve got a senior developer.</p>

<p>I’m talking about <em>years</em> of hard work. But these are <em>vital</em> years
of hard work to ensure that our companies and this community continues to thrive and grow. This is necessary work to ensure that we have well-trained developers working at our companies. We will know they’re well-trained because we did the training ourselves.</p>

<p>We need to be <em>developers developing developers</em>.</p>

<p>At Culture Amp, we hired and trained 18 juniors. We are not frustrated by them. Our productivity is the highest it has ever been. And right before I got on stage I checked: our production database is still up.</p>

<p>These are 18 developers that we did not have two-and-a-half years ago. But now we do. They’re about 25% of our engineering staff right now. We invested time and energy into training these people up and now we have 18 excellent developers. And that’s on top of the other developers that we’ve hired during that time too! We didn’t stop hiring mids and seniors. We kept hiring them too! It’s just that we supplemented them by hiring and training some juniors too.</p>

<p>I want to spend the next 20 minutes giving you some reasons why you would want to do this yourself, and some tips about how you can go about doing it too. I want you to leave here today as enthusiastic about hiring juniors as I am.</p>

<h2 id="why">Why?</h2>

<p>So let’s start off with the why. Why would you want to hire juniors? I told you already: we can hire juniors to boost the number of developers at our companies. But we’re going to need a better reason.</p>

<p>I have one major killer reason: juniors make your teams <em>better</em>. You want your teams to be better, right?</p>

<p>But wait: what do I mean by “better”? Better is a pretty subjective term! So let’s be more exact. I mean that your team will be more productive as a result of having at least one junior on it. I have seen this work out at Culture Amp many times over, and I’ve seen it happen at other companies too. Teams that have juniors on them are better than teams that do not.</p>

<p>Why?</p>

<p>When you have a junior, you have to break down explanations into simpler forms. This helps the junior understand things about your business, code and practices. It has the side-effect of easing the understanding of other members of the team too because they get into the habit of explaining things in a clearer way as well. There’s no better way for you to test your own knowledge of something than having to explain that knowledge to someone else.</p>

<p>Along that point, when you have a junior in your team communication becomes explicit. I reckon some of you might have experienced the opposite of this. Here’s the situation I’m thinking of: You’re on a senior-heavy team and you <em>want</em> to ask a question, but you don’t want to be seen as not knowing as much as the rest of the people around you. You have to figure it out yourself. It’s <em>implicit</em>. Communication is <em>implicit</em>. All in your heads.</p>

<p>Now what happens if you put a junior on that team? They’re going to need some explanations. Their intuition isn’t as well-crafted as yours is. So communication comes out into the open, which makes it <em>explicit</em>. This then creates a culture of asking questions and other team members feel safe to do that as well. We talk about things in the open more often and contribute to a shared pool of understanding. This improves the understanding of the entire team and therefore makes the team more effective.</p>

<p>My last point around “why?” is that <em>diversity out-performs sameness</em>. There has been many studies done on what makes a good team, and universally having a team that is not <em>all the same as each other</em> leads to the greatest benefit. I mean diversity in all aspects: gender, race, age, and so on. But I’d also like to give a special mention to <em>skill</em> diversity too. Having people who aren’t all <em>experts</em> on your team makes the team better.</p>

<p>So to answer the why question: not only will we get <em>more</em> developers if we hire juniors, but our teams will be better for it. We want more developers and better teams, right? The way we can get both is to hire juniors.</p>

<p>So now that I’ve answered why, let’s talk about the practicalities of doing this. The rest of this talk is all tips on what you can do to make hiring juniors into your companies really successful.</p>

<h2 id="part-1-before">Part 1: Before</h2>

<p>The first thing we need is some support structures in place.</p>

<p>First, we need the <em>company</em> to support the initiative of hiring junior developers. They need to recognise that taking on a junior will require some upfront investment of time and energy to train them up, but it <em>will</em> pay off in the long term. Juniors who are well looked after turn into mids soon enough.</p>

<p>Second, we need the <em>team</em> or <em>teams</em> that take on the juniors to support this initiative as well. These teams are going to be the people doing the majority of the training and development, and it’s their job to make the junior feel at home. A good team environment will help the junior developer grow in the best way possible.</p>

<p>Lastly, we need a <em>champion</em> who supports the juniors. Someone they can always turn to for support, who exists outside of their team structure. At Culture Amp, I’m this person and my role is mostly 1-on-1 developer mentoring and (sometimes) emotional support.</p>

<p>Once you’ve got those support structures in place, organise together to work out a plan for the people that you’re hiring. What are they going to do on their first day? How can you help ease them into what might be their <em>first ever</em> development job? What do you need to teach them for them to be productive at your company?</p>

<p>Having a plan for how to deal with the initial onboarding of a junior on your team can take a lot of that early-stage pressure out of the process. I suggest you spend a bit of time coming up with one. Every company is different and you’ll all come up with different ways that suit your own companies.</p>

<h2 id="part-2-recruit">Part 2: Recruit</h2>

<p>With your plan in hand, it’s time to start recruiting a junior developer.</p>

<p>Where on earth do you find one of these people? Fortunately for all us, they’re everywhere. They come out of universities and coding schools by the hundreds or even thousands. On top of that, there are a bunch of people who teach themselves programming. These people are usually career-changers who have worked somewhere previously, and are now looking to get into development. All of these are great candidate pools to source your junior developers from.</p>

<p>To find juniors, reach out to universities and coding schools and ask them when they’re next graduating a cohort, and ask if you can come in to speak to the cohort. Building those connections will help you source some amazing developers.</p>

<p>Now that you know where to find them, you’ll want to know how to find the <em>best</em> ones. For that purpose, I want to talk about how you should interview your junior developers.</p>

<h2 id="interviewing">Interviewing</h2>

<p>I think a good interview process takes the shape of two stages: a take home coding test, and a second stage comprising of two interviews: a social interview and a tech interview.</p>

<p>Here’s how we’ve done it at Culture Amp. We sent anyone who applied a coding challenge written in Ruby, involving some basic Ruby tests for things like Arrays and Hashes. It also contained a test suite they had to extend and pass. They had two weeks to complete it.</p>

<p>When we received the coding test back from them, we scored it according to a bunch of yes or questions like “did they use an <code class="language-plaintext highlighter-rouge">attr_reader</code> here?”. The people with the highest grade then got through to the next stage, our social and tech interview stage.</p>

<p>In this second stage, juniors bring their coding tests in, and we interview them about their knowledge of tech during the tech interview. At the half-way point of the interview, we switch to a pairing mode where the juniors expand on their coding test. All of this is done with with two Culture Amp employees in the room – usually a mixed gender pair. We interview in pairs to eliminate bias that may arise during a 1-on-1 interview.</p>

<p>The junior drives the development of the code and can ask us any questions they wish – even down to what Ruby method they could use to solve a problem. We give them some direction and observe them go through this exercise.</p>

<p>This tech interview is designed to assess how well the juniors can work with other people – not to gauge how well they can code. This is because a junior developer will spend most of their time working with other people, listening to them and collaborating, rather than doing development themselves. It also helps us gauge how open they are to asking questions, or knowing when they’re stuck. These are important things to check because they’ll be doing a lot of that kind of thing when they come to work with us.</p>

<p>The social interview is the 2nd interview stage, and in this one we assess their social abilities by asking them a bunch of open ended questions like “What kind of projects have you worked on with other people?”. We value this interview slightly higher than the coding test.</p>

<p>What we look for in this interview is how friendly or outgoing the junior developer is, as well as any particular red flags. If someone champions their own efforts while diminishing the work of others, that’s a huge red flag. If they prefer to work alone instead of in a group, that’s another.</p>

<p>That’s a quick run-through of how we’ve ran our interview process, and from the almost 250 interviews we’ve done, I can give you three big tips for when you’re interviewing juniors.</p>

<h3 id="tip-1-treat-them-gently">Tip #1: Treat them gently</h3>

<p>The first is to treat them gently. For some people you interview, this will be one of their very first interviews. If you’re both lucky, it’ll be their very first. You might be working with this person in the near future, so treat the interview like a <em>collaboration</em> rather than an <em>interrogation</em>. Treat them gently.</p>

<p>Here’s a quick image showing the regular job application process for junior developers these days. Juniors try to make the leap from <em>learning how</em> to program to <em>getting paid</em> to program and then they get rejected a bunch of times. This can feel a lot like leaping across a chasm and smashing into a cliff face repeatedly, hence the illustration.</p>

<p>We do not need to interview these juniors harshly or impersonally. We <em>can</em> treat them gently.</p>

<h3 id="tip-2-social-over-technical">Tip #2: Social over Technical</h3>

<p>My second tip is to value the <em>social</em> interview over the technical interview.</p>

<p>I would explain why in my own words, but Brian Hogan has done it on Twitter much better than I could:</p>

<p>https://twitter.com/bphogan/status/1173301278040035335?s=20</p>

<p>It’s true. I can teach an easy-going, well-humoured person programming easily. They’re fun to work with! But if you’re a grumpy, self-centered narcissist, we’re going to have a bad time.</p>

<p>All of the juniors that we have hired have scored good-to-excellent on the tech interview, but they’ve all scored <em>excellent</em> on the social interview and we’ve seen it work out really well as a result.</p>

<p>So my tip here is to value social skills over tech skills. You can teach tech easily. You can’t teach nice as easily.</p>

<h3 id="tip-3-give-them-feedback">Tip #3: Give them feedback</h3>

<p>My third and final interviewing tip is to give all your junior candidates feedback on the process. Yup, that means <em>everyone</em>.</p>

<p>That coding test that we gave to our junior developers went out to about 70 people. 55 of those people sent it back. In response, we wrote 25,000 words of feedback, which is about 500 words per person. That may seem like a lot, but it’s really about a page to page and a half per person, depending on your font size.</p>

<p>We give out feedback to all our candidates because we want them to have a good impression of our company, <em>even if we reject them</em>. We want them to be able to look at the coding test and see what they could improve, and to have some resources they could follow up on to get better.</p>

<p>Being rejected is <em>hard</em> and a flat “no” with nothing further to follow up on is something the juniors are going to get <em>a lot</em> of. Remember the cliff face? So we should all be more gentle with them by giving them this feedback.</p>

<p>This feedback has paid off for us at Culture Amp. During the most recent Culture Amp junior hiring round, we had two candidates apply who also applied in the first round two years ago, but didn’t get through. By studying hard for a year, they were able to skill themselves up and they both made it in this time around.</p>

<p>So my third and final interviewing tip is to give feedback to juniors because it gives them a direction to go in, even if you reject them. And it has a good chance of paying off in the future.</p>

<h2 id="a-new-junior-appeared">A new junior appeared</h2>

<p>Ok, so now you’ve gone through the hiring process, sent out all your feedback and decided to hire a junior. What do you do now?</p>

<h2 id="part-3-belonging">Part 3: Belonging</h2>

<p>You make them feel like they belong.</p>

<p>If you thought being a junior during the <em>hiring</em> process was hard enough, try working as one! It’s terrifying.</p>

<p>During the interview, juniors can feel like they need to prove themselves for, at most, 2 hours.</p>

<p>But then when they get down to working, they can feel that need to prove themselves for <em>days</em> or <em>weeks</em> at a time. That’s exhausting!</p>

<p>If you remember <em>anything</em> from this talk let it be this next slide.</p>

<p>How do you treat a junior developer? Like an adorable puppy, and not like a spiky cactus.</p>

<p>With the cactus, you can leave it for <em>months</em> in the corner without giving it attention and it will still thrive. Somehow. Science can’t explain it.</p>

<p>But a puppy! A puppy needs attention, love, and care. And to be trained!</p>

<p>Juniors need to feel like they <em>belong</em> in their companies, their teams and their jobs. With those support structures I mentioned before, the company, the team and the champions can all help with that sense of belonging.</p>

<p>I have some ground rules that can majorly help with that feeling of belonging.</p>

<p>One ground rule that I like to set at the very beginning is this one: it’s always okay to ask questions. Whenever you have a question it’s okay to ask it. Asking questions is how we <em>learn</em>. Asking questions means that you want to know something. It means <em>you’re thinking</em>. So ask away!</p>

<p>Another ground rule that I like to set is that juniors should pair with a more senior developer most of the time. Being introduced to a big scary company, codebase and team that you’ve never seen before is terrifying and exhausting. You need someone who can be the Gandalf senior to the junior’s Hobbit. You need someone who can help the junior integrate with your teams.</p>

<p>My third ground rule is one that can sometimes be the hardest one to follow. Smile more! When someone asks for your help, dive in with eagerness and joy. Someone wants <em>you</em> to help <em>them</em>! Don’t get frustrated with them!</p>

<p>And this also applies to text as well, where emotional meaning goes missing. A simple phrase like “why are you doing this?” can be interpreted majorly differently depending on the mood the recipient is in. “Smile more” with your juniors over text too.</p>

<p>If you feel like they’re still having a rough time, go around to your juniors and speak to them in person – or over a quick video call if they’re remote. I call this “escalating in fidelity” and it’s a technique I employ when I think I’m being misinterpreted.</p>

<h3 id="project-aristotle">Project Aristotle</h3>

<p>I’d like to back up all this belonging chatter with one final thing. A company you might’ve heard of, one not far from here, called Google… ran this study called Project Aristotle. They wanted to know what made teams the most productive. They tried a bunch of things. Small teams. Big teams. Senior teams. Junior teams. Teams in the same room, or teams working remotely. None of it made as big an impact on team productivity as these five things.</p>

<p>These five things are the pillars of making teams at Google the most productive. And this does not just apply at Google. It’s universal. And I can think of nowhere else they apply more than helping juniors feel like they belong in our teams. The first one is the biggest: team members feel safe to take risks and be vulnerable in front of each other.</p>

<p>This diagram might look familiar to you. If you flip it up the other way and rename the layers, it is Maslow’s Hierarchy of Needs – Maslow’s take on how humans partake in behavioural motivation – how we get motivated to do the things we do. You’ll notice here that the bottom two layers on the right are remarkably close to the top layer in Google’s document.</p>

<p>When we hire juniors, we need to keep these five things in mind. We must put a strong focus on psychological safety so that they feel like they belong in our teams and that they can take risks as small as asking a “dumb” question or as large as merging a major pull request. And we must also provide Dependability, Structure &amp; Clarity, Meaning and Impact too. But we can do none of those if the junior does not first feel safe – feel like they <em>belong</em> in our teams.</p>

<h2 id="summary">Summary</h2>

<p>And so to summarise:</p>

<p>Hiring experienced developers is hard to do at the moment. To work around this current lack of talent, we must focus on hiring and training junior developers to be the next generation of experienced developers that we need.</p>

<p>We have done this at Culture Amp successfully. Plenty of other companies are also training developers. We need more companies doing it too. It is important work to ensure that we can grow our companies and this wonderful community of ours. Hiring juniors is a worthwhile investment for your company and for the future of this community. It’s in our collective best interests to hire juniors.</p>

<p>Putting <em>at least one</em> junior developer into a team makes that team <em>better</em>. Communication is explicit. The team works more effectively as a result.</p>

<p>When we get these juniors, we must remember the puppy-not-cactus rule. We have to make them feel like they <em>belong</em> in our teams – because they have as much right to be there as everyone else does. When we do this, we’ll supercharge the development of this junior and before we know it we’ll have a set of <em>amazing</em> developers who are helping our teams be the best version of themselves.</p>

<p>We can do this. Hiring juniors is the right thing to do.</p>

<p>We can be developers developing developers.</p>
]]></content>
 </entry>
 
 <entry>
   <title>The 2018 MacBook Pro Keyboard Drives Me Crazy</title>
   <link href="http://ryanbigg.com/2019/08/can-apple-please-design-a-laptop-that-has-a-functional-keyboard-for-the-love-of-all-that-is-precious"/>
   <updated>2019-08-29T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2019/08/can-apple-please-design-a-laptop-that-has-a-functional-keyboard-for-the-love-of-all-that-is-precious</id>
   <content type="html"><![CDATA[<p>I recently upgraded from a 2015 MacBook Pro to a 2018 MacBook Pro. And by
“recently”, I mean back at the start of June. I wanted a new MacBook Pro because of the faster performance that a new computer would give me. Work (Culture Amp) was also upgrading their fleet of Macs and I was one of the lucky people to get a new one.</p>

<p>So I’ve been using this computer as a work computer for almost 3 months now and, my god, the keyboard <em>drives me mental</em>. Even writing this blog post now on the train and there’s:</p>

<ul>
  <li>duplicated “o’s” that I’ve had to go back and fix, or missing ones – guess how fun it is to write <a href="https://leanpub.com/elixir-toyrobot">a book about a Toy Robot</a> with this particular problem</li>
  <li>double spaces – or no spaces</li>
  <li>a Command key that registers 9 out of every 10 times</li>
  <li>words like “times” that inexplicably get spelled like “timies”, or “about” that gets spelled like “abouot”</li>
</ul>

<p>Apple is <em>all about</em> the thinness of their laptops. I do not particularly care about the thinness of this device. For the most part, it sits on one of two desks that I use or it sits on my lap on the train. <em>Maybe</em> I use it on the couch from time-to-time. I do not care about the thinness of this device <em>while I am using it</em>. I only care about it when I store it away, in my backpack.</p>

<p>This keyboard has a key travel distance that, I am sure, is measured in microns or perhaps nanometers. It feels like I am typing on a concrete slab. Key presses inexplicably duplicate. Or don’t register at all. All for <em>thinness</em>.</p>

<p>This keyboard is a catastrophic engineering failure, designed by a company that should know better. A company with more money in the bank than several countries <em>combined</em>. This keyboard would be, by far, the part of the MacBook Pro that is used the <em>most</em> by everybody who owns one, and it is so poorly engineered for the pursuit of <em>thinness</em>.</p>

<p>Apple <em>must</em> fix this problem in their upcoming MacBook Pro releases. I want a <em>fat</em> MacBook pro keyboard, one that has a travel distance of the older wireless keyboards and doesn’t have that “concrete slab” feel. I want to be able to type <em>an entire paragraph</em> without having to go back and correct things because the keyboard failed.</p>

<p>I am tired of having to correct what I type because of this keyboard’s faults. I am tired of having to use external keyboards to actually <em>enjoy</em> using this computer. I love the Mac and it’s software and how things <em>just</em> work. But I will leave if this keyboard farce continues.</p>

<p>If Apple releases their new Macs with an <em>identical</em> keyboard, then I’m ditching Macs and will pick up a Microsoft Surface Book or something similar. Whatever it is, I’ll make sure to pick a laptop that has <em>a god damned functional keyboard</em>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Culture Amp Junior Engineering Program Discontinued</title>
   <link href="http://ryanbigg.com/2019/07/culture-amp-junior-engineering-program-discontinued"/>
   <updated>2019-07-16T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2019/07/culture-amp-junior-engineering-program-discontinued</id>
   <content type="html"><![CDATA[<p>For the past two years, I have ran not one but <em>two</em> successful Junior Engineering Programs (JEPs) at Culture Amp. The official number of developers that I have trained there is 19. But I trained a bunch more developers from time-to-time as well. So the proper total would probably be in the range of 30-40 developers at Culture Amp that I have helped train, support and grow over the past two years. I am really proud of this work that I have done and I have really enjoyed my time doing it.</p>

<p><strong>Unfortunately, Culture Amp has decided not to run the JEP in 2020 and are yet to make any decisions around future programs.</strong></p>

<p>I understand this decision will be surprising to hear for a number of people who have been expecting to be able to apply for the program when applications open. Especially as I have been doing a little bit of a “speaking tour” recently talking about the JEP. It was surprising to me when I heard it, too.</p>

<p>I am grateful that these two JEPs even happened in the first place. It’s very “Culture Amp” to have even <em>talked</em> about doing one, let alone doing it as well. It started as an idea from a hackathon we ran internally – then referred to as the “Graduate Developer Program”. The (slightly-embellished) story I tell is that I had a one-on-one with my Mentor, Jo Montanari, about 4 months after the hackathon and I asked her “why aren’t we running this program? and she shot back: “Why aren’t <em>you</em> running this program?”.</p>

<p>The rest is history.</p>

<h2 id="culture-amp-continues-investing-in-learning-and-development">Culture Amp continues investing in learning and development</h2>

<p>Culture Amp ran JEP for two years, but still does a lot of great work towards investing in the learning and development of their employees outside of this program. I’d like to mention two of them quickly here.</p>

<p>Culture Amp has the “Learn Yourself Up” (LYSU) program, $1k USD per-camper per-year to spend on whatever learning &amp; development expenses you want. If it’s related to your job, you can expense it up to 90% off. If it’s something outside of that, you can still use this budget but expense only 50%. This is an excellent initiative; and something I think more tech companies should think about doing.</p>

<p>The second of these is the Mentoring assignments that every single employee gets. When you join Culture Amp, you get paired up with a Mentor who can give you “strategic” career advice and be an advocate for you in the organisation. I’ve been fortunate enough to have Doug English (the CTO), Jo Montanari (now Director of People &amp; Culture), and Paul Hughes (Backend Practice Lead) as my mentors for the 3 years that I have been at Culture Amp.</p>

<p>Thanks to both the LYSU and mentoring, I have grown more as not just a developer but as a <em>person</em> faster than anywhere I’ve ever worked before. It has been the best time I’ve ever had working at a company in my entire career.</p>

<h2 id="i-will-continue-advocating-for-juniors">I will continue advocating for juniors</h2>

<p>I have spoken at places such as RMIT, Le Wagon, Coder Academy about this program. I have had many 1-on-1 chats with juniors about their learning progress and how they could prepare themselves for the JEP. I have replied to many emails from interested juniors about this program, giving them similar levels of advice. There are literally <em>hundreds</em> of <em>excellent</em> junior developers out there. I’m happy to keep talking to juniors about their career prospects and what I sought out as someone who actively hired them.</p>

<p>I have even given feedback on juniors that have attempted either <a href="https://github.com/radar/surveyor">the 2017 JEP coding test</a> or <a href="https://github.com/radar/surveyor-2">the 2018 JEP coding test</a>. I am still going to keep doing this in to the future as much as I can. I think that technical feedback / direction like this is something that a lot of juniors are missing out on. They can read all the great tech books, follow all the cool screencasts, but that’s pretty one-way. How do they know if they’re writing code the “right” way? Well, having me look at their attempts at the coding test is a good way of getting that feedback. Let’s keep doing that.</p>

<p>Every time I go to the Melbourne Ruby night, I spend a huge portion of the night talking to juniors about the program. I do all this because <a href="https://ryanbigg.com/2018/03/hiring-juniors">I care <em>tremendously</em> about juniors, and especially hiring juniors</a>. I will keep having these talks with juniors too. I love meeting them and then seeing them get into jobs, and following how they go in their career.</p>

<p>I’ve also been advocating for other companies around the world to run their own junior programs too, and I think that it’s gaining some traction. I’m going to continue to have these conversations too.</p>

<h2 id="what-this-means-for-juniors">What this means for juniors</h2>

<p>What this means for juniors who were thinking about applying to a future JEP is that there’s now going to be <em>slightly fewer</em> job opportunities out there in an already tight job market. Such is the nature of the job market.</p>

<p>I am happy to still act as an advisor for juniors who need it and as an advocate for companies hiring more juniors. If there are any companies out there that are hiring juniors, I’m happy to refer on some excellent ones too.</p>

<h2 id="what-this-means-for-my-future">What this means for my future</h2>

<p>Somewhere around November, I will be leaving Culture Amp. The official date depends on some other factors and future discussions. I’ve really enjoyed working here: the people are very cool, the Culture Amp platform is solving a problem I care a lot about, and the tech is interesting.</p>

<p>Most of all though: I have been remarkably well-supported in whatever I’ve set my mind to at Culture Amp. From being a Ruby dev, to an Elixir dev, to running a Junior Engineering Program <em>twice</em>. Culture Amp has always had my best interests at heart, and I know that we part ways with no hard-feelings on either side here.</p>

<p>If you’ve read this far and you’d like to reach out to me about future job opportunities, please <a href="/work">check out /work</a>, and <a href="/history">check out /history</a> too.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Ruby Trickery</title>
   <link href="http://ryanbigg.com/2019/03/ruby-trickery"/>
   <updated>2019-03-05T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2019/03/ruby-trickery</id>
   <content type="html"><![CDATA[<p>Last week I gave a talk at Melbourne Ruby involving some card tricks and Ruby trickery.</p>

<p>The talk is up on Youtube:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/lSiD3LZanPI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>I do some card tricks for about 10 minutes, and then some Ruby tricks. I won’t reveal how I did the card tricks in this blog post, but I will reveal how I did the Ruby tricks.</p>

<p>The Ruby trickery starts at about the 9m30s mark in that video. You can see the code for most of these tricks at <a href="https://github.com/radar/trickery">radar/trickery on GitHub</a>.</p>

<p>In this post, I’ll cover all the tricks I had planned for the talk, not just the ones I showed off.</p>

<p><strong>Please, do not use any code in this blog post in production systems. It can cause weird behaviour. Especially the one involving JavaScript sorting.</strong></p>

<p>The point of this post is to show the things Ruby is capable of.</p>

<h2 id="numbers">Numbers</h2>

<h3 id="addition">Addition</h3>

<p>My first trick was to override addition, which I did with this code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Integer</span>
  <span class="kp">alias_method</span> <span class="ss">:old_plus</span><span class="p">,</span> <span class="p">:</span><span class="o">+</span>

  <span class="c1"># 2 + 2 = 6</span>
  <span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="n">old_plus</span><span class="p">(</span><span class="n">old_plus</span><span class="p">(</span><span class="n">num</span><span class="p">))</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>This allowed me to call <code class="language-plaintext highlighter-rouge">2 + 2</code> and get a result of <code class="language-plaintext highlighter-rouge">6</code>. It runs two plus operations, effectively doubling the number on the left before adding the number on the right. This is why <code class="language-plaintext highlighter-rouge">2 + 5 = 9</code> and <code class="language-plaintext highlighter-rouge">3 + 7 = 13</code>. By aliasing the original <code class="language-plaintext highlighter-rouge">+</code> method using <code class="language-plaintext highlighter-rouge">old_plus</code>, we can override the <code class="language-plaintext highlighter-rouge">+</code> method, but still use the old one.</p>

<h3 id="multiplication">Multiplication</h3>

<p>The next trick applies to multiplication, but is a little more advanced:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Integer</span>
  <span class="kp">alias_method</span> <span class="ss">:old_multiply</span><span class="p">,</span> <span class="p">:</span><span class="o">*</span>

  <span class="k">def</span> <span class="nf">*</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:old_multiply</span><span class="p">).</span><span class="nf">unbind</span>
    <span class="n">m</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">num</span> <span class="o">/</span> <span class="nb">self</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This code calls <code class="language-plaintext highlighter-rouge">method(:old_multiply)</code>, but <code class="language-plaintext highlighter-rouge">unbind</code>s it from <code class="language-plaintext highlighter-rouge">self</code>. I can then rebind this method to anything else with the <code class="language-plaintext highlighter-rouge">bind</code> method, before calling it again. This re-binding makes the number <code class="language-plaintext highlighter-rouge">3</code> always the <code class="language-plaintext highlighter-rouge">self</code> within the <code class="language-plaintext highlighter-rouge">old_multiply</code> method, regardless of what is passed through on the left. However, the <code class="language-plaintext highlighter-rouge">self</code> reference inside this override will still be the left-hand-side number.</p>

<p>Some examples:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">3</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">3</span>
<span class="mi">6</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span>
<span class="mi">99</span> <span class="o">*</span> <span class="mi">999</span> <span class="o">==</span> <span class="mi">30</span>
</code></pre></div></div>

<h3 id="unary-minus">Unary minus</h3>

<p>The unary methods are often ignored within Ruby, despite having their uses. There’s <a href="http://www.rubyinside.com/rubys-unary-operators-and-how-to-redefine-their-functionality-5610.html">a good Ruby Inside article about unary methods</a>. You should read it.</p>

<p>The TL;DR is that unary methods work as prefixed method calls on particular objects within Ruby. I’ll show you what I mean. But let’s look at the override first:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">-@</span>
  <span class="o">+</span><span class="nb">self</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This is pretty straight forward. When we’re told to minus something, make it a positive instead.</p>

<p>What’s interesting here is that it won’t work on negative numbers straight off the bat:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="o">-</span><span class="mi">5</span>
<span class="o">=&gt;</span> <span class="o">-</span><span class="mi">5</span>
</code></pre></div></div>

<p>This is because negative numbers are… well, they’re negative numbers. The minus symbol there isn’t a unary method call.</p>

<p>But things change if you assign a variable:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
<span class="o">=&gt;</span> <span class="mi">5</span>
<span class="o">&gt;&gt;</span> <span class="o">-</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="mi">5</span>
</code></pre></div></div>

<p>The number remains positive, even though it should’ve been negated. This is because this code is calling the <code class="language-plaintext highlighter-rouge">-@</code> unary method.</p>

<p>What’s fun with this is that you can keep chaining negative signs, positive signs or a combination of both:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="o">--------</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="mi">5</span>
<span class="o">&gt;&gt;</span> <span class="o">++++++++</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="mi">5</span>
<span class="o">&gt;&gt;</span> <span class="o">+-+-+</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="mi">5</span>
</code></pre></div></div>

<p>All of these examples either call <code class="language-plaintext highlighter-rouge">-@</code>, <code class="language-plaintext highlighter-rouge">+@</code> or a combination of both multiple times.</p>

<h2 id="arrays">Arrays</h2>

<h3 id="sorting-the-javascript-aka-right-way">Sorting, the JavaScript (aka “right”) way</h3>

<p>JavaScript sorting is a well-known case of… well, weird behaviour. For example, this code:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nx">sort</span><span class="p">()</span>
</code></pre></div></div>

<p>Should maintain the same order of the numbers, increasing left-to-right. Instead, the output is this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<p>This “weird behaviour” happens because JavaScript sorts objects based on their string versions. The string “-1” comes before “-2”, but “-2” comes before “0”, and so on. This  <a href="https://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.11">is specified in the EcmaScript specification (5.1), Section 15.4.4.11</a>, but you need a PhD or higher qualification (read: galaxy brain) to understand exactly what it is saying.</p>

<p>How does this relate to Ruby? Well, first of all Ruby does the sorting order correctly:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nf">sort</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<p>But if we wanted to bring JavaScript style sorting to Ruby, then we can use this code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">JSSort</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
    <span class="n">base</span><span class="p">.</span><span class="nf">alias_method</span> <span class="ss">:old_sort</span><span class="p">,</span> <span class="ss">:sort</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">sort</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">).</span><span class="nf">old_sort</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Array</span><span class="p">.</span><span class="nf">include</span><span class="p">(</span><span class="no">JSSort</span><span class="p">)</span>
</code></pre></div></div>

<p>This converts each element to a string via <code class="language-plaintext highlighter-rouge">map</code>, then sorts them using the old sorting behaviour (the default Ruby way), before converting them all back to integers.</p>

<p>We’re not guaranteed to have arrays of integers at all times, so we might want to put a guard around that to check at least the first element is a number:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sort</span>
  <span class="k">if</span> <span class="n">first</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">Numeric</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">).</span><span class="nf">old_sort</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">old_sort</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This doesn’t prevent against arrays that contain a mix of datatypes (numbers and strings), but only really nefarious people create those, and there aren’t many of those in the Ruby community so I think we can be safe here.</p>

<p>This code will now make Ruby sort “correctly” – at least according to JavaScript:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nf">sort</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<p>If we include this module into <code class="language-plaintext highlighter-rouge">Range</code>, we can get the same delicious behaviour:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Range</span><span class="p">.</span><span class="nf">include</span><span class="p">(</span><span class="no">JSSort</span><span class="p">)</span>
</code></pre></div></div>

<p>Let’s try it:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="o">..</span><span class="mi">2</span><span class="p">).</span><span class="nf">sort</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<p>Now we can make Ruby sort the same way as JavaScript.</p>

<h3 id="double-equality">Double Equality</h3>

<p>A little known fact is that the <code class="language-plaintext highlighter-rouge">==</code> in code like <code class="language-plaintext highlighter-rouge">[1,2,3] == [1,2,3]</code> is actually a method call. This code calls <code class="language-plaintext highlighter-rouge">Array#==</code>, and we can override this method too.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Array</span>
  <span class="kp">alias_method</span> <span class="ss">:old_double_equals</span><span class="p">,</span> <span class="ss">:==</span>

  <span class="k">def</span> <span class="nf">==</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
    <span class="nb">method</span><span class="p">(</span><span class="ss">:old_double_equals</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">other</span><span class="p">)</span> <span class="p">?</span> <span class="s2">"yes"</span> <span class="p">:</span> <span class="s2">"no"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Rather than getting the plain (and boring) <code class="language-plaintext highlighter-rouge">true</code> or <code class="language-plaintext highlighter-rouge">false</code> when we compare arrays, we will now get “yes” or “no”.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="s2">"yes"</span>
<span class="o">&gt;&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="s2">"no"</span>
</code></pre></div></div>

<p>You can make this method a little more fun by first checking the length and then determining what to do on that:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">other</span><span class="p">.</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">?</span> <span class="s2">"maybe"</span> <span class="p">:</span> <span class="p">(</span><span class="nb">method</span><span class="p">(</span><span class="ss">:old_double_equals</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">other</span><span class="p">)</span> <span class="p">?</span> <span class="s2">"yes"</span> <span class="p">:</span> <span class="s2">"no"</span><span class="p">)</span>
</code></pre></div></div>

<p>This way then, you get “maybe” if you try to compare against an array of more than 3 elements:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="s2">"maybe"</span>
</code></pre></div></div>

<h3 id="triple-equality">Triple Equality</h3>

<p>Similarly to <code class="language-plaintext highlighter-rouge">==</code>, <code class="language-plaintext highlighter-rouge">===</code> is also a method call. When we’re making this call we want to be <em>really</em> sure that the things are equal. Getting back <code class="language-plaintext highlighter-rouge">false</code> would be disappointing, so we can override this method to always return <code class="language-plaintext highlighter-rouge">true</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="nf">===</span><span class="p">(</span><span class="n">_</span><span class="p">)</span>
    <span class="kp">true</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="not-equal">Not Equal</h3>

<p>Just like its siblings <code class="language-plaintext highlighter-rouge">==</code> and <code class="language-plaintext highlighter-rouge">===</code>, <code class="language-plaintext highlighter-rouge">!=</code> is also a method call. We can override this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="o">!=</span><span class="p">(</span><span class="n">_</span><span class="p">)</span>
    <span class="s2">"can't say, tbqh"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>We can’t say, to be quite honest.</p>

<h3 id="unary-minus-again">Unary Minus (again)</h3>

<p>We saw an example of unary minus working on a variable, but unary methods can be called before data types in Ruby too. Strings are one case where we can freeze a string by prefixing it with <code class="language-plaintext highlighter-rouge">-</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="s2">"string"</span>
<span class="o">=&gt;</span> <span class="s2">"string"</span>
<span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">.</span><span class="nf">frozen?</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
</code></pre></div></div>

<p>But arrays are another case. Arrays in Ruby don’t have a unary minus method defined by default, but that doesn’t stop us defining our own:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="nf">-@</span>
    <span class="n">clear</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>What this code allows us to do is to clear an array by prefixing it with <code class="language-plaintext highlighter-rouge">-</code>. It’ll work for the array itself, or a variable representing the array too:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="o">-</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[]</span>
<span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;</span> <span class="o">-</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="p">[]</span>
<span class="o">&gt;&gt;</span> <span class="n">a</span>
<span class="o">=&gt;</span> <span class="p">[]</span>
</code></pre></div></div>

<p>This saves us a full 5 characters of typing that we would otherwise have to do:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">.</span><span class="nf">clear</span>
</code></pre></div></div>

<h3 id="unary-plus">Unary Plus</h3>

<p>Just like <code class="language-plaintext highlighter-rouge">-@</code>, we can add a <code class="language-plaintext highlighter-rouge">+@</code> method to arrays:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">+@</span>
  <span class="n">replace</span> <span class="n">flat_map</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">*</span> <span class="mi">10</span> <span class="p">}</span>
  <span class="nb">self</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The Japanese “十” character is the one for 10, so it makes sorta-sense that our <code class="language-plaintext highlighter-rouge">+@</code> method takes each of the element, and makes 10 of those in the array:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;</span> <span class="o">+</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</code></pre></div></div>

<p>This operation mutates the array using <code class="language-plaintext highlighter-rouge">replace</code>, replacing whatever’s in the array with 10 of each of the elements.</p>

<p>It should be noted that <code class="language-plaintext highlighter-rouge">*</code> is <a href="http://ruby-doc.org/core-2.6.1/Array.html#method-i-2A">also an Array method</a>, but this one hasn’t been overriden here. I should also note that the <code class="language-plaintext highlighter-rouge">*</code> method can take <em>either</em> an Integer or a String as an argument and it behaves differently depending. Check out the docs for more info.</p>

<h3 id="unary-bang">Unary Bang</h3>

<p>We’ve seen a few unary methods so far, but an even lesser known one is the <code class="language-plaintext highlighter-rouge">!@</code> unary method. My override for this is straightforward:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="o">!</span><span class="err">@</span>
    <span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>This will give us random numbers in our array, between 0 and 100:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">70</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">82</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="unary-tilde">Unary Tilde</h3>

<p>The last in the long line of unary methods is <code class="language-plaintext highlighter-rouge">~@</code>. This one kinda looks like a wave, so I think it should shuffle arrays:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="nf">~</span><span class="err">@</span>
    <span class="n">shuffle</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Here’s an example of using it:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="o">~</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</code></pre></div></div>

<p>This saves us a grand total of 8 characters. Wow, such savings!</p>

<h3 id="unary-combos">Unary combos</h3>

<p>As we saw before with the unary methods <code class="language-plaintext highlighter-rouge">+@</code> and <code class="language-plaintext highlighter-rouge">-@</code>, we can chain them:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="o">--------</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="mi">5</span>
<span class="o">&gt;&gt;</span> <span class="o">++++++++</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="mi">5</span>
<span class="o">&gt;&gt;</span> <span class="o">+-+-+</span><span class="n">a</span>
<span class="o">=&gt;</span> <span class="mi">5</span>
</code></pre></div></div>

<p>Same goes for these array methods:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="o">!+~</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">53</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">36</span><span class="p">]</span>
</code></pre></div></div>

<p>Why would you want to do this? I am not sure. I think it is a quirk of the Ruby language that allows this.</p>

<p>But the order matters:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;</span> <span class="o">+!~</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="no">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
        <span class="mi">1</span><span class="p">:</span> <span class="n">from</span> <span class="sr">/usr/</span><span class="n">local</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">asdf</span><span class="o">/</span><span class="n">installs</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mf">2.5</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">irb</span><span class="p">:</span><span class="mi">11</span><span class="ss">:in</span> <span class="sb">`&lt;main&gt;'
SyntaxError ((irb):4: syntax error, unexpected !~)
+!~[1,2,3]
 ^~
</span></code></pre></div></div>

<h2 id="typing-without-typing">Typing without typing</h2>

<p>That covers all my Ruby tricks in the video (and some more!), but there were a couple of other tricks I should mention. There were two distinct tricks: one where the code typed itself, and another where a terminal displayed a card after someone spoke it.</p>

<h3 id="self-writing-code">Self-writing code</h3>

<p>It sure would be nice if code wrote itself. But alas, technology hasn’t reached that particular zenith yet.</p>

<p>We can simulate this sort of technology using <em>other</em> tech, such as <a href="https://asciinema.org/">Asciinema</a>. This will record your terminal session, and you can play it back as you wish. This is what I did when I wrote the original <code class="language-plaintext highlighter-rouge">cards.rb</code>.</p>

<h3 id="activelistening">ActiveListening</h3>

<p>The <a href="https://github.com/radar/trickery/blob/master/cards.rb">second <code class="language-plaintext highlighter-rouge">cards.rb</code></a>, works with a dual keypress on the keyboard. Six of diamonds is “6D”. Ten of hearts is “0H” or “TH”. Jokers aren’t used in any serious card games, so they are not accounted for in this script.</p>

<p>So this code, if you read it, works by taking terminal input of two characters. But during the talk I get Kasia to read out some cards and then, a little while later, they appear on the screen.</p>

<p>But how?</p>

<p>This is a cheeky trick, and I needed another assistant for it. I recruited one of my juniors, Nick Wolf for this. I ran a <a href="https://en.wikipedia.org/wiki/Tmux"><code class="language-plaintext highlighter-rouge">tmux</code></a> session for all the code demos during the talk, and gave Nick <code class="language-plaintext highlighter-rouge">ssh</code> access to my machine.</p>

<p>Nick then connected in via <code class="language-plaintext highlighter-rouge">ssh</code>, ran <code class="language-plaintext highlighter-rouge">tmux attach-session</code> and then could control my terminal as easily as I could. When Kasia read out a card, Nick would type in the two characters required for that card.</p>

<p>Magic isn’t magic if you know how it works. This trick was a little cheeky, but I included it as I wanted to show off that <code class="language-plaintext highlighter-rouge">tmux</code> can allow two people to share a terminal over SSH.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope this post has been helpful to understand what strange things Ruby is capable of. There’s no logical reason to override the <code class="language-plaintext highlighter-rouge">+</code> method on <code class="language-plaintext highlighter-rouge">Integer</code>, or to add extra unary methods to Arrays. It’s just something that Ruby allows us to do because of the language’s flexibility.</p>

<p>Other people have done truly amazing things with the Ruby language. There’s the <a href="https://github.com/tric/trick2018/">trick2018</a> repo which includes some really amazing Ruby files. Go through those and take a look.</p>

<p>My favourite though is the <a href="https://github.com/knoxknox/qlobe">qlobe</a> – a quine that outputs a rotating globe of the earth. It even <a href="https://www.youtube.com/watch?v=HynsTvRVLiI">remembered to include New Zealand</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>JEP #2: The first 8 weeks</title>
   <link href="http://ryanbigg.com/2019/03/jep-2-first-8-weeks"/>
   <updated>2019-03-04T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2019/03/jep-2-first-8-weeks</id>
   <content type="html"><![CDATA[<p>At Culture Amp, we kicked off the latest round of our Junior Engineering Program (JEP) about 8 weeks ago. We hired 9 junior developers all of varying levels of past experience and set about teaching them the foundational skills they need to be productive members of our product teams.</p>

<p>In this post, I want to take the time to reflect on what we’ve accomplished during those 8 weeks, and to note down my own personal reflections.</p>

<h2 id="the-new-program">The new program</h2>

<p>Before the juniors started, I spent a large amount of my time reviewing the curriculum from the last JEP. <a href="https://ryanbigg.com/2018/08/junior-engineering-program-resources">I talked about this in my last JEP post</a>. On (or around) that topic I want to speak about a few things:</p>

<ul>
  <li>Expectation setting</li>
  <li>The tech that we covered</li>
  <li>Team building activities</li>
  <li>1-on-1 support</li>
</ul>

<h3 id="expectation-setting">Expectation setting</h3>

<p>The very first presentation that I gave to the juniors contained very little to do with the tech side of things and with good reason. It covered a timeline of the JEP, and a bunch of focus on setting up expectations early. There is no better time to set expectations like this than at the very beginning.</p>

<p>In particular, I outlined things such as “I will never expect you to know what I know at all times.” and “I will never expect you to be able to keep up with me.” I know that both of these things were things that the original JEP cohort had anxiety about, so I thought to cover these first. I don’t, and never will, expect juniors to be able to know what I know or to be able to keep up with me. It is the most unreasonable expectation I could possibly have, but it needed saying.</p>

<p>On a more positive side, I also said “I will always expect you to ask me to slow down and explain things again.” I stressed that it doesn’t matter if I have explained it fifty times already. Make me explain it again for the fifty-first time. It’ll give me practice in being a better teacher. I want to be a better teacher.</p>

<p>In this same presentation, I outlined that “Priority Zero” is self care. This includes things like setting fixed times for your work days and not exceeding them, talking to other people about your struggles when you’re struggling (even though it can be hard!) and asking questions when you feel stuck on something.</p>

<p><strong>Taking care of yourself should <em>always</em> be the highest priority. Nothing trumps this.</strong> It feels like it doesn’t need saying, but it does. It’s almost a form of giving permission.</p>

<p>Finally, I outlined what they could expect from the program: a great culture, an exceptionally supportive environment and learning &amp; development opportunities galore. These were my promises to the old cohort too, but with the new cohort I made them very explicit.</p>

<h3 id="the-tech-side-of-things">The tech side of things</h3>

<p>There is an incredible amount of stuff to learn when it comes to building web applications. Building a tech-focussed curriculum for this program is a massive undertaking. For the initial part of the program, I had the juniors for an 8 week “kickstart” program where I could teach them full-time for those 8 weeks. Figuring out what to teach them was a fun exercise!</p>

<p>I re-worked the JEP curriculum it this time around to start with a focus on browser technologies – HTML, CSS and JavaScript – since that’s where users interact with applications the most: through a browser. The first project for the juniors was a quick user manual built in HTML + CSS. As an example, <a href="https://cultureamp.github.io/jep-bios/ryan/">here’s mine</a>.</p>

<p>Starting at the browser level allowed us to expand “outwards” in complexity, bringing things like React and TypeScript into the mix very soon after starting. We started by using <a href="https://stackblitz.com/">StackBlitz</a> here to develop our first React application, and this was a really good experience – especially with the code reloading. The juniors watched the <a href="https://frontendmasters.com/courses/complete-react-v4/">Frontend Masters - Complete Intro to React v4</a> or <a href="https://www.udemy.com/react-redux/">the Udemy React + Redux course</a> to learn more about React.</p>

<p>Once we were comfortable with our React applications, we downloaded them to our machines and added TypeScript to them. We had our first guest lecture during this week, ran by one of our staff: Louis Quinnell. He ran the juniors through a Webpack setup with TypeScript.</p>

<p>This week involving React, Webpack and TypeScript was one of the hardest JEP weeks, and next time I’d probably spread it out over two weeks next time. There was just so much content crammed into one week!</p>

<p>After covering browser and JS tooling tech, we then moved out to networking concepts, like hosts, ports and HTTP. We talked about how processes can listen on specific ports, and that when they listen, they communicate over established protocols like HTTP.</p>

<p>To solidify that knowledge, we then made React applications talk to HTTP servers that served JSON data by using the <a href="https://github.com/axios/axios">axios</a> package. To serve a JSON API, we used <a href="https://github.com/typicode/json-server">the wonderful <code class="language-plaintext highlighter-rouge">json-server</code></a> package. To explain how these different routes within <code class="language-plaintext highlighter-rouge">json-server</code> worked, I wrote them up on a whiteboard:</p>

<p><img src="/images/jep/jep2-crud-whiteboard.jpg" alt="JEP 2 whiteboard" /></p>

<p>By this point, we had a clearly separated frontend + backend application structure, which is the style of application structure that we are moving towards at Culture Amp: a clear separation between backend and frontend applications.</p>

<p>We then took a week to do some coding exercises through <a href="https://www.codewars.com">CodeWars</a>, with some of the juniors completing <a href="https://www.codewars.com/kata/the-lift">a 3-kyu ranked coding problem called “The Lift”</a> in Ruby. During this week, I also set the juniors some homework of completing the Toy Robot exercise in either Ruby or TypeScript. The catch was that it had to be tested using RSpec. At the start of the week, we had our second guest lecturer: David Carlin. He ran through a short RSpec testing tutorial <a href="https://exercism.io/tracks/ruby/exercises/roman-numerals">based on the roman numerals exercise from Exercism</a>.</p>

<p>The week after that, we rebuilt our own version of <code class="language-plaintext highlighter-rouge">json-server</code> with <a href="http://sinatrarb.com/intro.html">Ruby’s Sinatra web framework</a>. By using <code class="language-plaintext highlighter-rouge">json-server</code> first, then building the same thing in Sinatra, we would have a clear idea of what we were trying to accomplish. This application used a combination of <code class="language-plaintext highlighter-rouge">File.read</code>, <code class="language-plaintext highlighter-rouge">File.write</code> and <code class="language-plaintext highlighter-rouge">JSON.parse</code> to accomplish its task, giving the juniors experience working with one particular file format.</p>

<p>During this time, I wrote a suite of tests in <a href="https://rspec.info">RSpec</a> that made requests to the Sinatra application to assert that it behaved correctly. These tests would assert that everyone’s Sinatra application was working correctly.</p>

<p>Once we had the Sinatra application working and reading from a JSON file to serve data, we then converted it again to use a <a href="https://www.mongodb.com/">Mongo database</a>. Why Mongo? Simply, because it is what we use in our main application at Culture Amp and that application will be the first touch point for a lot of juniors once they reach their teams.</p>

<p>We touched on Mongo database querying (through the <code class="language-plaintext highlighter-rouge">mongo</code> console) relatively quickly (less than an hour), before moving onto Mongoid and how to use that within a Sinatra application. We went quickly to <a href="https://rubygems.org/gems/mongoid">Mongoid</a> because that’s what we use most often to talk to our Mongo database, not direct queries in a <code class="language-plaintext highlighter-rouge">mongo</code> console.</p>

<p>We touched on what the Object-Document-Mapper (ODM) pattern was, and how it related to the Object-Relation-Mapper pattern (ORM) from Active Record. We replaced our Ruby code within the Sinatra application that read from a JSON file with one that read from a Mongoid model instead. This change made our Sinatra applications much easier to work with! The juniors were able to use the test suite to assert that their application was functioning correctly too.</p>

<p>To wrap up the 8 weeks, we spent the final week learning about <a href="https://rubyonrails.org">Ruby on Rails</a>, going through the <a href="https://guides.rubyonrails.org/getting_started.html">Getting Started guide</a> and then building an application with it. This application served a CRUD interface through regular Rails HTML+ERB views, as well as an API that worked exactly the same as our Sinatra application. We moved the RSpec tests from the Sinatra application into this new Rails application, and turned them into <a href="https://relishapp.com/rspec/rspec-rails/docs/request-specs/request-spec">RSpec request specs</a> so that we could easily test our Rails application.</p>

<p>One final bit of testing that we added later on was feature tests using the excellent <a href="https://rubygems.org/gems/capybara">Capybara gem</a>, paired with <a href="https://rubygems.org/gems/selenium-webdriver">selenium-webdriver</a> and <a href="https://rubygems.org/gems/chromedriver-helper">chromedriver-helper</a>. This allowed us to run tests within a real browser, and the juniors really loved seeing the tests run through their app blazingly fast in a real browser. I think this sort of thing is a good demonstration of what testing provides.</p>

<h3 id="building-a-team">Building a team</h3>

<p>Both of our JEP cohorts did more than just learn a bunch of pieces of tech. The whole reason why we hire a cohort of developers rather than just one or two is so that they can bond through the process. The shared experiences that the group has helps the team support each other and grow faster. To that end, we did a bunch of team building activities too.</p>

<h4 id="team-lunches">Team lunches</h4>

<p>One of our common activities was to go out to team lunches. Before the program started, we all went out and had lunch at Pok Pok Junior, a Thai restaurant. During our first week, we went out for a “Welcome to Culture Amp” lunch at Tahini Diner in the city:</p>

<p><img src="/images/jep/jep2-tahini-diner.jpg" alt="Tahini Diner" /></p>

<p>During the program, we regularly went out for lunch together as a group and I reckon that helped the group bond well.</p>

<p>By about the 3 week stage, the team had really gelled well and were routinely helping each other out, which made my work easier too. Something happened during this week – I’m not sure what – and suddenly the grouped clicked as a whole. It was very noticeable and awesome to watch.</p>

<h4 id="werewolf--dominoes">Werewolf + Dominoes</h4>

<p>On Friday afternoons, we run semi-regular sessions of Werewolf. Here’s some of our juniors during one of our Werewolf sessions at an off-site company event having a bunch of fun accusing others of lying:</p>

<p><img src="/images/jep/jep2-werewolf.jpg" alt="Werewolf" /></p>

<p>One of the other activities we’ve done for “team building” was during the 3rd week, where I brought in 500 dominoes and asked the juniors to work in teams to build the longest chain, tallest tower and a few other things:</p>

<p><img src="/images/jep/jep2-dominoes.jpg" alt="Dominoes" /></p>

<p>It turns out that 500 dominoes is not enough to share between 9 juniors so next time I might bring in 1000 and see how that goes.</p>

<p>This dominoes exercise was intended as a learning exercise for the juniors – something based around “if you take your time you produce a better quality of work” (dominoes are unforgiving if you rush them!) – but it ended up being way more fun than serious.</p>

<p>At the end of this session on dominoes, we all signed dominoes for each other and took them home as a memento of our time during the JEP even though it’s nowhere near over yet.</p>

<p><img src="/images/jep/jep2-signed-dominoes.jpg" alt="Signed Dominoes" /></p>

<p>This was a really nice touch on this lesson.</p>

<h3 id="1-on-1-support">1-on-1 support</h3>

<p>While the juniors may feel comfortable expressing themselves one way within the JEP group, there’s going to be cases where they reserve some things for more private cases. Being a junior within a large company with a bunch of experienced engineers is tough. Being in a group of people who you constantly compare yourself to can be tough too.</p>

<p>To help with this part, I spared an hour of my week every single week for each of the juniors. The juniors were told to bring their own agenda along to this meeting. We could catch up and talk about how the week was going, how they were feeling, and talk about any issues that they have encountered that week. I enjoyed these catch ups and I felt like I got to know them all better.</p>

<p>A major topic of conversation was anxiety at feeling like they weren’t good enough. This is a pretty common thing for juniors to encounter. I provided the junior assurances that this feeling of “being not good enough” is a perfectly normal thing to happen to them is what I try to do when it pops up. It’ll keep coming up from time-to-time, and I think it’s a root of imposter syndrome. Almost all of my juniors experienced this feeling during the first 8 weeks.</p>

<p>My main job here is to turn the juniors into confident and capable developers, and these 1-on-1s are critical to making that happen.</p>

<h2 id="reflections">Reflections</h2>

<p>It wouldn’t be a JEP post if I didn’t include some reflections at the end. So here they are!</p>

<h3 id="curriculum-was-great">Curriculum was great</h3>

<p>I strongly believe that the approach I took to curriculum this time around worked incredibly well. The rough order was this:</p>

<ul>
  <li>Expectation setting</li>
  <li>HTML, CSS and JavaScript</li>
  <li>React</li>
  <li>TypeScript</li>
  <li>Networking fundamentals + servers</li>
  <li>Ruby</li>
  <li>Coding exercises, TDD &amp; BDD</li>
  <li>Sinatra</li>
  <li>Mongo &amp; Mongoid</li>
  <li>Rails</li>
  <li>Capybara</li>
</ul>

<p>All of this was covered in roughly 6 weeks of “hands-on” time. It helped a lot that the juniors had a grip on some of these things already.</p>

<p>Next time I would like to separate out the React &amp; TypeScript week into two consecutive weeks – cramming them into one week felt quite intense for me and esepcially for the juniors. During the React week I could add some more content around testing with Jest.</p>

<p>By moving TypeScript out to its own week it would “disconnect” it from React. I would show that it can be used independently and how it compiles down into JavaScript. Then I can show how to use it in conjunction with React.</p>

<hr />

<p>The week spent on Rails + Capybara also felt a bit short I would split this week into two as well, so that we could cover more.</p>

<p>I would’ve loved to cover Rails + React integration using the <a href="https://github.com/rails/webpacker">Webpacker</a> gem, but we ran out of time during the last week. This gem would’ve allowed us to move our frontend code into our Rails application and would’ve gotten us a close model of how Culture Amp’s major Rails application works.</p>

<p>This is the last major piece of the puzzle of how our major Rails application works and I worry that the juniors who have now begun working on their teams won’t understand this concept well enough when they see it within the application. But maybe I am being a worry wart.</p>

<p>So overall, we covered this material in 6 weeks but I think 8 weeks of time would be more suitable.</p>

<h3 id="make-dev-machine-setup-smoother">Make dev machine setup smoother</h3>

<p>Lots of time was spent setting up their developer machines. I <em>strongly feel</em> like I should be able to automate this but I worry if I try I would be running into <a href="https://xkcd.com/1205/">this classic XKCD</a>.</p>

<p>There wasn’t a canonical list of things for the juniors to work through to set it up, and it always feel a bit ad-hoc. I think maybe keeping a list of these common tasks that developers go through when setting up their computers here would be beneficial. Sharing this list in a todo list application (Wunderlist? Things?) might help provide some order and sense to the steps.</p>

<h3 id="more-why">More “Why?”</h3>

<p>One thing that I need to seriously do better is to explain the “why” of what we’re doing a lot better. The “why?” question was a pretty common one.</p>

<p>It’s all well and good to learn new tech (it’s exciting!) but covering <em>why</em> it is important would help sell the juniors on it. Why was it important to learn React? What about JSON APIs? More why.</p>

<p>Providing more details about the “story arc” of the week / program-as-a-whole would’ve been more useful too, I believe.</p>

<h3 id="webpacker-react--rails">Webpacker, React &amp; Rails</h3>

<h3 id="none-on-ones">None-on-Ones</h3>

<p>For the past 8 weeks, I honestly have felt like I’ve been running around, shouting “AAAAAHHHHHH” with my arms flailing above my head.</p>

<p>Onboarding 9 new developers to the company and teaching them new curriculum kept me incredibly busy. So busy that I actually went to sleep at 6:30pm on at least one Friday.</p>

<p>This, coupled with my regular amount of meetings and the 1-on-1s on top of it, meant that I didn’t have much “spare” time. In this spare time I would regularly catch up on todo list items, actions that come out of 1-on-1s, emails and so on.</p>

<p>So in the future, I am setting aside <em>at least</em> 5 hours a week in sessions that I’m calling “None-on-Ones”. They’re booked in my calendar as regular meetings (where I’m marked as “busy”), except I am the only one invited. I hope this will convince myself to focus on clearing out those small-but-important tasks that I never seemed to have spare time to get around to.</p>

<p>Maybe this is a management trick I wasn’t taught yet. I think it’ll be useful.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Polymorphic Routes</title>
   <link href="http://ryanbigg.com/2018/12/polymorphic-routes"/>
   <updated>2018-12-13T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2018/12/polymorphic-routes</id>
   <content type="html"><![CDATA[<p>Really early on in Rails, you would write routes like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">redirect_to</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s2">"posts"</span><span class="p">,</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">"show"</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">id</span>
</code></pre></div></div>

<p>What this would do is dutifully redirect to the <code class="language-plaintext highlighter-rouge">show</code> action inside the <code class="language-plaintext highlighter-rouge">PostsController</code> and pass along the <code class="language-plaintext highlighter-rouge">id</code> parameter with a
value of whatever <code class="language-plaintext highlighter-rouge">@post.id</code> returns. Typical 302 response.</p>

<p>Then Rails 1.2 came along and allowed you to use routing helpers, like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">redirect_to</span> <span class="n">post_path</span><span class="p">(</span><span class="vi">@post</span><span class="p">)</span>
</code></pre></div></div>

<p>And the people rejoiced.</p>

<p>This would do effectively the same thing. <code class="language-plaintext highlighter-rouge">post_path</code> here would build a route using the <code class="language-plaintext highlighter-rouge">@post</code> object that would look something
like <code class="language-plaintext highlighter-rouge">/posts/1</code> and then <code class="language-plaintext highlighter-rouge">redirect_to</code> would send back a 302 response to that route and the browser would follow it.</p>

<p>Then later versions (I can’t remember which one), allowed syntax like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">redirect_to</span> <span class="vi">@post</span>
</code></pre></div></div>

<p>And the people rejoiced a second time.</p>

<h3 id="magic-but-not-really">Magic, but not really</h3>

<blockquote>
  <p>Any sufficiently advanced technology is indistinguishable from magic.</p>
</blockquote>

<p>While this seems like magic, it’s not. What this is doing is actually very, very neat. The <code class="language-plaintext highlighter-rouge">redirect_to</code> method, much like its cousins <code class="language-plaintext highlighter-rouge">link_to</code> and <code class="language-plaintext highlighter-rouge">form_for</code> all use a common method to build URLs, called <code class="language-plaintext highlighter-rouge">url_for</code>. The <code class="language-plaintext highlighter-rouge">url_for</code> method takes many different varieties of objects, such as strings, hashes or even instances of models, like in the example above and then uses whatever’s input to build a URL. <code class="language-plaintext highlighter-rouge">url_for</code> does this in conjunction with another method called <code class="language-plaintext highlighter-rouge">polymorphic_url</code> too.</p>

<p>Let’s look at what <code class="language-plaintext highlighter-rouge">redirect_to</code>, <code class="language-plaintext highlighter-rouge">url_for</code> and <code class="language-plaintext highlighter-rouge">polymorphic_url</code> does with these objects. In the case of the <code class="language-plaintext highlighter-rouge">redirect_to @post</code> call above, it inspects the <code class="language-plaintext highlighter-rouge">@post</code>
object, sees that it is an object of the <code class="language-plaintext highlighter-rouge">Post</code> class (we assume, anyway) and checks to see if that object has been persisted in a
database somewhere by calling <code class="language-plaintext highlighter-rouge">persisted?</code> on it.</p>

<p>By “persisted”, I mean that a Ruby object has a matching record in the database somewhere. The <code class="language-plaintext highlighter-rouge">persisted?</code> method in Active Record is implemented like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">persisted?</span>
  <span class="o">!</span><span class="p">(</span><span class="n">new_record?</span> <span class="o">||</span> <span class="n">destroyed?</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>If the object wasn’t created through a call such as <code class="language-plaintext highlighter-rouge">Model.new</code> then it won’t be a new record, and if it hasn’t had the <code class="language-plaintext highlighter-rouge">destroy</code> method called on it won’t be
destroyed either. If both of these cases are true, then that makes the object has most likely been <em>persisted</em> to the database in the form of a record.</p>

<p>If it has been persisted, then <code class="language-plaintext highlighter-rouge">url_for</code> knows that this object can be found
somewhere, and that the place it can be found is most likely under a method called <code class="language-plaintext highlighter-rouge">post_path</code>. It infers the “post” part of this method from the name of the model: <code class="language-plaintext highlighter-rouge">Post</code>. Rails then calls this method, and passes in whatever <code class="language-plaintext highlighter-rouge">to_param</code> on the model returns. By default, <code class="language-plaintext highlighter-rouge">to_param</code> is configured to return the <code class="language-plaintext highlighter-rouge">id</code>, but you can override this method in your model to return something else, like a permalink instead:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">to_param</span>
  <span class="n">permalink</span>
<span class="k">end</span>
</code></pre></div></div>
<p>In short, Rails is effectively building a method call like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#{@post.class.downcase}_path(@post.to_param)</span>
</code></pre></div></div>

<p>Which comes out to being this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">post_path</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>And when that method is called you would get this little string:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"/posts/1"
</code></pre></div></div>

<p>Lovely!</p>

<p>This is called <em>polymorphic routing</em>. You can pass an object to methods like <code class="language-plaintext highlighter-rouge">redirect_to</code>, <code class="language-plaintext highlighter-rouge">link_to</code>, <code class="language-plaintext highlighter-rouge">form_for</code> and <code class="language-plaintext highlighter-rouge">form_with</code> and Rails will
attempt to work out the correct URL of what to use.</p>

<h3 id="the-form-of-form_form">The form of form_form</h3>

<p>Now, when you’re coding Rails you may have used <code class="language-plaintext highlighter-rouge">form_for</code> like this a very long time ago:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%</span> <span class="n">form_for</span> <span class="vi">@post</span><span class="p">,</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s2">"posts"</span><span class="p">,</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">"create"</span> <span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Of course, with advancements in Rails you could simplify it to this:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%</span> <span class="n">form_for</span> <span class="vi">@post</span><span class="p">,</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="n">posts_path</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Because the form is going to default to having a <code class="language-plaintext highlighter-rouge">POST</code> HTTP method and therefore a request to <code class="language-plaintext highlighter-rouge">posts_path</code> is going to go to the
<code class="language-plaintext highlighter-rouge">create</code> action of <code class="language-plaintext highlighter-rouge">PostsController</code>, rather than the <code class="language-plaintext highlighter-rouge">index</code> action, which is what would result if it were a <code class="language-plaintext highlighter-rouge">GET</code> request.</p>

<p>But why stop there? Why not just write this?</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="vi">@post</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Personally, I see no reason not to… if it’s something as simple as this. The <code class="language-plaintext highlighter-rouge">form_for</code> method uses <code class="language-plaintext highlighter-rouge">url_for</code> underneath, just like
<code class="language-plaintext highlighter-rouge">redirect_to</code> to work out where the form should go. It knows that the <code class="language-plaintext highlighter-rouge">@post</code> object is of the <code class="language-plaintext highlighter-rouge">Post</code> class (again, we assume) and it
checks to see if the object is persisted. If it is, then it will use <code class="language-plaintext highlighter-rouge">post_path(@post)</code>. If it’s not, then <code class="language-plaintext highlighter-rouge">posts_path</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">form_for</code> method itself checks to see if the object passed in is persisted also, and if it is then it’ll default to a <code class="language-plaintext highlighter-rouge">PUT</code> HTTP
method, otherwise a <code class="language-plaintext highlighter-rouge">POST</code>.</p>

<p>So this is how <code class="language-plaintext highlighter-rouge">form_for</code> can be flexible enough to have an identical syntax on both a <code class="language-plaintext highlighter-rouge">new</code> and <code class="language-plaintext highlighter-rouge">edit</code> view. It’s becoming more and
more common these days for people to even put their whole <code class="language-plaintext highlighter-rouge">form_for</code> tags into a single partial and include it in both the <code class="language-plaintext highlighter-rouge">new</code> and
<code class="language-plaintext highlighter-rouge">edit</code> pages.</p>

<h3 id="a-more-complex-form">A more complex form</h3>

<p>So <code class="language-plaintext highlighter-rouge">form_for</code> is fairly simple for when you pass a normal object, but what happens if you pass an array of objects? Like this, for
instance:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="p">[</span><span class="vi">@post</span><span class="p">,</span> <span class="vi">@comment</span><span class="p">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Well, both <code class="language-plaintext highlighter-rouge">url_for</code> and <code class="language-plaintext highlighter-rouge">form_for</code> have you covered there too.</p>

<p>The <code class="language-plaintext highlighter-rouge">url_for</code> method detects that this is an array and separates out each part and inspects them individually. First, what is this
<code class="language-plaintext highlighter-rouge">@post</code> thing? Well, in this case let’s assume it’s a <code class="language-plaintext highlighter-rouge">Post</code> instance that <em>is</em> persisted and has the id of 1. Second, what is this
<code class="language-plaintext highlighter-rouge">@comment</code> object? It’s a <code class="language-plaintext highlighter-rouge">Comment</code> instance that has not yet been persisted to the database.</p>

<p>What <code class="language-plaintext highlighter-rouge">url_for</code> will do here is build up the URL helper method piece by piece by placing each part in an array, joining it into a routing method and then calling that routing method with the necessary arguments.</p>

<p>First, it knows that the <code class="language-plaintext highlighter-rouge">@post</code> object is of the <code class="language-plaintext highlighter-rouge">Post</code> class and is persisted, therefore the URL helper will begin with <code class="language-plaintext highlighter-rouge">post</code>. Second, it knows that the <code class="language-plaintext highlighter-rouge">@comment</code> object is of the <code class="language-plaintext highlighter-rouge">Comment</code> class and is <em>not</em> persisted, and therefore <code class="language-plaintext highlighter-rouge">comments</code> will follow <code class="language-plaintext highlighter-rouge">post</code> in the URL helper build. The parts that <code class="language-plaintext highlighter-rouge">url_for</code> now knows about are <code class="language-plaintext highlighter-rouge">[:post, :comments]</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">url_for</code> method combines these individual parts with an underscore, so that it becomes <code class="language-plaintext highlighter-rouge">post_comments</code> and then appends <code class="language-plaintext highlighter-rouge">_path</code>
to the end of that, resulting in <code class="language-plaintext highlighter-rouge">post_comments_path</code>. Then it passes in just the persisted objects to the call to that method, resulting in a call like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>post_comments_path(@post)
</code></pre></div></div>

<p>Calling that method results in this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"/posts/1/comments"
</code></pre></div></div>

<p>Best part? <code class="language-plaintext highlighter-rouge">form_for</code> will still know to use <code class="language-plaintext highlighter-rouge">POST</code> if the <code class="language-plaintext highlighter-rouge">@comment</code> object is not a persisted object, and <code class="language-plaintext highlighter-rouge">PUT</code> if it is. A good
thing to remember is that the <code class="language-plaintext highlighter-rouge">form_for</code> is always for the <em>last</em> object specified in the array. The objects prior to it are just its
nesting, nothing more.</p>

<p>The more objects that are added, the more times <code class="language-plaintext highlighter-rouge">url_for</code> will do the hard yards and build the path out… although I recommend that
you keep it to just two parts.</p>

<h3 id="a-symbolic-form">A symbolic form</h3>

<p>Now that we’ve covered using an array containing objects for <code class="language-plaintext highlighter-rouge">form_for</code>, let’s take a look at another common use. An array containing
at least one Symbol object, like this:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="p">[</span><span class="ss">:admin</span><span class="p">,</span> <span class="vi">@post</span><span class="p">,</span> <span class="vi">@comment</span><span class="p">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>What the <code class="language-plaintext highlighter-rouge">url_for</code> method does here is very simple. It sees that there’s a <code class="language-plaintext highlighter-rouge">Symbol</code> and takes it as it is. The first part of the
<code class="language-plaintext highlighter-rouge">url</code> will simply be the same as the symbol: <code class="language-plaintext highlighter-rouge">admin</code>. The URL that <code class="language-plaintext highlighter-rouge">url_for</code> knows of at this point is just <code class="language-plaintext highlighter-rouge">[:admin]</code>.</p>

<p>Then <code class="language-plaintext highlighter-rouge">url_for</code> goes through the remaining parts of the array. In this case, let’s assume both <code class="language-plaintext highlighter-rouge">@post</code> and <code class="language-plaintext highlighter-rouge">@comment</code> are persisted
and that they have the ids of 1 and 2 respectively. Same classes as before. <code class="language-plaintext highlighter-rouge">url_for</code> then adds <code class="language-plaintext highlighter-rouge">post</code> to the URL that it’s building,
and <code class="language-plaintext highlighter-rouge">comment</code> too, resulting in <code class="language-plaintext highlighter-rouge">[:admin, :post, :comment]</code>.</p>

<p>Then the joining happens, resulting in a method of <code class="language-plaintext highlighter-rouge">admin_post_comment_path</code>, and because both <code class="language-plaintext highlighter-rouge">@post</code> and <code class="language-plaintext highlighter-rouge">@comment</code> are persisted here,
they’re passed in, resulting in this method call:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">admin_post_comment_path</span><span class="p">(</span><span class="vi">@post</span><span class="p">,</span> <span class="vi">@comment</span><span class="p">)</span>
</code></pre></div></div>

<p>Which (usually) turns into this path:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/admin/posts/1/comments/2
</code></pre></div></div>

<h3 id="testing-routes-in-the-rails-console">Testing routes in the Rails console</h3>

<p>Rails provides a way to test out these routes in the <code class="language-plaintext highlighter-rouge">rails console</code>, through its <code class="language-plaintext highlighter-rouge">app</code> helper.</p>

<p>If we want to test out our <code class="language-plaintext highlighter-rouge">post_path</code> helper, we can do it with this call in the <code class="language-plaintext highlighter-rouge">rails console</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">app</span><span class="p">.</span><span class="nf">post_path</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># =&gt; /posts/1</span>
</code></pre></div></div>

<p>If we wanted to test out something more complex, like what <code class="language-plaintext highlighter-rouge">redirect_to @post</code> might return, we can invoke <code class="language-plaintext highlighter-rouge">url_for</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">first</span>
<span class="n">app</span><span class="p">.</span><span class="nf">url_for</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
<span class="c1"># =&gt; /posts/1</span>
</code></pre></div></div>

<p>This will also work with an array of objects:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">first</span>
<span class="n">comment</span> <span class="o">=</span> <span class="n">post</span><span class="p">.</span><span class="nf">comments</span><span class="p">.</span><span class="nf">first</span>
<span class="n">app</span><span class="p">.</span><span class="nf">url_for</span><span class="p">([</span><span class="n">post</span><span class="p">,</span> <span class="n">comment</span><span class="p">])</span>
<span class="c1"># =&gt; /posts/1/comments/2</span>
</code></pre></div></div>

<p>And also if we use the array with a symbol inside it:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">first</span>
<span class="n">comment</span> <span class="o">=</span> <span class="n">post</span><span class="p">.</span><span class="nf">comments</span><span class="p">.</span><span class="nf">first</span>
<span class="n">app</span><span class="p">.</span><span class="nf">url_for</span><span class="p">([</span><span class="ss">:admin</span><span class="p">,</span> <span class="n">post</span><span class="p">,</span> <span class="n">comment</span><span class="p">])</span>
<span class="c1"># =&gt; /admin/posts/1/comments/2</span>
</code></pre></div></div>

<h3 id="working-with-weirdly-named-routes">Working with weirdly named routes</h3>

<p>If you have routes that do not match their model names within the application, then you’re going to run into trouble with <code class="language-plaintext highlighter-rouge">url_for</code> and friends.</p>

<p>Let’s imagine you’ve got routes like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resources</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">as: :articles</span>
</code></pre></div></div>

<p>You will not be able to use things like:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">link_to</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">title</span><span class="p">,</span> <span class="vi">@post</span>
</code></pre></div></div>

<p>Or:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">redirect_to</span> <span class="vi">@post</span>
</code></pre></div></div>

<p>This is because the routing helper that we will need for this is called <code class="language-plaintext highlighter-rouge">article_path</code>, and not <code class="language-plaintext highlighter-rouge">post_path</code>. The inferrence of the route from the model name will break in this particular usage of <code class="language-plaintext highlighter-rouge">link_to</code>.</p>

<p>If you are unable to change the routes themselves to correct this difference, the way around it is to use a different syntax. This one:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">link_to</span> <span class="vi">@post</span><span class="p">.</span><span class="nf">title</span><span class="p">,</span> <span class="p">[</span><span class="ss">:article</span><span class="p">,</span> <span class="ss">id: </span><span class="vi">@post</span><span class="p">.</span><span class="nf">id</span><span class="p">]</span>
</code></pre></div></div>

<p>We can test this in our console too by using <code class="language-plaintext highlighter-rouge">app.url_for</code> again:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="p">.</span><span class="nf">first</span>
<span class="n">app</span><span class="p">.</span><span class="nf">url_for</span><span class="p">([</span><span class="ss">:article</span><span class="p">,</span> <span class="ss">id: </span><span class="n">post</span><span class="p">.</span><span class="nf">id</span><span class="p">])</span>
</code></pre></div></div>

<p>The way this work is that it sees that the first element is a symbol called <code class="language-plaintext highlighter-rouge">:article</code>, and so it infers that the start of the routing helper is <code class="language-plaintext highlighter-rouge">article_</code>. Then, given that there’s no more symbols, it builds a routing helper called <code class="language-plaintext highlighter-rouge">article_url</code>. The final element of the array is then passed as an argument to this method, finishing up as this method call:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">article_url</span><span class="p">(</span><span class="ss">id: </span><span class="n">post</span><span class="p">.</span><span class="nf">id</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="conclusion">Conclusion</h3>

<p>You can use the array form of polymorphic routing with the <code class="language-plaintext highlighter-rouge">redirect_to</code>, <code class="language-plaintext highlighter-rouge">link_to</code>, <code class="language-plaintext highlighter-rouge">form_for</code> and <code class="language-plaintext highlighter-rouge">form_with</code> methods. There’s probably other
methods that I’m not remembering right now that can do it too… it’s generally anything in Rails that would normally take a URL.</p>

<p>There’s no need to build your URLs in any Rails version greater-than 2 using hashes; that’s pretty old school. If you see cases like this in your applications, attempt a refactoring!</p>

<p>Experiment with your new knowledge of polymorphic routing and use it to the best of your advantage.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Working Towards Integration Testing Duolithic Applications</title>
   <link href="http://ryanbigg.com/2018/10/integration-testing-duolithic-applications"/>
   <updated>2018-10-16T00:00:00+11:00</updated>
   <id>http://ryanbigg.com/2018/10/integration-testing-duolithic-applications</id>
   <content type="html"><![CDATA[<p>I’ve been revisiting <a href="https://github.com/radar/twist-v2">Twist v2</a> recently. It’s my book review tool that I’ve rebuilt multiple times over the past 8 years. Its latest incarnation is what I’m calling a “duolith”: a very light Hanami backend application with a GraphQL API, and a frontend built with React and Apollo.</p>

<p>The backend and the frontend codebases are kept in separate directories in the same codebase. This allows for separation between the Ruby and JavaScript code, but also the ability to commit changes to both at the same time. The frontend knows how to communicate with the backend, but the backend is frontend-agnostic. Tomorrow I could replace it with Vue and the backend wouldn’t care at all.</p>

<p>I’ve got pretty extensive testing for the backend, but sparse tests for the frontend. But nothing testing the connection between the two. So I’ve been thinking about how to write some integration tests to cover everything. In the apps I’m used to (Rails ones), I’d just drop some tests into <code class="language-plaintext highlighter-rouge">spec/features</code> and it would Just Work™ because that’s what Rails is good at.</p>

<p>But this time I’ve made my life (intentionally) harder by separating the codebases, with the intention over the long-term being that these two codebases are easy to navigate due to their clean separations. The time between re-visiting this app can be months, so it’s important that it’s easy to grok again once I come back to it.</p>

<hr />

<p>Integration testing though is an interesting problem. I know I need some sort of test harness that boots a database, the backend app and the frontend app and then runs some tests over it? But how would I do that?</p>

<p>But then there’s an added complication: for each test I need to setup specific data to test it. And that data should be included in the test itself, so it’s easy to find what’s relevant to this particular test.</p>

<p>To start with, I tried creating a completely separate thing called <code class="language-plaintext highlighter-rouge">integration</code> at the top-level of this repository, but ran into issues with how to setup the data cleanly. I wanted classes from the <code class="language-plaintext highlighter-rouge">backend</code> application, but in <code class="language-plaintext highlighter-rouge">integration</code> they weren’t there.</p>

<p>So I tried another tack: putting the integration tests in the <code class="language-plaintext highlighter-rouge">backend</code> application. This instantly meant that I could access classes to create data for my tests. I could then also rely on the RSpec suite of tests that were already there, extending it a little further.</p>

<p>I’ve been <a href="https://github.com/radar/twist-v2/blob/integration-tests/docker-compose.yml">looking into Docker Compose</a> for just this and it seems to be working. I can start up:</p>

<ul>
  <li>A database</li>
  <li>Migrations (to create the tables)</li>
  <li>Frontend application</li>
  <li>Backend application</li>
  <li>Feature tests</li>
</ul>

<p>And then it run those tests in an “integration test environment”.</p>

<p>I’ve got a work-in-progress branch that I wanted to share here: <a href="https://github.com/radar/twist-v2/tree/integration-tests">twist-v2 @ integration-tests</a>. You can start following along at <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> to see how things are piecing together. Take a look at <code class="language-plaintext highlighter-rouge">backend/Dockerfile</code> and <code class="language-plaintext highlighter-rouge">frontend/Dockerfile</code> too.</p>

<p>Now that I have something working, I can be more confident that this application is working as I intend it to.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Junior Engineering Program: Resources</title>
   <link href="http://ryanbigg.com/2018/08/junior-engineering-program-resources"/>
   <updated>2018-08-29T00:00:00+10:00</updated>
   <id>http://ryanbigg.com/2018/08/junior-engineering-program-resources</id>
   <content type="html"><![CDATA[<p>This post is part of a series of posts about the first cohort of the Culture Amp Junior Engineering Program (JEP). You can read the first two posts here:</p>

<ul>
  <li><a href="https://ryanbigg.com/2018/08/junior-engineering-program-launch">Junior Engineering Program: Launch</a></li>
  <li><a href="https://ryanbigg.com/2018/08/junior-engineering-program-onboarding">Junior Engineering Program: Onboarding</a></li>
</ul>

<p>In the last post I covered the process of what we did in the weeks immediately following the juniors starting, but didn’t talk too much about what we taught them during those or subsequent weeks. That is what this post is going to talk about: what we taught our juniors over the 26 weeks of the Junior Engineering Program.</p>

<p>In the first post, I briefly rattled off some tech that we used:</p>

<blockquote>
  <p>The juniors learned how to work effectively in teams and amongst themselves, as well as learning about /Ruby, PostgreSQL, Mongo, Rails, JavaScript, Flow, React, JSON APIs and GraphQL/, all within 6 months time.</p>
</blockquote>

<p>This would seem to imply a logical progression from Ruby to PostgreSQL to Mongo and so on. Things were not quite done that way. At the start of the program, I had pre-planned the first 7 weeks of work. In hindsight, this planning was excessive.</p>

<p>At the start of most JEP weeks, we had a retrospective session where we discussed the previous week’s work, and what we would like to do in the coming weeks. This really influenced what was taught throughout the program and provided a better structure than one I could’ve come up with myself. Often, the JEP cohort would be the one deciding what we would learn next time, not me.</p>

<h2 id="part-1-git-github--ruby-weeks-1-5">Part 1: Git, GitHub + Ruby (Weeks 1-5)</h2>

<p>In this first part, we covered Git + GitHub and Ruby.</p>

<p>For the Git + GitHub sessions, the juniors wrote some “user manuals”, telling us about themselves. They then had to commit these manuals to a git branch and submit a pull request to merge that into the master branch. Other juniors would then review that PR. This was designed to get them familiar with git branching, merging and the GitHub pull request / review cycle.</p>

<p>For the remainder of this part, we focussed on Ruby skills. We covered some Exercism and Advent of Code Exercises. I think these exercises are a great tool to practice Ruby with. When working on these exercises, we introduced the concept of “mob programming”, where one junior would write code for 5 minutes while the other juniors told them what to type. Once the 5 minutes was up, another junior would take over. This was good practice working well together in a group.</p>

<p>We also worked on modelling a small Ruby application that had a similar data model as our big Rails application. Alongside this small application, I taught them about <a href="https://github.com/radar/guides/blob/master/code-organisation.md">code organisation within a Ruby application</a> and how to write RSpec tests from scratch.</p>

<p>During the writing of this application, I showed examples of two of my favourite design principles: the Single Responsibility Principle and the Law of Demeter. Code was written to intentionally violate these design principles, and then the code was refactored to use them. I think this demonstration went well.</p>

<h2 id="part-2-v1-rails-weeks-6-8">Part 2, v1: Rails (Weeks 6-8)</h2>

<p>And then I tried teaching them Rails. The goal here was for the juniors to build a link shortener application, which is more complicated than it sounds.</p>

<p>I’ll cover more about this in the “Lessons Learned” section at the end, but one does not simply teach Rails to juniors straight after teaching them Ruby. I realised this after some of my juniors asked “What does this <code class="language-plaintext highlighter-rouge">SELECT * FROM</code> thing mean in the output?”. It became pretty clear to me that I had completely ignored that the juniors didn’t know about databases yet.</p>

<p>We started working on this Rails application, using RSpec &amp; Capybara to test it. We got as far as building out the initial CRUD implementation of this app, but really the juniors needed to know more about databases before they could work effectively in a Rails application.</p>

<h2 id="part-2-v2-databases-weeks-9-13">Part 2: v2: Databases (Weeks 9-13)</h2>

<p>And so I spent a few weeks teaching them about databases. Because our link shortener Rails application was using a relational database to start with, we started learning about PostgreSQL (Week 9).</p>

<p>In these weeks, we covered how to insert, select, update and delete records from a table, how to join multiple tables together and about <a href="https://en.wikipedia.org/wiki/Database_normalization">database normalization</a>.</p>

<p>At Culture Amp we also use MongoDB, and so we spent two weeks covering the same sorts of actions as above, but with that database instead.  We also covered some more esoteric knowledge, like the <a href="https://docs.mongodb.com/manual/core/aggregation-pipeline/">MongoDB Aggregation Pipeline</a>.</p>

<h2 id="part-3-rails-week-14">Part 3: Rails (Week 14)</h2>

<p>Once we had worked on databases for a few weeks, we came back to the link shortener Rails application. The juniors finished off their CRUD implementations, and began work on adding user authentication and a JSON API to this application.</p>

<h2 id="part-4-the-rails-exam-week-15">Part 4: The Rails Exam (Week 15)</h2>

<p>Once the juniors had built out this application, we then gave them an exam to test their knowledge of Rails applications. <a href="https://github.com/cultureamp/jep/tree/master/week15">This exam</a> involved building a small CRUD application from scratch, using all the skills that they had learned in the proceeding weeks. The juniors had an entire week to complete this exam. There was to be no “pass” or “fail” in this exam; it was just to provide some insight into where the juniors were at when it came to Rails.</p>

<p>The following week I spent marking these exams, again using a rubric that I had devised. I spent a lot of this week talking to the juniors about their results. I covered things like what they might’ve missed, ways to write cleaner code and more. To say more would be to give away a few of the “answers”.</p>

<h2 id="part-5-javascript--react--apis-weeks-16-18">Part 5: JavaScript / React / APIs (Weeks 16-18)</h2>

<p>We rounded off the program by teaching the juniors about JavaScript, React, and APIs.</p>

<p>This part was kicked off by one of our Senior JavaScript Engineers, Sam Margalit. He ran two days of JEP, teaching the foundations of JavaScript, Flow and React in that time.</p>

<p>The juniors then learned how to integrate their React applications with the Rails app that they had built. This was done first by building and using a JSON API that they built within the Rails application, and then later on by an equivalent GraphQL API.</p>

<h2 id="lessons-learned">Lessons Learned</h2>

<p>Planning the JEP course was remarkably hard and I have newfound respect for teachers who do this sort of curriculum planning thing year-round.</p>

<h3 id="better-explanations--walkthroughs">Better explanations / walkthroughs</h3>

<p>What I found with a lot of the material for juniors, especially when it was <em>brand new</em> to them, was that in order to learn they needed more than just the code itself. While it’s intuitive <em>to me</em> to read code top-to-bottom and (usually) understand it first-pass, it is not the case for juniors. Writing code is  the same.</p>

<p>For this, I would involve more pseudocode and step-by-step walkthroughs of what the code should be doing in order to accomplish a particular goal. A few weeks in it was brought up by a junior that the simple task of me writing the steps of a short program on the whiteboard really helped them understand the order of what the program was doing. I think a good term for this sort of thing is “chunking” – breaking problems down into their smallest pieces. We’ll focus a lot on this next JEP.</p>

<p>Along the same lines, I would like to do more practice of walking through code to track how something is defined and then used throughout a Rails codebase. As an example: how would a junior know how to find how a field is displayed on a particular page, if they only knew the route and the value of the field? How would they even <em>begin</em> to debug that sort of thing? More practice is required here also.</p>

<h3 id="more-focus-on-fundamentals">More focus on fundamentals</h3>

<p>What might’ve helped here also is more practice around the fundamentals. Just how does it all work when you type in <code class="language-plaintext highlighter-rouge">http://localhost:3000</code> into your browser and hit enter? What is a HTTP request? What’s HTTP? What’s a port? What’s DNS? What’s TCP?</p>

<p>I don’t mean to say that there needs to be a whole <em>week</em> dedicated to each of these things, but at least covering them in a light amount of detail would be a good start. We definitely missed doing this at the start of the JEP and the next time around I will do this as these are the real fundamental concepts of every web application.</p>

<h3 id="databases-before-rails">Databases <em>before</em> Rails</h3>

<p>And now for the big regret: I hinted at this earlier on, but teaching Rails <em>immediately</em> after Ruby was… well, it was one of those “what was I thinking?” moments. The “M(odel)” of Rails applications is thing that underpins it all; if there is no data (no models) within a Rails application, what’s the point? Teaching databases <em>first</em> is vital.</p>

<p>Juniors must have at least an understanding of how to query databases, and perhaps also an understanding of how to model them in the first place in order to work effectively within applications that are backed by a database.</p>

<p>I would like to spend more time earlier on in the course teaching them about MVC <em>after</em> Ruby but before even talking about Rails. I want to spend time teaching them about models and what they provide, and then about views and what they do and wrap it up with how controllers bring the two together. No Rails course or book out there that I know of introduces MVC <em>slowly</em> like this, but I think it is certainly required.</p>

<h3 id="flip-it-and-reverse-it">Flip it and reverse it</h3>

<p>Last time, we taught in roughly this (simplified) order:</p>

<ol>
  <li>Ruby</li>
  <li>Databases</li>
  <li>Rails</li>
  <li>APIs</li>
  <li>JavaScript</li>
  <li>React</li>
</ol>

<p>After our experiences with the JEP last time and talking about the structure of the next JEP with other people, I’m now convinced that this order was backwards.</p>

<p>We should be starting at the browser and then working back from there. The whole reason why we’d use Ruby to run Rails to serve an API that React reads from is so that we would see something in the browser! So I think rendering stuff in the browser <em>first</em> is a better approach.</p>

<p>This means that I would teach roughly in this order next time:</p>

<ol>
  <li>HTML / CSS / JavaScript</li>
  <li>React</li>
  <li>APIs</li>
  <li>Ruby / Sinatra</li>
  <li>Databases</li>
  <li>…</li>
</ol>

<p>The browser is the entry point for most requests. To understand why you need Ruby to build a web <em>thing</em>, you first need to realise what a web <em>thing</em> looks like. We could start with building a static site and then slowly make it more dynamic by bringing in things like React, external APIs, etc.</p>

<p>To work with browser tech there’s sites like <a href="codepen.io">Codepen</a> and <a href="stackblitz.com">StackBlitz</a> that have zero-setup required. This means that we’ll have a smoother time jumping into things too.</p>

<p>I’m glad that I get to experiment with the JEP structure like this and I really look forward to seeing what comes out of this browsers-first experiment.</p>

]]></content>
 </entry>
 
 
</feed>